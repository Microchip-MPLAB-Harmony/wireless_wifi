var SearchFiles = ["GUID-63404677-1C09-41F6-8D95-12C76CAA1BDE.html",
							"GUID-4EC8AD6B-F2ED-4E18-965F-82C5B8A3028F.html",
							"GUID-9D7FF72B-E648-4E12-A908-7D722938C12A.html",
							"GUID-9D7FF72B-E648-4E12-A908-7D722938C12A.html",
							"GUID-9D7FF72B-E648-4E12-A908-7D722938C12A.html",
							"GUID-9D7FF72B-E648-4E12-A908-7D722938C12A.html",
							"GUID-9D7FF72B-E648-4E12-A908-7D722938C12A.html",
							"GUID-9D7FF72B-E648-4E12-A908-7D722938C12A.html",
							"GUID-9D7FF72B-E648-4E12-A908-7D722938C12A.html",
							"GUID-9D7FF72B-E648-4E12-A908-7D722938C12A.html",
							"GUID-9D7FF72B-E648-4E12-A908-7D722938C12A.html",
							"GUID-ABDC9A29-634D-48AC-B83D-570E298B7803.html",
							"GUID-ABDC9A29-634D-48AC-B83D-570E298B7803.html",
							"GUID-ABDC9A29-634D-48AC-B83D-570E298B7803.html",
							"GUID-ABDC9A29-634D-48AC-B83D-570E298B7803.html",
							"GUID-ABDC9A29-634D-48AC-B83D-570E298B7803.html",
							"GUID-616CDBC1-3935-4DBC-80FC-A5B9CE78ED13.html",
							"GUID-69E04F49-B2F4-4793-9174-5B0D2D0A7C0F.html",
							"GUID-69E04F49-B2F4-4793-9174-5B0D2D0A7C0F.html",
							"GUID-69E04F49-B2F4-4793-9174-5B0D2D0A7C0F.html",
							"GUID-69E04F49-B2F4-4793-9174-5B0D2D0A7C0F.html",
							"GUID-69E04F49-B2F4-4793-9174-5B0D2D0A7C0F.html",
							"GUID-69E04F49-B2F4-4793-9174-5B0D2D0A7C0F.html",
							"GUID-69E04F49-B2F4-4793-9174-5B0D2D0A7C0F.html",
							"GUID-B56FF47C-AEC8-4E63-9FC7-783709431BBC.html",
							"GUID-B56FF47C-AEC8-4E63-9FC7-783709431BBC.html",
							"GUID-B56FF47C-AEC8-4E63-9FC7-783709431BBC.html",
							"GUID-B56FF47C-AEC8-4E63-9FC7-783709431BBC.html",
							"GUID-B56FF47C-AEC8-4E63-9FC7-783709431BBC.html",
							"GUID-F1B1F042-5BC2-45FC-850E-792C58024027.html",
							"GUID-F1B1F042-5BC2-45FC-850E-792C58024027.html",
							"GUID-F1B1F042-5BC2-45FC-850E-792C58024027.html",
							"GUID-F1B1F042-5BC2-45FC-850E-792C58024027.html",
							"GUID-F1B1F042-5BC2-45FC-850E-792C58024027.html",
							"GUID-9618C4E6-B0B4-4B40-8D1A-74E9D953DB32.html",
							"GUID-9618C4E6-B0B4-4B40-8D1A-74E9D953DB32.html",
							"GUID-9618C4E6-B0B4-4B40-8D1A-74E9D953DB32.html",
							"GUID-9618C4E6-B0B4-4B40-8D1A-74E9D953DB32.html",
							"GUID-9618C4E6-B0B4-4B40-8D1A-74E9D953DB32.html",
							"GUID-9618C4E6-B0B4-4B40-8D1A-74E9D953DB32.html",
							"GUID-9618C4E6-B0B4-4B40-8D1A-74E9D953DB32.html",
							"GUID-DF8699E1-859E-498A-A2B2-14BA484F15AA.html",
							"GUID-DF8699E1-859E-498A-A2B2-14BA484F15AA.html",
							"GUID-DF8699E1-859E-498A-A2B2-14BA484F15AA.html",
							"GUID-DF8699E1-859E-498A-A2B2-14BA484F15AA.html",
							"GUID-DF8699E1-859E-498A-A2B2-14BA484F15AA.html",
							"GUID-DF8699E1-859E-498A-A2B2-14BA484F15AA.html",
							"GUID-DF8699E1-859E-498A-A2B2-14BA484F15AA.html",
							"GUID-DF8699E1-859E-498A-A2B2-14BA484F15AA.html",
							"GUID-D2767F7F-A339-48EE-B082-78588D0B6CA3.html",
							"GUID-D2767F7F-A339-48EE-B082-78588D0B6CA3.html",
							"GUID-D2767F7F-A339-48EE-B082-78588D0B6CA3.html",
							"GUID-D2767F7F-A339-48EE-B082-78588D0B6CA3.html",
							"GUID-D2767F7F-A339-48EE-B082-78588D0B6CA3.html",
							"GUID-D2767F7F-A339-48EE-B082-78588D0B6CA3.html",
							"GUID-D2767F7F-A339-48EE-B082-78588D0B6CA3.html",
							"GUID-D2767F7F-A339-48EE-B082-78588D0B6CA3.html",
							"GUID-59578B0F-C244-4349-9F81-8229B80F04E4.html",
							"GUID-59578B0F-C244-4349-9F81-8229B80F04E4.html",
							"GUID-59578B0F-C244-4349-9F81-8229B80F04E4.html",
							"GUID-59578B0F-C244-4349-9F81-8229B80F04E4.html",
							"GUID-59578B0F-C244-4349-9F81-8229B80F04E4.html",
							"GUID-59578B0F-C244-4349-9F81-8229B80F04E4.html",
							"GUID-59578B0F-C244-4349-9F81-8229B80F04E4.html",
							"GUID-59578B0F-C244-4349-9F81-8229B80F04E4.html",
							"GUID-0A67F966-29BA-410D-8D51-EF1CAF875F33.html",
							"GUID-0A67F966-29BA-410D-8D51-EF1CAF875F33.html",
							"GUID-0A67F966-29BA-410D-8D51-EF1CAF875F33.html",
							"GUID-0A67F966-29BA-410D-8D51-EF1CAF875F33.html",
							"GUID-0A67F966-29BA-410D-8D51-EF1CAF875F33.html",
							"GUID-0A67F966-29BA-410D-8D51-EF1CAF875F33.html",
							"GUID-0A67F966-29BA-410D-8D51-EF1CAF875F33.html",
							"GUID-0A67F966-29BA-410D-8D51-EF1CAF875F33.html",
							"GUID-38B98272-9F79-4E2B-8B1B-1BE940F6B02A.html",
							"GUID-DE8FA814-FDE4-430A-9B99-2A68C30F0233.html",
							"GUID-DE8FA814-FDE4-430A-9B99-2A68C30F0233.html",
							"GUID-DE8FA814-FDE4-430A-9B99-2A68C30F0233.html",
							"GUID-DE8FA814-FDE4-430A-9B99-2A68C30F0233.html",
							"GUID-DE8FA814-FDE4-430A-9B99-2A68C30F0233.html",
							"GUID-DE8FA814-FDE4-430A-9B99-2A68C30F0233.html",
							"GUID-DE8FA814-FDE4-430A-9B99-2A68C30F0233.html",
							"GUID-DE8FA814-FDE4-430A-9B99-2A68C30F0233.html",
							"GUID-C97E4EFB-3FAB-4629-B94E-1F1DE8350984.html",
							"GUID-C97E4EFB-3FAB-4629-B94E-1F1DE8350984.html",
							"GUID-C97E4EFB-3FAB-4629-B94E-1F1DE8350984.html",
							"GUID-C97E4EFB-3FAB-4629-B94E-1F1DE8350984.html",
							"GUID-C97E4EFB-3FAB-4629-B94E-1F1DE8350984.html",
							"GUID-C97E4EFB-3FAB-4629-B94E-1F1DE8350984.html",
							"GUID-C97E4EFB-3FAB-4629-B94E-1F1DE8350984.html",
							"GUID-C97E4EFB-3FAB-4629-B94E-1F1DE8350984.html",
							"GUID-8D63200E-D1CF-4D36-AC0D-23570973580F.html",
							"GUID-8D63200E-D1CF-4D36-AC0D-23570973580F.html",
							"GUID-8D63200E-D1CF-4D36-AC0D-23570973580F.html",
							"GUID-8D63200E-D1CF-4D36-AC0D-23570973580F.html",
							"GUID-8D63200E-D1CF-4D36-AC0D-23570973580F.html",
							"GUID-8D63200E-D1CF-4D36-AC0D-23570973580F.html",
							"GUID-8D63200E-D1CF-4D36-AC0D-23570973580F.html",
							"GUID-8D63200E-D1CF-4D36-AC0D-23570973580F.html",
							"GUID-3B687BA8-CC6B-4846-A782-129F1EBC470C.html",
							"GUID-07F5A862-34A2-4A48-B24D-3A6966AC24A4.html",
							"GUID-07F5A862-34A2-4A48-B24D-3A6966AC24A4.html",
							"GUID-07F5A862-34A2-4A48-B24D-3A6966AC24A4.html",
							"GUID-07F5A862-34A2-4A48-B24D-3A6966AC24A4.html",
							"GUID-07F5A862-34A2-4A48-B24D-3A6966AC24A4.html",
							"GUID-07F5A862-34A2-4A48-B24D-3A6966AC24A4.html",
							"GUID-07F5A862-34A2-4A48-B24D-3A6966AC24A4.html",
							"GUID-0EB59C36-8667-47E0-BB7E-585BA68CFC88.html",
							"GUID-0EB59C36-8667-47E0-BB7E-585BA68CFC88.html",
							"GUID-0EB59C36-8667-47E0-BB7E-585BA68CFC88.html",
							"GUID-0EB59C36-8667-47E0-BB7E-585BA68CFC88.html",
							"GUID-0EB59C36-8667-47E0-BB7E-585BA68CFC88.html",
							"GUID-0EB59C36-8667-47E0-BB7E-585BA68CFC88.html",
							"GUID-0EB59C36-8667-47E0-BB7E-585BA68CFC88.html",
							"GUID-0EB59C36-8667-47E0-BB7E-585BA68CFC88.html",
							"GUID-62609FEA-0339-4187-9435-88CE00E65018.html",
							"GUID-62609FEA-0339-4187-9435-88CE00E65018.html",
							"GUID-62609FEA-0339-4187-9435-88CE00E65018.html",
							"GUID-62609FEA-0339-4187-9435-88CE00E65018.html",
							"GUID-62609FEA-0339-4187-9435-88CE00E65018.html",
							"GUID-62609FEA-0339-4187-9435-88CE00E65018.html",
							"GUID-62609FEA-0339-4187-9435-88CE00E65018.html",
							"GUID-62609FEA-0339-4187-9435-88CE00E65018.html",
							"GUID-D77087B6-33AC-472C-AD7D-0EB6F30F123E.html",
							"GUID-D77087B6-33AC-472C-AD7D-0EB6F30F123E.html",
							"GUID-D77087B6-33AC-472C-AD7D-0EB6F30F123E.html",
							"GUID-D77087B6-33AC-472C-AD7D-0EB6F30F123E.html",
							"GUID-D77087B6-33AC-472C-AD7D-0EB6F30F123E.html",
							"GUID-D77087B6-33AC-472C-AD7D-0EB6F30F123E.html",
							"GUID-D77087B6-33AC-472C-AD7D-0EB6F30F123E.html",
							"GUID-D77087B6-33AC-472C-AD7D-0EB6F30F123E.html",
							"GUID-8BE8380E-360A-4D3B-AC0B-5B87D4B6A60B.html",
							"GUID-8BE8380E-360A-4D3B-AC0B-5B87D4B6A60B.html",
							"GUID-8BE8380E-360A-4D3B-AC0B-5B87D4B6A60B.html",
							"GUID-8BE8380E-360A-4D3B-AC0B-5B87D4B6A60B.html",
							"GUID-8BE8380E-360A-4D3B-AC0B-5B87D4B6A60B.html",
							"GUID-8BE8380E-360A-4D3B-AC0B-5B87D4B6A60B.html",
							"GUID-8BE8380E-360A-4D3B-AC0B-5B87D4B6A60B.html",
							"GUID-8BE8380E-360A-4D3B-AC0B-5B87D4B6A60B.html",
							"GUID-4E25D2C0-21B1-43D6-B3F1-33DE1D7CDC6E.html",
							"GUID-4E25D2C0-21B1-43D6-B3F1-33DE1D7CDC6E.html",
							"GUID-4E25D2C0-21B1-43D6-B3F1-33DE1D7CDC6E.html",
							"GUID-4E25D2C0-21B1-43D6-B3F1-33DE1D7CDC6E.html",
							"GUID-4E25D2C0-21B1-43D6-B3F1-33DE1D7CDC6E.html",
							"GUID-4E25D2C0-21B1-43D6-B3F1-33DE1D7CDC6E.html",
							"GUID-4E25D2C0-21B1-43D6-B3F1-33DE1D7CDC6E.html",
							"GUID-4E25D2C0-21B1-43D6-B3F1-33DE1D7CDC6E.html",
							"GUID-C0A91481-BE29-4CE6-9520-B9999BCC19E3.html",
							"GUID-C0A91481-BE29-4CE6-9520-B9999BCC19E3.html",
							"GUID-C0A91481-BE29-4CE6-9520-B9999BCC19E3.html",
							"GUID-C0A91481-BE29-4CE6-9520-B9999BCC19E3.html",
							"GUID-C0A91481-BE29-4CE6-9520-B9999BCC19E3.html",
							"GUID-C0A91481-BE29-4CE6-9520-B9999BCC19E3.html",
							"GUID-C0A91481-BE29-4CE6-9520-B9999BCC19E3.html",
							"GUID-C0A91481-BE29-4CE6-9520-B9999BCC19E3.html",
							"GUID-C0858BB2-B95A-4B25-B5BD-4B19C6E09ED9.html",
							"GUID-C0858BB2-B95A-4B25-B5BD-4B19C6E09ED9.html",
							"GUID-C0858BB2-B95A-4B25-B5BD-4B19C6E09ED9.html",
							"GUID-C0858BB2-B95A-4B25-B5BD-4B19C6E09ED9.html",
							"GUID-C0858BB2-B95A-4B25-B5BD-4B19C6E09ED9.html",
							"GUID-C0858BB2-B95A-4B25-B5BD-4B19C6E09ED9.html",
							"GUID-C0858BB2-B95A-4B25-B5BD-4B19C6E09ED9.html",
							"GUID-C0858BB2-B95A-4B25-B5BD-4B19C6E09ED9.html",
							"GUID-D21AD79C-567A-4A01-993A-82FC7E3611CA.html",
							"GUID-D21AD79C-567A-4A01-993A-82FC7E3611CA.html",
							"GUID-D21AD79C-567A-4A01-993A-82FC7E3611CA.html",
							"GUID-D21AD79C-567A-4A01-993A-82FC7E3611CA.html",
							"GUID-D21AD79C-567A-4A01-993A-82FC7E3611CA.html",
							"GUID-D21AD79C-567A-4A01-993A-82FC7E3611CA.html",
							"GUID-D21AD79C-567A-4A01-993A-82FC7E3611CA.html",
							"GUID-D21AD79C-567A-4A01-993A-82FC7E3611CA.html",
							"GUID-F63B27BC-58CA-410B-89D2-FC5221B921AD.html",
							"GUID-F63B27BC-58CA-410B-89D2-FC5221B921AD.html",
							"GUID-F63B27BC-58CA-410B-89D2-FC5221B921AD.html",
							"GUID-F63B27BC-58CA-410B-89D2-FC5221B921AD.html",
							"GUID-F63B27BC-58CA-410B-89D2-FC5221B921AD.html",
							"GUID-F63B27BC-58CA-410B-89D2-FC5221B921AD.html",
							"GUID-F63B27BC-58CA-410B-89D2-FC5221B921AD.html",
							"GUID-F63B27BC-58CA-410B-89D2-FC5221B921AD.html",
							"GUID-35AEB7EE-B0EA-45A7-884F-6C1A05971FBF.html",
							"GUID-35AEB7EE-B0EA-45A7-884F-6C1A05971FBF.html",
							"GUID-35AEB7EE-B0EA-45A7-884F-6C1A05971FBF.html",
							"GUID-35AEB7EE-B0EA-45A7-884F-6C1A05971FBF.html",
							"GUID-35AEB7EE-B0EA-45A7-884F-6C1A05971FBF.html",
							"GUID-35AEB7EE-B0EA-45A7-884F-6C1A05971FBF.html",
							"GUID-35AEB7EE-B0EA-45A7-884F-6C1A05971FBF.html",
							"GUID-35AEB7EE-B0EA-45A7-884F-6C1A05971FBF.html",
							"GUID-A1973CB2-FDD4-4331-8C34-628D76F97AA5.html",
							"GUID-0B377484-72D9-4299-AE14-DFBE284E0BC3.html",
							"GUID-0B377484-72D9-4299-AE14-DFBE284E0BC3.html",
							"GUID-0B377484-72D9-4299-AE14-DFBE284E0BC3.html",
							"GUID-0B377484-72D9-4299-AE14-DFBE284E0BC3.html",
							"GUID-0B377484-72D9-4299-AE14-DFBE284E0BC3.html",
							"GUID-0B377484-72D9-4299-AE14-DFBE284E0BC3.html",
							"GUID-0B377484-72D9-4299-AE14-DFBE284E0BC3.html",
							"GUID-0B377484-72D9-4299-AE14-DFBE284E0BC3.html",
							"GUID-97F4B27C-55F0-422F-A3D6-A58842D09E97.html",
							"GUID-97F4B27C-55F0-422F-A3D6-A58842D09E97.html",
							"GUID-97F4B27C-55F0-422F-A3D6-A58842D09E97.html",
							"GUID-97F4B27C-55F0-422F-A3D6-A58842D09E97.html",
							"GUID-97F4B27C-55F0-422F-A3D6-A58842D09E97.html",
							"GUID-97F4B27C-55F0-422F-A3D6-A58842D09E97.html",
							"GUID-97F4B27C-55F0-422F-A3D6-A58842D09E97.html",
							"GUID-97F4B27C-55F0-422F-A3D6-A58842D09E97.html",
							"GUID-3744A796-97FD-42E1-91E5-6AC2632D5607.html",
							"GUID-3744A796-97FD-42E1-91E5-6AC2632D5607.html",
							"GUID-3744A796-97FD-42E1-91E5-6AC2632D5607.html",
							"GUID-3744A796-97FD-42E1-91E5-6AC2632D5607.html",
							"GUID-3744A796-97FD-42E1-91E5-6AC2632D5607.html",
							"GUID-3744A796-97FD-42E1-91E5-6AC2632D5607.html",
							"GUID-3744A796-97FD-42E1-91E5-6AC2632D5607.html",
							"GUID-3744A796-97FD-42E1-91E5-6AC2632D5607.html",
							"GUID-C29F6564-0F47-4455-A4E3-FE68DFC51C49.html",
							"GUID-C29F6564-0F47-4455-A4E3-FE68DFC51C49.html",
							"GUID-C29F6564-0F47-4455-A4E3-FE68DFC51C49.html",
							"GUID-C29F6564-0F47-4455-A4E3-FE68DFC51C49.html",
							"GUID-C29F6564-0F47-4455-A4E3-FE68DFC51C49.html",
							"GUID-C29F6564-0F47-4455-A4E3-FE68DFC51C49.html",
							"GUID-C29F6564-0F47-4455-A4E3-FE68DFC51C49.html",
							"GUID-C29F6564-0F47-4455-A4E3-FE68DFC51C49.html",
							"GUID-2C98CE0C-BC5E-4875-842C-2D591C000F85.html",
							"GUID-2C98CE0C-BC5E-4875-842C-2D591C000F85.html",
							"GUID-2C98CE0C-BC5E-4875-842C-2D591C000F85.html",
							"GUID-2C98CE0C-BC5E-4875-842C-2D591C000F85.html",
							"GUID-2C98CE0C-BC5E-4875-842C-2D591C000F85.html",
							"GUID-2C98CE0C-BC5E-4875-842C-2D591C000F85.html",
							"GUID-2C98CE0C-BC5E-4875-842C-2D591C000F85.html",
							"GUID-2C98CE0C-BC5E-4875-842C-2D591C000F85.html",
							"GUID-BB0DEC1B-642C-486F-8155-29DEF7A538D0.html",
							"GUID-BB0DEC1B-642C-486F-8155-29DEF7A538D0.html",
							"GUID-BB0DEC1B-642C-486F-8155-29DEF7A538D0.html",
							"GUID-BB0DEC1B-642C-486F-8155-29DEF7A538D0.html",
							"GUID-BB0DEC1B-642C-486F-8155-29DEF7A538D0.html",
							"GUID-BB0DEC1B-642C-486F-8155-29DEF7A538D0.html",
							"GUID-BB0DEC1B-642C-486F-8155-29DEF7A538D0.html",
							"GUID-BB0DEC1B-642C-486F-8155-29DEF7A538D0.html",
							"GUID-2335ACBC-3CA0-4AE1-A842-59F55DC0B149.html",
							"GUID-2335ACBC-3CA0-4AE1-A842-59F55DC0B149.html",
							"GUID-2335ACBC-3CA0-4AE1-A842-59F55DC0B149.html",
							"GUID-2335ACBC-3CA0-4AE1-A842-59F55DC0B149.html",
							"GUID-2335ACBC-3CA0-4AE1-A842-59F55DC0B149.html",
							"GUID-2335ACBC-3CA0-4AE1-A842-59F55DC0B149.html",
							"GUID-2335ACBC-3CA0-4AE1-A842-59F55DC0B149.html",
							"GUID-2335ACBC-3CA0-4AE1-A842-59F55DC0B149.html",
							"GUID-70CC6D2C-E661-472B-A9FC-C8B2BAD88832.html",
							"GUID-70CC6D2C-E661-472B-A9FC-C8B2BAD88832.html",
							"GUID-70CC6D2C-E661-472B-A9FC-C8B2BAD88832.html",
							"GUID-70CC6D2C-E661-472B-A9FC-C8B2BAD88832.html",
							"GUID-70CC6D2C-E661-472B-A9FC-C8B2BAD88832.html",
							"GUID-7A3FD52F-3099-49A8-A6AC-7461BC124ED8.html",
							"GUID-7A3FD52F-3099-49A8-A6AC-7461BC124ED8.html",
							"GUID-7A3FD52F-3099-49A8-A6AC-7461BC124ED8.html",
							"GUID-7A3FD52F-3099-49A8-A6AC-7461BC124ED8.html",
							"GUID-7A3FD52F-3099-49A8-A6AC-7461BC124ED8.html",
							"GUID-7A3FD52F-3099-49A8-A6AC-7461BC124ED8.html",
							"GUID-7A3FD52F-3099-49A8-A6AC-7461BC124ED8.html",
							"GUID-7E8B70A2-A1F9-4F83-89F8-5450933B7D77.html",
							"GUID-7E8B70A2-A1F9-4F83-89F8-5450933B7D77.html",
							"GUID-7E8B70A2-A1F9-4F83-89F8-5450933B7D77.html",
							"GUID-7E8B70A2-A1F9-4F83-89F8-5450933B7D77.html",
							"GUID-7E8B70A2-A1F9-4F83-89F8-5450933B7D77.html",
							"GUID-7E8B70A2-A1F9-4F83-89F8-5450933B7D77.html",
							"GUID-7E8B70A2-A1F9-4F83-89F8-5450933B7D77.html",
							"GUID-7E8B70A2-A1F9-4F83-89F8-5450933B7D77.html",
							"GUID-5F105463-B28D-4D4E-BD09-365304360143.html",
							"GUID-5F105463-B28D-4D4E-BD09-365304360143.html",
							"GUID-5F105463-B28D-4D4E-BD09-365304360143.html",
							"GUID-5F105463-B28D-4D4E-BD09-365304360143.html",
							"GUID-5F105463-B28D-4D4E-BD09-365304360143.html",
							"GUID-5F105463-B28D-4D4E-BD09-365304360143.html",
							"GUID-5F105463-B28D-4D4E-BD09-365304360143.html",
							"GUID-5F105463-B28D-4D4E-BD09-365304360143.html",
							"GUID-237690AC-9D9D-4CE1-A4BE-BE2A0A41ABE1.html",
							"GUID-237690AC-9D9D-4CE1-A4BE-BE2A0A41ABE1.html",
							"GUID-237690AC-9D9D-4CE1-A4BE-BE2A0A41ABE1.html",
							"GUID-237690AC-9D9D-4CE1-A4BE-BE2A0A41ABE1.html",
							"GUID-237690AC-9D9D-4CE1-A4BE-BE2A0A41ABE1.html",
							"GUID-237690AC-9D9D-4CE1-A4BE-BE2A0A41ABE1.html",
							"GUID-237690AC-9D9D-4CE1-A4BE-BE2A0A41ABE1.html",
							"GUID-237690AC-9D9D-4CE1-A4BE-BE2A0A41ABE1.html",
							"GUID-833E3062-0EF5-4C7B-90AA-244A02494757.html",
							"GUID-833E3062-0EF5-4C7B-90AA-244A02494757.html",
							"GUID-833E3062-0EF5-4C7B-90AA-244A02494757.html",
							"GUID-833E3062-0EF5-4C7B-90AA-244A02494757.html",
							"GUID-833E3062-0EF5-4C7B-90AA-244A02494757.html",
							"GUID-833E3062-0EF5-4C7B-90AA-244A02494757.html",
							"GUID-833E3062-0EF5-4C7B-90AA-244A02494757.html",
							"GUID-833E3062-0EF5-4C7B-90AA-244A02494757.html",
							"GUID-2FAD3653-78B4-42A4-89A3-D1F492AE27A0.html",
							"GUID-313368DE-CCC8-459C-99DE-47762D5731CC.html",
							"GUID-313368DE-CCC8-459C-99DE-47762D5731CC.html",
							"GUID-313368DE-CCC8-459C-99DE-47762D5731CC.html",
							"GUID-313368DE-CCC8-459C-99DE-47762D5731CC.html",
							"GUID-313368DE-CCC8-459C-99DE-47762D5731CC.html",
							"GUID-313368DE-CCC8-459C-99DE-47762D5731CC.html",
							"GUID-313368DE-CCC8-459C-99DE-47762D5731CC.html",
							"GUID-313368DE-CCC8-459C-99DE-47762D5731CC.html",
							"GUID-DEDB8880-71DA-46D9-8223-C2C95F6D3B18.html",
							"GUID-DEDB8880-71DA-46D9-8223-C2C95F6D3B18.html",
							"GUID-DEDB8880-71DA-46D9-8223-C2C95F6D3B18.html",
							"GUID-DEDB8880-71DA-46D9-8223-C2C95F6D3B18.html",
							"GUID-DEDB8880-71DA-46D9-8223-C2C95F6D3B18.html",
							"GUID-DEDB8880-71DA-46D9-8223-C2C95F6D3B18.html",
							"GUID-DEDB8880-71DA-46D9-8223-C2C95F6D3B18.html",
							"GUID-DEDB8880-71DA-46D9-8223-C2C95F6D3B18.html",
							"GUID-78DB111E-E79A-4370-AE52-C9CE06147971.html",
							"GUID-76364FA8-610F-4BB3-9C29-1E7474982DA1.html",
							"GUID-76364FA8-610F-4BB3-9C29-1E7474982DA1.html",
							"GUID-76364FA8-610F-4BB3-9C29-1E7474982DA1.html",
							"GUID-76364FA8-610F-4BB3-9C29-1E7474982DA1.html",
							"GUID-76364FA8-610F-4BB3-9C29-1E7474982DA1.html",
							"GUID-76364FA8-610F-4BB3-9C29-1E7474982DA1.html",
							"GUID-76364FA8-610F-4BB3-9C29-1E7474982DA1.html",
							"GUID-BBC5C177-4BC4-4472-A19A-C60261121CF0.html",
							"GUID-BBC5C177-4BC4-4472-A19A-C60261121CF0.html",
							"GUID-BBC5C177-4BC4-4472-A19A-C60261121CF0.html",
							"GUID-BBC5C177-4BC4-4472-A19A-C60261121CF0.html",
							"GUID-BBC5C177-4BC4-4472-A19A-C60261121CF0.html",
							"GUID-C03897C9-8CB4-4452-BDC3-06FA1DA4EB82.html",
							"GUID-C03897C9-8CB4-4452-BDC3-06FA1DA4EB82.html",
							"GUID-C03897C9-8CB4-4452-BDC3-06FA1DA4EB82.html",
							"GUID-C03897C9-8CB4-4452-BDC3-06FA1DA4EB82.html",
							"GUID-C03897C9-8CB4-4452-BDC3-06FA1DA4EB82.html",
							"GUID-C03897C9-8CB4-4452-BDC3-06FA1DA4EB82.html",
							"GUID-C03897C9-8CB4-4452-BDC3-06FA1DA4EB82.html",
							"GUID-C03897C9-8CB4-4452-BDC3-06FA1DA4EB82.html",
							"GUID-7CFCDC19-0A74-4164-A437-BEFE7061053A.html",
							"GUID-7CFCDC19-0A74-4164-A437-BEFE7061053A.html",
							"GUID-7CFCDC19-0A74-4164-A437-BEFE7061053A.html",
							"GUID-7CFCDC19-0A74-4164-A437-BEFE7061053A.html",
							"GUID-7CFCDC19-0A74-4164-A437-BEFE7061053A.html",
							"GUID-7CFCDC19-0A74-4164-A437-BEFE7061053A.html",
							"GUID-7CFCDC19-0A74-4164-A437-BEFE7061053A.html",
							"GUID-7CFCDC19-0A74-4164-A437-BEFE7061053A.html",
							"GUID-66583817-8C3B-4CBE-9F01-E862ACDFAD70.html",
							"GUID-66583817-8C3B-4CBE-9F01-E862ACDFAD70.html",
							"GUID-66583817-8C3B-4CBE-9F01-E862ACDFAD70.html",
							"GUID-66583817-8C3B-4CBE-9F01-E862ACDFAD70.html",
							"GUID-66583817-8C3B-4CBE-9F01-E862ACDFAD70.html",
							"GUID-66583817-8C3B-4CBE-9F01-E862ACDFAD70.html",
							"GUID-66583817-8C3B-4CBE-9F01-E862ACDFAD70.html",
							"GUID-66583817-8C3B-4CBE-9F01-E862ACDFAD70.html",
							"GUID-4CB9E571-2A08-47B5-B3F3-76C0CEB81767.html",
							"GUID-4CB9E571-2A08-47B5-B3F3-76C0CEB81767.html",
							"GUID-4CB9E571-2A08-47B5-B3F3-76C0CEB81767.html",
							"GUID-4CB9E571-2A08-47B5-B3F3-76C0CEB81767.html",
							"GUID-4CB9E571-2A08-47B5-B3F3-76C0CEB81767.html",
							"GUID-4CB9E571-2A08-47B5-B3F3-76C0CEB81767.html",
							"GUID-4CB9E571-2A08-47B5-B3F3-76C0CEB81767.html",
							"GUID-4CB9E571-2A08-47B5-B3F3-76C0CEB81767.html",
							"GUID-44FF5A20-CD27-40EC-9DBE-EE5848F6C6B2.html",
							"GUID-44FF5A20-CD27-40EC-9DBE-EE5848F6C6B2.html",
							"GUID-44FF5A20-CD27-40EC-9DBE-EE5848F6C6B2.html",
							"GUID-44FF5A20-CD27-40EC-9DBE-EE5848F6C6B2.html",
							"GUID-44FF5A20-CD27-40EC-9DBE-EE5848F6C6B2.html",
							"GUID-44FF5A20-CD27-40EC-9DBE-EE5848F6C6B2.html",
							"GUID-44FF5A20-CD27-40EC-9DBE-EE5848F6C6B2.html",
							"GUID-44FF5A20-CD27-40EC-9DBE-EE5848F6C6B2.html",
							"GUID-02ED2A09-D42F-4CD2-B87A-FE433F01370D.html",
							"GUID-02ED2A09-D42F-4CD2-B87A-FE433F01370D.html",
							"GUID-02ED2A09-D42F-4CD2-B87A-FE433F01370D.html",
							"GUID-02ED2A09-D42F-4CD2-B87A-FE433F01370D.html",
							"GUID-02ED2A09-D42F-4CD2-B87A-FE433F01370D.html",
							"GUID-02ED2A09-D42F-4CD2-B87A-FE433F01370D.html",
							"GUID-02ED2A09-D42F-4CD2-B87A-FE433F01370D.html",
							"GUID-02ED2A09-D42F-4CD2-B87A-FE433F01370D.html",
							"GUID-78C1D07E-0BA2-472F-8F67-C19B29C2FA50.html",
							"GUID-78C1D07E-0BA2-472F-8F67-C19B29C2FA50.html",
							"GUID-78C1D07E-0BA2-472F-8F67-C19B29C2FA50.html",
							"GUID-78C1D07E-0BA2-472F-8F67-C19B29C2FA50.html",
							"GUID-78C1D07E-0BA2-472F-8F67-C19B29C2FA50.html",
							"GUID-78C1D07E-0BA2-472F-8F67-C19B29C2FA50.html",
							"GUID-78C1D07E-0BA2-472F-8F67-C19B29C2FA50.html",
							"GUID-78C1D07E-0BA2-472F-8F67-C19B29C2FA50.html",
							"GUID-F8DEA63C-71E7-4553-A3D4-94CA8A3B4691.html",
							"GUID-F8DEA63C-71E7-4553-A3D4-94CA8A3B4691.html",
							"GUID-F8DEA63C-71E7-4553-A3D4-94CA8A3B4691.html",
							"GUID-F8DEA63C-71E7-4553-A3D4-94CA8A3B4691.html",
							"GUID-F8DEA63C-71E7-4553-A3D4-94CA8A3B4691.html",
							"GUID-F8DEA63C-71E7-4553-A3D4-94CA8A3B4691.html",
							"GUID-F8DEA63C-71E7-4553-A3D4-94CA8A3B4691.html",
							"GUID-F8DEA63C-71E7-4553-A3D4-94CA8A3B4691.html",
							"GUID-5E4DE35D-0E4D-4D34-A4EF-4464B592F400.html",
							"GUID-5E4DE35D-0E4D-4D34-A4EF-4464B592F400.html",
							"GUID-5E4DE35D-0E4D-4D34-A4EF-4464B592F400.html",
							"GUID-5E4DE35D-0E4D-4D34-A4EF-4464B592F400.html",
							"GUID-5E4DE35D-0E4D-4D34-A4EF-4464B592F400.html",
							"GUID-5E4DE35D-0E4D-4D34-A4EF-4464B592F400.html",
							"GUID-5E4DE35D-0E4D-4D34-A4EF-4464B592F400.html",
							"GUID-5E4DE35D-0E4D-4D34-A4EF-4464B592F400.html",
							"GUID-5195123C-F0F4-4B6F-8424-A8B39E368881.html",
							"GUID-5195123C-F0F4-4B6F-8424-A8B39E368881.html",
							"GUID-5195123C-F0F4-4B6F-8424-A8B39E368881.html",
							"GUID-5195123C-F0F4-4B6F-8424-A8B39E368881.html",
							"GUID-5195123C-F0F4-4B6F-8424-A8B39E368881.html",
							"GUID-5195123C-F0F4-4B6F-8424-A8B39E368881.html",
							"GUID-5195123C-F0F4-4B6F-8424-A8B39E368881.html",
							"GUID-5195123C-F0F4-4B6F-8424-A8B39E368881.html",
							"GUID-0459459F-E39F-4FB8-B936-C97285F171CA.html",
							"GUID-0459459F-E39F-4FB8-B936-C97285F171CA.html",
							"GUID-0459459F-E39F-4FB8-B936-C97285F171CA.html",
							"GUID-0459459F-E39F-4FB8-B936-C97285F171CA.html",
							"GUID-0459459F-E39F-4FB8-B936-C97285F171CA.html",
							"GUID-0459459F-E39F-4FB8-B936-C97285F171CA.html",
							"GUID-0459459F-E39F-4FB8-B936-C97285F171CA.html",
							"GUID-0459459F-E39F-4FB8-B936-C97285F171CA.html",
							"GUID-CA544C44-D3FF-451B-9DC3-EF8A5A84C161.html",
							"GUID-BB86DF33-DA59-40AC-AFCD-F3BAED76EA26.html",
							"GUID-BB86DF33-DA59-40AC-AFCD-F3BAED76EA26.html",
							"GUID-BB86DF33-DA59-40AC-AFCD-F3BAED76EA26.html",
							"GUID-BB86DF33-DA59-40AC-AFCD-F3BAED76EA26.html",
							"GUID-BB86DF33-DA59-40AC-AFCD-F3BAED76EA26.html",
							"GUID-21FC15BA-6E5E-4210-B81A-A0DED32516AD.html",
							"GUID-21FC15BA-6E5E-4210-B81A-A0DED32516AD.html",
							"GUID-21FC15BA-6E5E-4210-B81A-A0DED32516AD.html",
							"GUID-21FC15BA-6E5E-4210-B81A-A0DED32516AD.html",
							"GUID-21FC15BA-6E5E-4210-B81A-A0DED32516AD.html",
							"GUID-21FC15BA-6E5E-4210-B81A-A0DED32516AD.html",
							"GUID-21FC15BA-6E5E-4210-B81A-A0DED32516AD.html",
							"GUID-21FC15BA-6E5E-4210-B81A-A0DED32516AD.html",
							"GUID-39D1EB75-81FB-421B-874F-D79CD542D967.html",
							"GUID-39D1EB75-81FB-421B-874F-D79CD542D967.html",
							"GUID-39D1EB75-81FB-421B-874F-D79CD542D967.html",
							"GUID-39D1EB75-81FB-421B-874F-D79CD542D967.html",
							"GUID-39D1EB75-81FB-421B-874F-D79CD542D967.html",
							"GUID-39D1EB75-81FB-421B-874F-D79CD542D967.html",
							"GUID-39D1EB75-81FB-421B-874F-D79CD542D967.html",
							"GUID-39D1EB75-81FB-421B-874F-D79CD542D967.html",
							"GUID-C79465BA-38BB-4ABC-A45C-5FDCB79FA3A1.html",
							"GUID-C79465BA-38BB-4ABC-A45C-5FDCB79FA3A1.html",
							"GUID-C79465BA-38BB-4ABC-A45C-5FDCB79FA3A1.html",
							"GUID-C79465BA-38BB-4ABC-A45C-5FDCB79FA3A1.html",
							"GUID-C79465BA-38BB-4ABC-A45C-5FDCB79FA3A1.html",
							"GUID-C79465BA-38BB-4ABC-A45C-5FDCB79FA3A1.html",
							"GUID-C79465BA-38BB-4ABC-A45C-5FDCB79FA3A1.html",
							"GUID-C79465BA-38BB-4ABC-A45C-5FDCB79FA3A1.html",
							"GUID-1A16AFB9-0845-42CE-A604-361A3C412DED.html",
							"GUID-BE9A0977-3616-4935-92BF-8FCEF7F121D8.html",
							"GUID-BE9A0977-3616-4935-92BF-8FCEF7F121D8.html",
							"GUID-BE9A0977-3616-4935-92BF-8FCEF7F121D8.html",
							"GUID-BE9A0977-3616-4935-92BF-8FCEF7F121D8.html",
							"GUID-BE9A0977-3616-4935-92BF-8FCEF7F121D8.html",
							"GUID-BE9A0977-3616-4935-92BF-8FCEF7F121D8.html",
							"GUID-BE9A0977-3616-4935-92BF-8FCEF7F121D8.html",
							"GUID-BE9A0977-3616-4935-92BF-8FCEF7F121D8.html",
							"GUID-7F977039-8978-42C8-B827-41D3F34D3DF5.html",
							"GUID-7F977039-8978-42C8-B827-41D3F34D3DF5.html",
							"GUID-7F977039-8978-42C8-B827-41D3F34D3DF5.html",
							"GUID-7F977039-8978-42C8-B827-41D3F34D3DF5.html",
							"GUID-7F977039-8978-42C8-B827-41D3F34D3DF5.html",
							"GUID-7F977039-8978-42C8-B827-41D3F34D3DF5.html",
							"GUID-7F977039-8978-42C8-B827-41D3F34D3DF5.html",
							"GUID-7F977039-8978-42C8-B827-41D3F34D3DF5.html",
							"GUID-4FAD93E9-85FB-4180-908D-DDB94AB6F6BB.html",
							"GUID-4FAD93E9-85FB-4180-908D-DDB94AB6F6BB.html",
							"GUID-4FAD93E9-85FB-4180-908D-DDB94AB6F6BB.html",
							"GUID-4FAD93E9-85FB-4180-908D-DDB94AB6F6BB.html",
							"GUID-4FAD93E9-85FB-4180-908D-DDB94AB6F6BB.html",
							"GUID-4FAD93E9-85FB-4180-908D-DDB94AB6F6BB.html",
							"GUID-4FAD93E9-85FB-4180-908D-DDB94AB6F6BB.html",
							"GUID-4FAD93E9-85FB-4180-908D-DDB94AB6F6BB.html",
							"GUID-DB718ADE-4DFD-4A28-A968-C4354594BAD1.html",
							"GUID-DB718ADE-4DFD-4A28-A968-C4354594BAD1.html",
							"GUID-DB718ADE-4DFD-4A28-A968-C4354594BAD1.html",
							"GUID-DB718ADE-4DFD-4A28-A968-C4354594BAD1.html",
							"GUID-DB718ADE-4DFD-4A28-A968-C4354594BAD1.html",
							"GUID-DB718ADE-4DFD-4A28-A968-C4354594BAD1.html",
							"GUID-DB718ADE-4DFD-4A28-A968-C4354594BAD1.html",
							"GUID-DB718ADE-4DFD-4A28-A968-C4354594BAD1.html",
							"GUID-D45FD002-4D1F-482A-A111-4FEED907F099.html",
							"GUID-D45FD002-4D1F-482A-A111-4FEED907F099.html",
							"GUID-D45FD002-4D1F-482A-A111-4FEED907F099.html",
							"GUID-D45FD002-4D1F-482A-A111-4FEED907F099.html",
							"GUID-D45FD002-4D1F-482A-A111-4FEED907F099.html",
							"GUID-72234C45-8DB7-4B1A-A5D9-B45EE408CFEF.html",
							"GUID-EFEFA06B-16BD-412C-A3B1-F37AA66E9AC4.html",
							"GUID-EFEFA06B-16BD-412C-A3B1-F37AA66E9AC4.html",
							"GUID-EFEFA06B-16BD-412C-A3B1-F37AA66E9AC4.html",
							"GUID-EFEFA06B-16BD-412C-A3B1-F37AA66E9AC4.html",
							"GUID-EFEFA06B-16BD-412C-A3B1-F37AA66E9AC4.html",
							"GUID-EFEFA06B-16BD-412C-A3B1-F37AA66E9AC4.html",
							"GUID-EFEFA06B-16BD-412C-A3B1-F37AA66E9AC4.html",
							"GUID-EFEFA06B-16BD-412C-A3B1-F37AA66E9AC4.html",
							"GUID-E98C2F70-A211-4437-A69D-23612AE87FC6.html",
							"GUID-E98C2F70-A211-4437-A69D-23612AE87FC6.html",
							"GUID-E98C2F70-A211-4437-A69D-23612AE87FC6.html",
							"GUID-E98C2F70-A211-4437-A69D-23612AE87FC6.html",
							"GUID-E98C2F70-A211-4437-A69D-23612AE87FC6.html",
							"GUID-E98C2F70-A211-4437-A69D-23612AE87FC6.html",
							"GUID-E98C2F70-A211-4437-A69D-23612AE87FC6.html",
							"GUID-E98C2F70-A211-4437-A69D-23612AE87FC6.html",
							"GUID-4D0F629D-36BF-4205-91F0-AC0118A3D665.html",
							"GUID-4D0F629D-36BF-4205-91F0-AC0118A3D665.html",
							"GUID-4D0F629D-36BF-4205-91F0-AC0118A3D665.html",
							"GUID-4D0F629D-36BF-4205-91F0-AC0118A3D665.html",
							"GUID-4D0F629D-36BF-4205-91F0-AC0118A3D665.html",
							"GUID-4D0F629D-36BF-4205-91F0-AC0118A3D665.html",
							"GUID-4D0F629D-36BF-4205-91F0-AC0118A3D665.html",
							"GUID-4D0F629D-36BF-4205-91F0-AC0118A3D665.html",
							"GUID-31497D4C-2D61-42B6-8218-BBB69E77EE97.html",
							"GUID-31497D4C-2D61-42B6-8218-BBB69E77EE97.html",
							"GUID-31497D4C-2D61-42B6-8218-BBB69E77EE97.html",
							"GUID-31497D4C-2D61-42B6-8218-BBB69E77EE97.html",
							"GUID-31497D4C-2D61-42B6-8218-BBB69E77EE97.html",
							"GUID-31497D4C-2D61-42B6-8218-BBB69E77EE97.html",
							"GUID-31497D4C-2D61-42B6-8218-BBB69E77EE97.html",
							"GUID-31497D4C-2D61-42B6-8218-BBB69E77EE97.html",
							"GUID-31497D4C-2D61-42B6-8218-BBB69E77EE97.html",
							"GUID-CA4F7F1B-CAE2-4AB7-AE45-CB45ADCD997A.html",
							"GUID-CA4F7F1B-CAE2-4AB7-AE45-CB45ADCD997A.html",
							"GUID-CA4F7F1B-CAE2-4AB7-AE45-CB45ADCD997A.html",
							"GUID-CA4F7F1B-CAE2-4AB7-AE45-CB45ADCD997A.html",
							"GUID-CA4F7F1B-CAE2-4AB7-AE45-CB45ADCD997A.html",
							"GUID-CA4F7F1B-CAE2-4AB7-AE45-CB45ADCD997A.html",
							"GUID-CA4F7F1B-CAE2-4AB7-AE45-CB45ADCD997A.html",
							"GUID-CA4F7F1B-CAE2-4AB7-AE45-CB45ADCD997A.html",
							"GUID-579FADC9-118B-4DB9-8A61-89F87AAAB36F.html",
							"GUID-214624A4-2C2B-4A50-BE42-92CEBF57DAC5.html",
							"GUID-214624A4-2C2B-4A50-BE42-92CEBF57DAC5.html",
							"GUID-214624A4-2C2B-4A50-BE42-92CEBF57DAC5.html",
							"GUID-214624A4-2C2B-4A50-BE42-92CEBF57DAC5.html",
							"GUID-214624A4-2C2B-4A50-BE42-92CEBF57DAC5.html",
							"GUID-214624A4-2C2B-4A50-BE42-92CEBF57DAC5.html",
							"GUID-214624A4-2C2B-4A50-BE42-92CEBF57DAC5.html",
							"GUID-214624A4-2C2B-4A50-BE42-92CEBF57DAC5.html",
							"GUID-34039A6A-F27D-4BF6-BD76-9F47983D235A.html",
							"GUID-34039A6A-F27D-4BF6-BD76-9F47983D235A.html",
							"GUID-34039A6A-F27D-4BF6-BD76-9F47983D235A.html",
							"GUID-34039A6A-F27D-4BF6-BD76-9F47983D235A.html",
							"GUID-34039A6A-F27D-4BF6-BD76-9F47983D235A.html",
							"GUID-34039A6A-F27D-4BF6-BD76-9F47983D235A.html",
							"GUID-34039A6A-F27D-4BF6-BD76-9F47983D235A.html",
							"GUID-34039A6A-F27D-4BF6-BD76-9F47983D235A.html",
							"GUID-81C3F83D-6E88-45F1-B6E2-C741D612AA1C.html",
							"GUID-81C3F83D-6E88-45F1-B6E2-C741D612AA1C.html",
							"GUID-81C3F83D-6E88-45F1-B6E2-C741D612AA1C.html",
							"GUID-81C3F83D-6E88-45F1-B6E2-C741D612AA1C.html",
							"GUID-81C3F83D-6E88-45F1-B6E2-C741D612AA1C.html",
							"GUID-81C3F83D-6E88-45F1-B6E2-C741D612AA1C.html",
							"GUID-81C3F83D-6E88-45F1-B6E2-C741D612AA1C.html",
							"GUID-81C3F83D-6E88-45F1-B6E2-C741D612AA1C.html",
							"GUID-E4146D37-A9A1-40C9-B0AD-6A8E31C00666.html",
							"GUID-E4146D37-A9A1-40C9-B0AD-6A8E31C00666.html",
							"GUID-E4146D37-A9A1-40C9-B0AD-6A8E31C00666.html",
							"GUID-E4146D37-A9A1-40C9-B0AD-6A8E31C00666.html",
							"GUID-E4146D37-A9A1-40C9-B0AD-6A8E31C00666.html",
							"GUID-162AD5A9-148E-430D-AA31-347A7A68CD96.html",
							"GUID-162AD5A9-148E-430D-AA31-347A7A68CD96.html",
							"GUID-162AD5A9-148E-430D-AA31-347A7A68CD96.html",
							"GUID-162AD5A9-148E-430D-AA31-347A7A68CD96.html",
							"GUID-162AD5A9-148E-430D-AA31-347A7A68CD96.html",
							"GUID-1A48B726-35D9-4E22-B034-1B6B6817DD6D.html",
							"GUID-1A48B726-35D9-4E22-B034-1B6B6817DD6D.html",
							"GUID-1A48B726-35D9-4E22-B034-1B6B6817DD6D.html",
							"GUID-1A48B726-35D9-4E22-B034-1B6B6817DD6D.html",
							"GUID-1A48B726-35D9-4E22-B034-1B6B6817DD6D.html",
							"GUID-1A48B726-35D9-4E22-B034-1B6B6817DD6D.html",
							"GUID-1A48B726-35D9-4E22-B034-1B6B6817DD6D.html",
							"GUID-1A48B726-35D9-4E22-B034-1B6B6817DD6D.html",
							"GUID-146944D1-7D0A-4266-854C-D839862B736B.html",
							"GUID-146944D1-7D0A-4266-854C-D839862B736B.html",
							"GUID-146944D1-7D0A-4266-854C-D839862B736B.html",
							"GUID-146944D1-7D0A-4266-854C-D839862B736B.html",
							"GUID-146944D1-7D0A-4266-854C-D839862B736B.html",
							"GUID-146944D1-7D0A-4266-854C-D839862B736B.html",
							"GUID-146944D1-7D0A-4266-854C-D839862B736B.html",
							"GUID-146944D1-7D0A-4266-854C-D839862B736B.html",
							"GUID-6BC88511-923D-4CFA-B5E5-6049DAC630CF.html",
							"GUID-6BC88511-923D-4CFA-B5E5-6049DAC630CF.html",
							"GUID-6BC88511-923D-4CFA-B5E5-6049DAC630CF.html",
							"GUID-6BC88511-923D-4CFA-B5E5-6049DAC630CF.html",
							"GUID-6BC88511-923D-4CFA-B5E5-6049DAC630CF.html",
							"GUID-6BC88511-923D-4CFA-B5E5-6049DAC630CF.html",
							"GUID-6BC88511-923D-4CFA-B5E5-6049DAC630CF.html",
							"GUID-6BC88511-923D-4CFA-B5E5-6049DAC630CF.html",
							"GUID-FECD3CB6-70F0-44C7-AC06-C2FFFB669D65.html",
							"GUID-895E65D1-1C90-408D-B617-2D86C45A3D2A.html",
							"GUID-895E65D1-1C90-408D-B617-2D86C45A3D2A.html",
							"GUID-895E65D1-1C90-408D-B617-2D86C45A3D2A.html",
							"GUID-895E65D1-1C90-408D-B617-2D86C45A3D2A.html",
							"GUID-895E65D1-1C90-408D-B617-2D86C45A3D2A.html",
							"GUID-895E65D1-1C90-408D-B617-2D86C45A3D2A.html",
							"GUID-895E65D1-1C90-408D-B617-2D86C45A3D2A.html",
							"GUID-929FF129-78D9-4158-83C6-9955EA09D304.html",
							"GUID-929FF129-78D9-4158-83C6-9955EA09D304.html",
							"GUID-929FF129-78D9-4158-83C6-9955EA09D304.html",
							"GUID-929FF129-78D9-4158-83C6-9955EA09D304.html",
							"GUID-929FF129-78D9-4158-83C6-9955EA09D304.html",
							"GUID-929FF129-78D9-4158-83C6-9955EA09D304.html",
							"GUID-929FF129-78D9-4158-83C6-9955EA09D304.html",
							"GUID-929FF129-78D9-4158-83C6-9955EA09D304.html",
							"GUID-10E4E4C5-848E-45F6-ABDB-2819383B122D.html",
							"GUID-10E4E4C5-848E-45F6-ABDB-2819383B122D.html",
							"GUID-10E4E4C5-848E-45F6-ABDB-2819383B122D.html",
							"GUID-10E4E4C5-848E-45F6-ABDB-2819383B122D.html",
							"GUID-10E4E4C5-848E-45F6-ABDB-2819383B122D.html",
							"GUID-10E4E4C5-848E-45F6-ABDB-2819383B122D.html",
							"GUID-10E4E4C5-848E-45F6-ABDB-2819383B122D.html",
							"GUID-10E4E4C5-848E-45F6-ABDB-2819383B122D.html",
							"GUID-A4E8E317-B698-4D3F-8D00-90FC31D9D540.html",
							"GUID-A4E8E317-B698-4D3F-8D00-90FC31D9D540.html",
							"GUID-A4E8E317-B698-4D3F-8D00-90FC31D9D540.html",
							"GUID-A4E8E317-B698-4D3F-8D00-90FC31D9D540.html",
							"GUID-A4E8E317-B698-4D3F-8D00-90FC31D9D540.html",
							"GUID-A4E8E317-B698-4D3F-8D00-90FC31D9D540.html",
							"GUID-A4E8E317-B698-4D3F-8D00-90FC31D9D540.html",
							"GUID-A4E8E317-B698-4D3F-8D00-90FC31D9D540.html",
							"GUID-888B1D77-10DC-4BCA-BEA0-88EAA6A78507.html",
							"GUID-F2CEE7DB-50AA-4BC1-8D8D-8EA6D79A42E2.html",
							"GUID-F2CEE7DB-50AA-4BC1-8D8D-8EA6D79A42E2.html",
							"GUID-F2CEE7DB-50AA-4BC1-8D8D-8EA6D79A42E2.html",
							"GUID-F2CEE7DB-50AA-4BC1-8D8D-8EA6D79A42E2.html",
							"GUID-F2CEE7DB-50AA-4BC1-8D8D-8EA6D79A42E2.html",
							"GUID-F2CEE7DB-50AA-4BC1-8D8D-8EA6D79A42E2.html",
							"GUID-F2CEE7DB-50AA-4BC1-8D8D-8EA6D79A42E2.html",
							"GUID-8732F5D7-740A-4281-B519-0C7FBB34D3B8.html",
							"GUID-8732F5D7-740A-4281-B519-0C7FBB34D3B8.html",
							"GUID-8732F5D7-740A-4281-B519-0C7FBB34D3B8.html",
							"GUID-8732F5D7-740A-4281-B519-0C7FBB34D3B8.html",
							"GUID-8732F5D7-740A-4281-B519-0C7FBB34D3B8.html",
							"GUID-8732F5D7-740A-4281-B519-0C7FBB34D3B8.html",
							"GUID-8732F5D7-740A-4281-B519-0C7FBB34D3B8.html",
							"GUID-63DB669E-47A5-4F30-A608-EEC3B1E9F690.html",
							"GUID-63DB669E-47A5-4F30-A608-EEC3B1E9F690.html",
							"GUID-63DB669E-47A5-4F30-A608-EEC3B1E9F690.html",
							"GUID-63DB669E-47A5-4F30-A608-EEC3B1E9F690.html",
							"GUID-63DB669E-47A5-4F30-A608-EEC3B1E9F690.html",
							"GUID-63DB669E-47A5-4F30-A608-EEC3B1E9F690.html",
							"GUID-63DB669E-47A5-4F30-A608-EEC3B1E9F690.html",
							"GUID-63DB669E-47A5-4F30-A608-EEC3B1E9F690.html",
							"GUID-96DBC350-57DA-4EF6-8881-1F29C9F630B5.html",
							"GUID-96DBC350-57DA-4EF6-8881-1F29C9F630B5.html",
							"GUID-96DBC350-57DA-4EF6-8881-1F29C9F630B5.html",
							"GUID-96DBC350-57DA-4EF6-8881-1F29C9F630B5.html",
							"GUID-96DBC350-57DA-4EF6-8881-1F29C9F630B5.html",
							"GUID-96DBC350-57DA-4EF6-8881-1F29C9F630B5.html",
							"GUID-96DBC350-57DA-4EF6-8881-1F29C9F630B5.html",
							"GUID-96DBC350-57DA-4EF6-8881-1F29C9F630B5.html",
							"GUID-99863FC4-6091-4701-8325-4FBBD63272E1.html",
							"GUID-99863FC4-6091-4701-8325-4FBBD63272E1.html",
							"GUID-99863FC4-6091-4701-8325-4FBBD63272E1.html",
							"GUID-99863FC4-6091-4701-8325-4FBBD63272E1.html",
							"GUID-99863FC4-6091-4701-8325-4FBBD63272E1.html",
							"GUID-99863FC4-6091-4701-8325-4FBBD63272E1.html",
							"GUID-99863FC4-6091-4701-8325-4FBBD63272E1.html",
							"GUID-99863FC4-6091-4701-8325-4FBBD63272E1.html",
							"GUID-F7E5FF2D-5176-49B5-AC28-14FA4DD63E5D.html",
							"GUID-F7E5FF2D-5176-49B5-AC28-14FA4DD63E5D.html",
							"GUID-F7E5FF2D-5176-49B5-AC28-14FA4DD63E5D.html",
							"GUID-F7E5FF2D-5176-49B5-AC28-14FA4DD63E5D.html",
							"GUID-F7E5FF2D-5176-49B5-AC28-14FA4DD63E5D.html",
							"GUID-F7E5FF2D-5176-49B5-AC28-14FA4DD63E5D.html",
							"GUID-F7E5FF2D-5176-49B5-AC28-14FA4DD63E5D.html",
							"GUID-F7E5FF2D-5176-49B5-AC28-14FA4DD63E5D.html",
							"GUID-05AADD1D-076A-4AB2-8465-29237FE131A4.html",
							"GUID-05AADD1D-076A-4AB2-8465-29237FE131A4.html",
							"GUID-05AADD1D-076A-4AB2-8465-29237FE131A4.html",
							"GUID-05AADD1D-076A-4AB2-8465-29237FE131A4.html",
							"GUID-05AADD1D-076A-4AB2-8465-29237FE131A4.html",
							"GUID-05AADD1D-076A-4AB2-8465-29237FE131A4.html",
							"GUID-05AADD1D-076A-4AB2-8465-29237FE131A4.html",
							"GUID-05AADD1D-076A-4AB2-8465-29237FE131A4.html",
							"GUID-17871A56-C6F1-48C2-8AC7-D046367FC6FB.html",
							"GUID-17871A56-C6F1-48C2-8AC7-D046367FC6FB.html",
							"GUID-17871A56-C6F1-48C2-8AC7-D046367FC6FB.html",
							"GUID-17871A56-C6F1-48C2-8AC7-D046367FC6FB.html",
							"GUID-17871A56-C6F1-48C2-8AC7-D046367FC6FB.html",
							"GUID-17871A56-C6F1-48C2-8AC7-D046367FC6FB.html",
							"GUID-17871A56-C6F1-48C2-8AC7-D046367FC6FB.html",
							"GUID-17871A56-C6F1-48C2-8AC7-D046367FC6FB.html",
							"GUID-CF1824B4-C6B8-4EC6-B91B-9DACFA4D7266.html",
							"GUID-CF1824B4-C6B8-4EC6-B91B-9DACFA4D7266.html",
							"GUID-CF1824B4-C6B8-4EC6-B91B-9DACFA4D7266.html",
							"GUID-CF1824B4-C6B8-4EC6-B91B-9DACFA4D7266.html",
							"GUID-CF1824B4-C6B8-4EC6-B91B-9DACFA4D7266.html",
							"GUID-CF1824B4-C6B8-4EC6-B91B-9DACFA4D7266.html",
							"GUID-CF1824B4-C6B8-4EC6-B91B-9DACFA4D7266.html",
							"GUID-CF1824B4-C6B8-4EC6-B91B-9DACFA4D7266.html",
							"GUID-668664E2-A646-4F05-9143-BAE55D2F1A47.html",
							"GUID-668664E2-A646-4F05-9143-BAE55D2F1A47.html",
							"GUID-668664E2-A646-4F05-9143-BAE55D2F1A47.html",
							"GUID-668664E2-A646-4F05-9143-BAE55D2F1A47.html",
							"GUID-668664E2-A646-4F05-9143-BAE55D2F1A47.html",
							"GUID-668664E2-A646-4F05-9143-BAE55D2F1A47.html",
							"GUID-668664E2-A646-4F05-9143-BAE55D2F1A47.html",
							"GUID-668664E2-A646-4F05-9143-BAE55D2F1A47.html",
							"GUID-E7DAC95F-81BE-4A52-82E8-79727587D282.html",
							"GUID-E7DAC95F-81BE-4A52-82E8-79727587D282.html",
							"GUID-E7DAC95F-81BE-4A52-82E8-79727587D282.html",
							"GUID-E7DAC95F-81BE-4A52-82E8-79727587D282.html",
							"GUID-E7DAC95F-81BE-4A52-82E8-79727587D282.html",
							"GUID-E7DAC95F-81BE-4A52-82E8-79727587D282.html",
							"GUID-E7DAC95F-81BE-4A52-82E8-79727587D282.html",
							"GUID-E7DAC95F-81BE-4A52-82E8-79727587D282.html",
							"GUID-339C64DA-F57A-42E4-8018-96013D179999.html",
							"GUID-A4CE3571-0C52-4623-B10E-359D31196E20.html",
							"GUID-A4CE3571-0C52-4623-B10E-359D31196E20.html",
							"GUID-A4CE3571-0C52-4623-B10E-359D31196E20.html",
							"GUID-A4CE3571-0C52-4623-B10E-359D31196E20.html",
							"GUID-A4CE3571-0C52-4623-B10E-359D31196E20.html",
							"GUID-A4CE3571-0C52-4623-B10E-359D31196E20.html",
							"GUID-A4CE3571-0C52-4623-B10E-359D31196E20.html",
							"GUID-A4CE3571-0C52-4623-B10E-359D31196E20.html",
							"GUID-A9327FAB-1701-421D-9A6F-62663C4D90AF.html",
							"GUID-A9327FAB-1701-421D-9A6F-62663C4D90AF.html",
							"GUID-A9327FAB-1701-421D-9A6F-62663C4D90AF.html",
							"GUID-A9327FAB-1701-421D-9A6F-62663C4D90AF.html",
							"GUID-A9327FAB-1701-421D-9A6F-62663C4D90AF.html",
							"GUID-A9327FAB-1701-421D-9A6F-62663C4D90AF.html",
							"GUID-A9327FAB-1701-421D-9A6F-62663C4D90AF.html",
							"GUID-A9327FAB-1701-421D-9A6F-62663C4D90AF.html",
							"GUID-B01C8839-A321-4547-B3D6-858923953A23.html",
							"GUID-B01C8839-A321-4547-B3D6-858923953A23.html",
							"GUID-B01C8839-A321-4547-B3D6-858923953A23.html",
							"GUID-B01C8839-A321-4547-B3D6-858923953A23.html",
							"GUID-B01C8839-A321-4547-B3D6-858923953A23.html",
							"GUID-B01C8839-A321-4547-B3D6-858923953A23.html",
							"GUID-B01C8839-A321-4547-B3D6-858923953A23.html",
							"GUID-B01C8839-A321-4547-B3D6-858923953A23.html",
							"GUID-222005DE-D1BE-4FB6-8648-B96294057BA8.html",
							"GUID-222005DE-D1BE-4FB6-8648-B96294057BA8.html",
							"GUID-222005DE-D1BE-4FB6-8648-B96294057BA8.html",
							"GUID-222005DE-D1BE-4FB6-8648-B96294057BA8.html",
							"GUID-222005DE-D1BE-4FB6-8648-B96294057BA8.html",
							"GUID-222005DE-D1BE-4FB6-8648-B96294057BA8.html",
							"GUID-222005DE-D1BE-4FB6-8648-B96294057BA8.html",
							"GUID-222005DE-D1BE-4FB6-8648-B96294057BA8.html",
							"GUID-F649E22F-F2D5-4BE9-9A50-0889D0B40464.html",
							"GUID-F649E22F-F2D5-4BE9-9A50-0889D0B40464.html",
							"GUID-F649E22F-F2D5-4BE9-9A50-0889D0B40464.html",
							"GUID-F649E22F-F2D5-4BE9-9A50-0889D0B40464.html",
							"GUID-F649E22F-F2D5-4BE9-9A50-0889D0B40464.html",
							"GUID-F649E22F-F2D5-4BE9-9A50-0889D0B40464.html",
							"GUID-F649E22F-F2D5-4BE9-9A50-0889D0B40464.html",
							"GUID-F649E22F-F2D5-4BE9-9A50-0889D0B40464.html",
							"GUID-2486F605-C69E-4182-B038-F6EE43956CD2.html",
							"GUID-2486F605-C69E-4182-B038-F6EE43956CD2.html",
							"GUID-2486F605-C69E-4182-B038-F6EE43956CD2.html",
							"GUID-2486F605-C69E-4182-B038-F6EE43956CD2.html",
							"GUID-2486F605-C69E-4182-B038-F6EE43956CD2.html",
							"GUID-21224849-4465-4BA5-80C4-ED03DF1E9AC7.html",
							"GUID-21224849-4465-4BA5-80C4-ED03DF1E9AC7.html",
							"GUID-21224849-4465-4BA5-80C4-ED03DF1E9AC7.html",
							"GUID-21224849-4465-4BA5-80C4-ED03DF1E9AC7.html",
							"GUID-21224849-4465-4BA5-80C4-ED03DF1E9AC7.html",
							"GUID-21224849-4465-4BA5-80C4-ED03DF1E9AC7.html",
							"GUID-21224849-4465-4BA5-80C4-ED03DF1E9AC7.html",
							"GUID-21224849-4465-4BA5-80C4-ED03DF1E9AC7.html",
							"GUID-3E485907-2C41-4C9A-A5A9-BF00F332D046.html",
							"GUID-46257952-2442-458D-9867-DA5BC4393601.html",
							"GUID-46257952-2442-458D-9867-DA5BC4393601.html",
							"GUID-46257952-2442-458D-9867-DA5BC4393601.html",
							"GUID-46257952-2442-458D-9867-DA5BC4393601.html",
							"GUID-46257952-2442-458D-9867-DA5BC4393601.html",
							"GUID-5FEA436C-D1ED-49A2-A76F-230B2D381A4C.html",
							"GUID-5FEA436C-D1ED-49A2-A76F-230B2D381A4C.html",
							"GUID-5FEA436C-D1ED-49A2-A76F-230B2D381A4C.html",
							"GUID-5FEA436C-D1ED-49A2-A76F-230B2D381A4C.html",
							"GUID-5FEA436C-D1ED-49A2-A76F-230B2D381A4C.html",
							"GUID-5FEA436C-D1ED-49A2-A76F-230B2D381A4C.html",
							"GUID-5FEA436C-D1ED-49A2-A76F-230B2D381A4C.html",
							"GUID-5FEA436C-D1ED-49A2-A76F-230B2D381A4C.html",
							"GUID-95CBABB3-B66F-40EA-BA9F-530831BA707B.html",
							"GUID-95CBABB3-B66F-40EA-BA9F-530831BA707B.html",
							"GUID-95CBABB3-B66F-40EA-BA9F-530831BA707B.html",
							"GUID-95CBABB3-B66F-40EA-BA9F-530831BA707B.html",
							"GUID-95CBABB3-B66F-40EA-BA9F-530831BA707B.html",
							"GUID-95CBABB3-B66F-40EA-BA9F-530831BA707B.html",
							"GUID-95CBABB3-B66F-40EA-BA9F-530831BA707B.html",
							"GUID-95CBABB3-B66F-40EA-BA9F-530831BA707B.html",
							"GUID-7FA7287D-419D-46FD-8260-C519F4244966.html",
							"GUID-7FA7287D-419D-46FD-8260-C519F4244966.html",
							"GUID-7FA7287D-419D-46FD-8260-C519F4244966.html",
							"GUID-7FA7287D-419D-46FD-8260-C519F4244966.html",
							"GUID-7FA7287D-419D-46FD-8260-C519F4244966.html",
							"GUID-7FA7287D-419D-46FD-8260-C519F4244966.html",
							"GUID-7FA7287D-419D-46FD-8260-C519F4244966.html",
							"GUID-7FA7287D-419D-46FD-8260-C519F4244966.html",
							"GUID-11E4FD9C-17E6-4F65-AE7A-6550EB45E118.html",
							"GUID-4B7527DC-12C4-4A41-8004-41415FF65DAB.html",
							"GUID-271CC4C5-196A-4BF0-BAF9-9A95284A87D7.html",
							"GUID-271CC4C5-196A-4BF0-BAF9-9A95284A87D7.html",
							"GUID-271CC4C5-196A-4BF0-BAF9-9A95284A87D7.html",
							"GUID-271CC4C5-196A-4BF0-BAF9-9A95284A87D7.html",
							"GUID-60C12586-1616-42CB-85FB-DFC96C5D08A7.html",
							"GUID-60C12586-1616-42CB-85FB-DFC96C5D08A7.html",
							"GUID-60C12586-1616-42CB-85FB-DFC96C5D08A7.html",
							"GUID-60C12586-1616-42CB-85FB-DFC96C5D08A7.html",
							"GUID-60C12586-1616-42CB-85FB-DFC96C5D08A7.html",
							"GUID-EC53AE64-05BF-48B0-99DB-A40DABE5E4C7.html",
							"GUID-EC53AE64-05BF-48B0-99DB-A40DABE5E4C7.html",
							"GUID-EC53AE64-05BF-48B0-99DB-A40DABE5E4C7.html",
							"GUID-EC53AE64-05BF-48B0-99DB-A40DABE5E4C7.html",
							"GUID-EC53AE64-05BF-48B0-99DB-A40DABE5E4C7.html",
							"GUID-EC53AE64-05BF-48B0-99DB-A40DABE5E4C7.html",
							"GUID-EC53AE64-05BF-48B0-99DB-A40DABE5E4C7.html",
							"GUID-EC53AE64-05BF-48B0-99DB-A40DABE5E4C7.html",
							"GUID-92A5C628-45F6-4F40-BF99-846176902BAC.html",
							"GUID-92A5C628-45F6-4F40-BF99-846176902BAC.html",
							"GUID-92A5C628-45F6-4F40-BF99-846176902BAC.html",
							"GUID-92A5C628-45F6-4F40-BF99-846176902BAC.html",
							"GUID-92A5C628-45F6-4F40-BF99-846176902BAC.html",
							"GUID-92A5C628-45F6-4F40-BF99-846176902BAC.html",
							"GUID-92A5C628-45F6-4F40-BF99-846176902BAC.html",
							"GUID-92A5C628-45F6-4F40-BF99-846176902BAC.html",
							"GUID-DDF7C35B-3ADE-47F3-813D-4628CCDF4218.html",
							"GUID-DDF7C35B-3ADE-47F3-813D-4628CCDF4218.html",
							"GUID-DDF7C35B-3ADE-47F3-813D-4628CCDF4218.html",
							"GUID-DDF7C35B-3ADE-47F3-813D-4628CCDF4218.html",
							"GUID-DDF7C35B-3ADE-47F3-813D-4628CCDF4218.html",
							"GUID-DDF7C35B-3ADE-47F3-813D-4628CCDF4218.html",
							"GUID-DDF7C35B-3ADE-47F3-813D-4628CCDF4218.html",
							"GUID-DDF7C35B-3ADE-47F3-813D-4628CCDF4218.html",
							"GUID-6AD186BA-5042-45A8-B0BC-1C26DA1904BA.html",
							"GUID-6AD186BA-5042-45A8-B0BC-1C26DA1904BA.html",
							"GUID-6AD186BA-5042-45A8-B0BC-1C26DA1904BA.html",
							"GUID-6AD186BA-5042-45A8-B0BC-1C26DA1904BA.html",
							"GUID-6AD186BA-5042-45A8-B0BC-1C26DA1904BA.html",
							"GUID-6AD186BA-5042-45A8-B0BC-1C26DA1904BA.html",
							"GUID-6AD186BA-5042-45A8-B0BC-1C26DA1904BA.html",
							"GUID-6AD186BA-5042-45A8-B0BC-1C26DA1904BA.html",
							"GUID-6AD186BA-5042-45A8-B0BC-1C26DA1904BA.html",
							"GUID-05DB8121-0E91-4E8A-AE77-8A0405604950.html",
							"GUID-8CC2A673-AF23-4055-8F1E-C43A3195F69A.html",
							"GUID-8CC2A673-AF23-4055-8F1E-C43A3195F69A.html",
							"GUID-8CC2A673-AF23-4055-8F1E-C43A3195F69A.html",
							"GUID-8CC2A673-AF23-4055-8F1E-C43A3195F69A.html",
							"GUID-8CC2A673-AF23-4055-8F1E-C43A3195F69A.html",
							"GUID-2C5CEB80-077C-4EB2-A2D5-9EF849C1F2F2.html",
							"GUID-2C5CEB80-077C-4EB2-A2D5-9EF849C1F2F2.html",
							"GUID-2C5CEB80-077C-4EB2-A2D5-9EF849C1F2F2.html",
							"GUID-2C5CEB80-077C-4EB2-A2D5-9EF849C1F2F2.html",
							"GUID-2C5CEB80-077C-4EB2-A2D5-9EF849C1F2F2.html",
							"GUID-2C5CEB80-077C-4EB2-A2D5-9EF849C1F2F2.html",
							"GUID-2C5CEB80-077C-4EB2-A2D5-9EF849C1F2F2.html",
							"GUID-2C5CEB80-077C-4EB2-A2D5-9EF849C1F2F2.html",
							"GUID-094BA77A-E430-4C1F-B051-58848BE93F9D.html",
							"GUID-094BA77A-E430-4C1F-B051-58848BE93F9D.html",
							"GUID-094BA77A-E430-4C1F-B051-58848BE93F9D.html",
							"GUID-094BA77A-E430-4C1F-B051-58848BE93F9D.html",
							"GUID-094BA77A-E430-4C1F-B051-58848BE93F9D.html",
							"GUID-094BA77A-E430-4C1F-B051-58848BE93F9D.html",
							"GUID-094BA77A-E430-4C1F-B051-58848BE93F9D.html",
							"GUID-094BA77A-E430-4C1F-B051-58848BE93F9D.html",
							"GUID-0AEDA27D-A7D4-4DAA-8A8F-4CB3146CFB62.html",
							"GUID-0AEDA27D-A7D4-4DAA-8A8F-4CB3146CFB62.html",
							"GUID-0AEDA27D-A7D4-4DAA-8A8F-4CB3146CFB62.html",
							"GUID-0AEDA27D-A7D4-4DAA-8A8F-4CB3146CFB62.html",
							"GUID-0AEDA27D-A7D4-4DAA-8A8F-4CB3146CFB62.html",
							"GUID-0AEDA27D-A7D4-4DAA-8A8F-4CB3146CFB62.html",
							"GUID-0AEDA27D-A7D4-4DAA-8A8F-4CB3146CFB62.html",
							"GUID-0AEDA27D-A7D4-4DAA-8A8F-4CB3146CFB62.html",
							"GUID-428BA90A-8569-4AF5-99EF-A915134BF434.html",
							"GUID-6C1D56BE-C531-4584-903E-B20EA545069E.html",
							"GUID-6C1D56BE-C531-4584-903E-B20EA545069E.html",
							"GUID-6C1D56BE-C531-4584-903E-B20EA545069E.html",
							"GUID-6C1D56BE-C531-4584-903E-B20EA545069E.html",
							"GUID-6C1D56BE-C531-4584-903E-B20EA545069E.html",
							"GUID-6C1D56BE-C531-4584-903E-B20EA545069E.html",
							"GUID-6C1D56BE-C531-4584-903E-B20EA545069E.html",
							"GUID-5160F49B-444F-4D1A-A398-5207DEF78843.html",
							"GUID-5160F49B-444F-4D1A-A398-5207DEF78843.html",
							"GUID-5160F49B-444F-4D1A-A398-5207DEF78843.html",
							"GUID-5160F49B-444F-4D1A-A398-5207DEF78843.html",
							"GUID-5160F49B-444F-4D1A-A398-5207DEF78843.html",
							"GUID-E012F7C2-64C2-40DA-89CF-C613B200BF19.html",
							"GUID-E012F7C2-64C2-40DA-89CF-C613B200BF19.html",
							"GUID-E012F7C2-64C2-40DA-89CF-C613B200BF19.html",
							"GUID-E012F7C2-64C2-40DA-89CF-C613B200BF19.html",
							"GUID-E012F7C2-64C2-40DA-89CF-C613B200BF19.html",
							"GUID-81D18119-F240-47CC-8CDA-1B9FDD83B822.html",
							"GUID-81D18119-F240-47CC-8CDA-1B9FDD83B822.html",
							"GUID-81D18119-F240-47CC-8CDA-1B9FDD83B822.html",
							"GUID-81D18119-F240-47CC-8CDA-1B9FDD83B822.html",
							"GUID-81D18119-F240-47CC-8CDA-1B9FDD83B822.html",
							"GUID-81D18119-F240-47CC-8CDA-1B9FDD83B822.html",
							"GUID-81D18119-F240-47CC-8CDA-1B9FDD83B822.html",
							"GUID-81D18119-F240-47CC-8CDA-1B9FDD83B822.html",
							"GUID-031836CF-94FC-442B-B7E8-45F3E66649D1.html",
							"GUID-031836CF-94FC-442B-B7E8-45F3E66649D1.html",
							"GUID-031836CF-94FC-442B-B7E8-45F3E66649D1.html",
							"GUID-031836CF-94FC-442B-B7E8-45F3E66649D1.html",
							"GUID-031836CF-94FC-442B-B7E8-45F3E66649D1.html",
							"GUID-031836CF-94FC-442B-B7E8-45F3E66649D1.html",
							"GUID-031836CF-94FC-442B-B7E8-45F3E66649D1.html",
							"GUID-031836CF-94FC-442B-B7E8-45F3E66649D1.html",
							"GUID-AF380EDC-B004-4B11-8FF6-2563D3DAC1B6.html",
							"GUID-AF380EDC-B004-4B11-8FF6-2563D3DAC1B6.html",
							"GUID-AF380EDC-B004-4B11-8FF6-2563D3DAC1B6.html",
							"GUID-AF380EDC-B004-4B11-8FF6-2563D3DAC1B6.html",
							"GUID-AF380EDC-B004-4B11-8FF6-2563D3DAC1B6.html",
							"GUID-AF380EDC-B004-4B11-8FF6-2563D3DAC1B6.html",
							"GUID-AF380EDC-B004-4B11-8FF6-2563D3DAC1B6.html",
							"GUID-AF380EDC-B004-4B11-8FF6-2563D3DAC1B6.html",
							"GUID-EA06AD1D-6A2D-4772-9E90-E7A8F2EC23DA.html",
							"GUID-EA06AD1D-6A2D-4772-9E90-E7A8F2EC23DA.html",
							"GUID-EA06AD1D-6A2D-4772-9E90-E7A8F2EC23DA.html",
							"GUID-EA06AD1D-6A2D-4772-9E90-E7A8F2EC23DA.html",
							"GUID-EA06AD1D-6A2D-4772-9E90-E7A8F2EC23DA.html",
							"GUID-EA06AD1D-6A2D-4772-9E90-E7A8F2EC23DA.html",
							"GUID-EA06AD1D-6A2D-4772-9E90-E7A8F2EC23DA.html",
							"GUID-EA06AD1D-6A2D-4772-9E90-E7A8F2EC23DA.html",
							"GUID-14E56CEC-4DA0-4224-B7C3-DD36BD3E79E2.html",
							"GUID-14E56CEC-4DA0-4224-B7C3-DD36BD3E79E2.html",
							"GUID-14E56CEC-4DA0-4224-B7C3-DD36BD3E79E2.html",
							"GUID-14E56CEC-4DA0-4224-B7C3-DD36BD3E79E2.html",
							"GUID-14E56CEC-4DA0-4224-B7C3-DD36BD3E79E2.html",
							"GUID-14E56CEC-4DA0-4224-B7C3-DD36BD3E79E2.html",
							"GUID-14E56CEC-4DA0-4224-B7C3-DD36BD3E79E2.html",
							"GUID-14E56CEC-4DA0-4224-B7C3-DD36BD3E79E2.html",
							"GUID-EFE4EBAB-3F25-4EE9-BD27-D3BD6F14C3D8.html",
							"GUID-EFE4EBAB-3F25-4EE9-BD27-D3BD6F14C3D8.html",
							"GUID-EFE4EBAB-3F25-4EE9-BD27-D3BD6F14C3D8.html",
							"GUID-EFE4EBAB-3F25-4EE9-BD27-D3BD6F14C3D8.html",
							"GUID-EFE4EBAB-3F25-4EE9-BD27-D3BD6F14C3D8.html",
							"GUID-EFE4EBAB-3F25-4EE9-BD27-D3BD6F14C3D8.html",
							"GUID-EFE4EBAB-3F25-4EE9-BD27-D3BD6F14C3D8.html",
							"GUID-EFE4EBAB-3F25-4EE9-BD27-D3BD6F14C3D8.html",
							"GUID-CE31A004-61F9-480A-A2ED-86AE40681AAD.html",
							"GUID-CE31A004-61F9-480A-A2ED-86AE40681AAD.html",
							"GUID-CE31A004-61F9-480A-A2ED-86AE40681AAD.html",
							"GUID-CE31A004-61F9-480A-A2ED-86AE40681AAD.html",
							"GUID-CE31A004-61F9-480A-A2ED-86AE40681AAD.html",
							"GUID-CE31A004-61F9-480A-A2ED-86AE40681AAD.html",
							"GUID-CE31A004-61F9-480A-A2ED-86AE40681AAD.html",
							"GUID-CE31A004-61F9-480A-A2ED-86AE40681AAD.html",
							"GUID-5E0FFB91-528B-46EF-A4CF-A205923C64E4.html",
							"GUID-5E0FFB91-528B-46EF-A4CF-A205923C64E4.html",
							"GUID-5E0FFB91-528B-46EF-A4CF-A205923C64E4.html",
							"GUID-5E0FFB91-528B-46EF-A4CF-A205923C64E4.html",
							"GUID-5E0FFB91-528B-46EF-A4CF-A205923C64E4.html",
							"GUID-5E0FFB91-528B-46EF-A4CF-A205923C64E4.html",
							"GUID-5E0FFB91-528B-46EF-A4CF-A205923C64E4.html",
							"GUID-5E0FFB91-528B-46EF-A4CF-A205923C64E4.html",
							"GUID-562FFC3B-E23F-423C-B72D-C2DE095DDB01.html",
							"GUID-562FFC3B-E23F-423C-B72D-C2DE095DDB01.html",
							"GUID-562FFC3B-E23F-423C-B72D-C2DE095DDB01.html",
							"GUID-562FFC3B-E23F-423C-B72D-C2DE095DDB01.html",
							"GUID-562FFC3B-E23F-423C-B72D-C2DE095DDB01.html",
							"GUID-562FFC3B-E23F-423C-B72D-C2DE095DDB01.html",
							"GUID-562FFC3B-E23F-423C-B72D-C2DE095DDB01.html",
							"GUID-562FFC3B-E23F-423C-B72D-C2DE095DDB01.html",
							"GUID-B6921361-2F3A-4384-8081-FCE9BC1D3895.html",
							"GUID-B6921361-2F3A-4384-8081-FCE9BC1D3895.html",
							"GUID-B6921361-2F3A-4384-8081-FCE9BC1D3895.html",
							"GUID-B6921361-2F3A-4384-8081-FCE9BC1D3895.html",
							"GUID-B6921361-2F3A-4384-8081-FCE9BC1D3895.html",
							"GUID-B6921361-2F3A-4384-8081-FCE9BC1D3895.html",
							"GUID-B6921361-2F3A-4384-8081-FCE9BC1D3895.html",
							"GUID-B6921361-2F3A-4384-8081-FCE9BC1D3895.html",
							"GUID-A7016003-8684-4D26-B759-0441465932F4.html",
							"GUID-A51864DC-AD1F-43AC-A5CC-3310BB2362EB.html",
							"GUID-A51864DC-AD1F-43AC-A5CC-3310BB2362EB.html",
							"GUID-A51864DC-AD1F-43AC-A5CC-3310BB2362EB.html",
							"GUID-A51864DC-AD1F-43AC-A5CC-3310BB2362EB.html",
							"GUID-A51864DC-AD1F-43AC-A5CC-3310BB2362EB.html",
							"GUID-9AE7E6C6-BBAA-44B2-9D3A-38A80624E8A5.html",
							"GUID-9AE7E6C6-BBAA-44B2-9D3A-38A80624E8A5.html",
							"GUID-9AE7E6C6-BBAA-44B2-9D3A-38A80624E8A5.html",
							"GUID-9AE7E6C6-BBAA-44B2-9D3A-38A80624E8A5.html",
							"GUID-9AE7E6C6-BBAA-44B2-9D3A-38A80624E8A5.html",
							"GUID-9A4FCDF0-2CE1-4CA9-BC92-2D79BBDA4E42.html",
							"GUID-9A4FCDF0-2CE1-4CA9-BC92-2D79BBDA4E42.html",
							"GUID-9A4FCDF0-2CE1-4CA9-BC92-2D79BBDA4E42.html",
							"GUID-9A4FCDF0-2CE1-4CA9-BC92-2D79BBDA4E42.html",
							"GUID-9A4FCDF0-2CE1-4CA9-BC92-2D79BBDA4E42.html",
							"GUID-E339E93F-7BCF-4C2F-80D5-783001332B05.html",
							"GUID-E339E93F-7BCF-4C2F-80D5-783001332B05.html",
							"GUID-E339E93F-7BCF-4C2F-80D5-783001332B05.html",
							"GUID-E339E93F-7BCF-4C2F-80D5-783001332B05.html",
							"GUID-E339E93F-7BCF-4C2F-80D5-783001332B05.html",
							"GUID-E339E93F-7BCF-4C2F-80D5-783001332B05.html",
							"GUID-E339E93F-7BCF-4C2F-80D5-783001332B05.html",
							"GUID-E339E93F-7BCF-4C2F-80D5-783001332B05.html",
							"GUID-E339E93F-7BCF-4C2F-80D5-783001332B05.html",
							"GUID-E339E93F-7BCF-4C2F-80D5-783001332B05.html",
							"GUID-E339E93F-7BCF-4C2F-80D5-783001332B05.html",
							"GUID-E339E93F-7BCF-4C2F-80D5-783001332B05.html",
							"GUID-133ADB94-CBF7-48A3-A644-A3C5D73F6D06.html",
							"GUID-133ADB94-CBF7-48A3-A644-A3C5D73F6D06.html",
							"GUID-133ADB94-CBF7-48A3-A644-A3C5D73F6D06.html",
							"GUID-133ADB94-CBF7-48A3-A644-A3C5D73F6D06.html",
							"GUID-133ADB94-CBF7-48A3-A644-A3C5D73F6D06.html",
							"GUID-133ADB94-CBF7-48A3-A644-A3C5D73F6D06.html",
							"GUID-133ADB94-CBF7-48A3-A644-A3C5D73F6D06.html",
							"GUID-133ADB94-CBF7-48A3-A644-A3C5D73F6D06.html",
							"GUID-8BF10274-CD22-4774-8C40-CCFED5766714.html",
							"GUID-8BF10274-CD22-4774-8C40-CCFED5766714.html",
							"GUID-8BF10274-CD22-4774-8C40-CCFED5766714.html",
							"GUID-8BF10274-CD22-4774-8C40-CCFED5766714.html",
							"GUID-8BF10274-CD22-4774-8C40-CCFED5766714.html",
							"GUID-8BF10274-CD22-4774-8C40-CCFED5766714.html",
							"GUID-8BF10274-CD22-4774-8C40-CCFED5766714.html",
							"GUID-8BF10274-CD22-4774-8C40-CCFED5766714.html",
							"GUID-3AD98956-9F94-46AE-9499-1EDAD7E191D9.html",
							"GUID-3AD98956-9F94-46AE-9499-1EDAD7E191D9.html",
							"GUID-3AD98956-9F94-46AE-9499-1EDAD7E191D9.html",
							"GUID-3AD98956-9F94-46AE-9499-1EDAD7E191D9.html",
							"GUID-3AD98956-9F94-46AE-9499-1EDAD7E191D9.html",
							"GUID-3AD98956-9F94-46AE-9499-1EDAD7E191D9.html",
							"GUID-3AD98956-9F94-46AE-9499-1EDAD7E191D9.html",
							"GUID-3AD98956-9F94-46AE-9499-1EDAD7E191D9.html",
							"GUID-67EB0ECB-DB18-4725-9055-1567ADE75FD7.html",
							"GUID-67EB0ECB-DB18-4725-9055-1567ADE75FD7.html",
							"GUID-67EB0ECB-DB18-4725-9055-1567ADE75FD7.html",
							"GUID-67EB0ECB-DB18-4725-9055-1567ADE75FD7.html",
							"GUID-67EB0ECB-DB18-4725-9055-1567ADE75FD7.html",
							"GUID-67EB0ECB-DB18-4725-9055-1567ADE75FD7.html",
							"GUID-67EB0ECB-DB18-4725-9055-1567ADE75FD7.html",
							"GUID-67EB0ECB-DB18-4725-9055-1567ADE75FD7.html",
							"GUID-3A5DC2A3-B246-4811-BC2F-4829FB487294.html",
							"GUID-3A5DC2A3-B246-4811-BC2F-4829FB487294.html",
							"GUID-3A5DC2A3-B246-4811-BC2F-4829FB487294.html",
							"GUID-3A5DC2A3-B246-4811-BC2F-4829FB487294.html",
							"GUID-3A5DC2A3-B246-4811-BC2F-4829FB487294.html",
							"GUID-3A5DC2A3-B246-4811-BC2F-4829FB487294.html",
							"GUID-3A5DC2A3-B246-4811-BC2F-4829FB487294.html",
							"GUID-3A5DC2A3-B246-4811-BC2F-4829FB487294.html",
							"GUID-2A173EAE-1DB4-418C-A805-C68BE939178D.html",
							"GUID-2A173EAE-1DB4-418C-A805-C68BE939178D.html",
							"GUID-2A173EAE-1DB4-418C-A805-C68BE939178D.html",
							"GUID-2A173EAE-1DB4-418C-A805-C68BE939178D.html",
							"GUID-2A173EAE-1DB4-418C-A805-C68BE939178D.html",
							"GUID-2A173EAE-1DB4-418C-A805-C68BE939178D.html",
							"GUID-2A173EAE-1DB4-418C-A805-C68BE939178D.html",
							"GUID-2A173EAE-1DB4-418C-A805-C68BE939178D.html",
							"GUID-7754F32E-D105-41A5-A616-96D9F21EF2E6.html",
							"GUID-C8FD6AB1-6D19-4A8B-86E3-74F54370A97E.html",
							"GUID-C8FD6AB1-6D19-4A8B-86E3-74F54370A97E.html",
							"GUID-F860FD90-9B84-4376-813B-0A12901873D0.html",
							"GUID-F860FD90-9B84-4376-813B-0A12901873D0.html",
							"GUID-F860FD90-9B84-4376-813B-0A12901873D0.html",
							"GUID-F860FD90-9B84-4376-813B-0A12901873D0.html",
							"GUID-F860FD90-9B84-4376-813B-0A12901873D0.html",
							"GUID-09435DF1-6BFB-4272-8CF8-2DD702F32D09.html",
							"GUID-09435DF1-6BFB-4272-8CF8-2DD702F32D09.html",
							"GUID-09435DF1-6BFB-4272-8CF8-2DD702F32D09.html",
							"GUID-09435DF1-6BFB-4272-8CF8-2DD702F32D09.html",
							"GUID-09435DF1-6BFB-4272-8CF8-2DD702F32D09.html",
							"GUID-1CD690A6-5D93-4C13-9EB1-EC8B7F33CF4D.html",
							"GUID-1CD690A6-5D93-4C13-9EB1-EC8B7F33CF4D.html",
							"GUID-1CD690A6-5D93-4C13-9EB1-EC8B7F33CF4D.html",
							"GUID-1CD690A6-5D93-4C13-9EB1-EC8B7F33CF4D.html",
							"GUID-1CD690A6-5D93-4C13-9EB1-EC8B7F33CF4D.html",
							"GUID-1CD690A6-5D93-4C13-9EB1-EC8B7F33CF4D.html",
							"GUID-1CD690A6-5D93-4C13-9EB1-EC8B7F33CF4D.html",
							"GUID-1CD690A6-5D93-4C13-9EB1-EC8B7F33CF4D.html",
							"GUID-118D6516-8539-44C8-9655-2A37845C9849.html",
							"GUID-118D6516-8539-44C8-9655-2A37845C9849.html",
							"GUID-118D6516-8539-44C8-9655-2A37845C9849.html",
							"GUID-118D6516-8539-44C8-9655-2A37845C9849.html",
							"GUID-118D6516-8539-44C8-9655-2A37845C9849.html",
							"GUID-118D6516-8539-44C8-9655-2A37845C9849.html",
							"GUID-118D6516-8539-44C8-9655-2A37845C9849.html",
							"GUID-118D6516-8539-44C8-9655-2A37845C9849.html",
							"GUID-9DC08CEA-87E3-441C-9346-0317D8A1D46C.html",
							"GUID-9DC08CEA-87E3-441C-9346-0317D8A1D46C.html",
							"GUID-9DC08CEA-87E3-441C-9346-0317D8A1D46C.html",
							"GUID-9DC08CEA-87E3-441C-9346-0317D8A1D46C.html",
							"GUID-9DC08CEA-87E3-441C-9346-0317D8A1D46C.html",
							"GUID-9DC08CEA-87E3-441C-9346-0317D8A1D46C.html",
							"GUID-9DC08CEA-87E3-441C-9346-0317D8A1D46C.html",
							"GUID-9DC08CEA-87E3-441C-9346-0317D8A1D46C.html",
							"GUID-3FD559C0-0864-4DCE-A113-101288D32FE2.html",
							"GUID-3FD559C0-0864-4DCE-A113-101288D32FE2.html",
							"GUID-3FD559C0-0864-4DCE-A113-101288D32FE2.html",
							"GUID-3FD559C0-0864-4DCE-A113-101288D32FE2.html",
							"GUID-3FD559C0-0864-4DCE-A113-101288D32FE2.html",
							"GUID-3FD559C0-0864-4DCE-A113-101288D32FE2.html",
							"GUID-3FD559C0-0864-4DCE-A113-101288D32FE2.html",
							"GUID-3FD559C0-0864-4DCE-A113-101288D32FE2.html",
							"GUID-1B8A0623-FBC3-46A4-B1A5-4CB7C607899A.html",
							"GUID-1B8A0623-FBC3-46A4-B1A5-4CB7C607899A.html",
							"GUID-1B8A0623-FBC3-46A4-B1A5-4CB7C607899A.html",
							"GUID-1B8A0623-FBC3-46A4-B1A5-4CB7C607899A.html",
							"GUID-1B8A0623-FBC3-46A4-B1A5-4CB7C607899A.html",
							"GUID-1B8A0623-FBC3-46A4-B1A5-4CB7C607899A.html",
							"GUID-1B8A0623-FBC3-46A4-B1A5-4CB7C607899A.html",
							"GUID-1B8A0623-FBC3-46A4-B1A5-4CB7C607899A.html",
							"GUID-69A54D14-EBFF-43BA-9C32-414181077D2D.html",
							"GUID-69A54D14-EBFF-43BA-9C32-414181077D2D.html",
							"GUID-69A54D14-EBFF-43BA-9C32-414181077D2D.html",
							"GUID-69A54D14-EBFF-43BA-9C32-414181077D2D.html",
							"GUID-69A54D14-EBFF-43BA-9C32-414181077D2D.html",
							"GUID-69A54D14-EBFF-43BA-9C32-414181077D2D.html",
							"GUID-69A54D14-EBFF-43BA-9C32-414181077D2D.html",
							"GUID-69A54D14-EBFF-43BA-9C32-414181077D2D.html",
							"GUID-C9F34153-1A97-4111-825E-72E8D47B6F1A.html",
							"GUID-C9F34153-1A97-4111-825E-72E8D47B6F1A.html",
							"GUID-C9F34153-1A97-4111-825E-72E8D47B6F1A.html",
							"GUID-C9F34153-1A97-4111-825E-72E8D47B6F1A.html",
							"GUID-C9F34153-1A97-4111-825E-72E8D47B6F1A.html",
							"GUID-C9F34153-1A97-4111-825E-72E8D47B6F1A.html",
							"GUID-C9F34153-1A97-4111-825E-72E8D47B6F1A.html",
							"GUID-C9F34153-1A97-4111-825E-72E8D47B6F1A.html",
							"GUID-D58D1F96-DFB6-4A48-9D0B-BD09F88955CC.html",
							"GUID-D58D1F96-DFB6-4A48-9D0B-BD09F88955CC.html",
							"GUID-D58D1F96-DFB6-4A48-9D0B-BD09F88955CC.html",
							"GUID-D58D1F96-DFB6-4A48-9D0B-BD09F88955CC.html",
							"GUID-D58D1F96-DFB6-4A48-9D0B-BD09F88955CC.html",
							"GUID-D58D1F96-DFB6-4A48-9D0B-BD09F88955CC.html",
							"GUID-D58D1F96-DFB6-4A48-9D0B-BD09F88955CC.html",
							"GUID-D58D1F96-DFB6-4A48-9D0B-BD09F88955CC.html",
							"GUID-D8D5DAC8-3B55-4B87-9428-936D8B524F3D.html",
							"GUID-D8D5DAC8-3B55-4B87-9428-936D8B524F3D.html",
							"GUID-D8D5DAC8-3B55-4B87-9428-936D8B524F3D.html",
							"GUID-D8D5DAC8-3B55-4B87-9428-936D8B524F3D.html",
							"GUID-D8D5DAC8-3B55-4B87-9428-936D8B524F3D.html",
							"GUID-D8D5DAC8-3B55-4B87-9428-936D8B524F3D.html",
							"GUID-D8D5DAC8-3B55-4B87-9428-936D8B524F3D.html",
							"GUID-D8D5DAC8-3B55-4B87-9428-936D8B524F3D.html",
							"GUID-A41D060B-3559-4D60-8C99-34B6D015731E.html",
							"GUID-A0876431-0E46-449A-87BB-62D7B850C638.html",
							"GUID-A0876431-0E46-449A-87BB-62D7B850C638.html",
							"GUID-A0876431-0E46-449A-87BB-62D7B850C638.html",
							"GUID-A0876431-0E46-449A-87BB-62D7B850C638.html",
							"GUID-A0876431-0E46-449A-87BB-62D7B850C638.html",
							"GUID-B4FA4527-55B1-4380-920A-6CE92DFBA100.html",
							"GUID-B4FA4527-55B1-4380-920A-6CE92DFBA100.html",
							"GUID-B4FA4527-55B1-4380-920A-6CE92DFBA100.html",
							"GUID-B4FA4527-55B1-4380-920A-6CE92DFBA100.html",
							"GUID-B4FA4527-55B1-4380-920A-6CE92DFBA100.html",
							"GUID-B4FA4527-55B1-4380-920A-6CE92DFBA100.html",
							"GUID-B4FA4527-55B1-4380-920A-6CE92DFBA100.html",
							"GUID-003633FA-D0EE-4D3E-A716-5E98DAA38F02.html",
							"GUID-003633FA-D0EE-4D3E-A716-5E98DAA38F02.html",
							"GUID-003633FA-D0EE-4D3E-A716-5E98DAA38F02.html",
							"GUID-003633FA-D0EE-4D3E-A716-5E98DAA38F02.html",
							"GUID-003633FA-D0EE-4D3E-A716-5E98DAA38F02.html",
							"GUID-9B851175-EAC6-4C6D-9E59-3F30C6595DF0.html",
							"GUID-9B851175-EAC6-4C6D-9E59-3F30C6595DF0.html",
							"GUID-9B851175-EAC6-4C6D-9E59-3F30C6595DF0.html",
							"GUID-9B851175-EAC6-4C6D-9E59-3F30C6595DF0.html",
							"GUID-9B851175-EAC6-4C6D-9E59-3F30C6595DF0.html",
							"GUID-FC75E7D6-8778-4E1C-977F-CB39857FCBCB.html",
							"GUID-FC75E7D6-8778-4E1C-977F-CB39857FCBCB.html",
							"GUID-FC75E7D6-8778-4E1C-977F-CB39857FCBCB.html",
							"GUID-FC75E7D6-8778-4E1C-977F-CB39857FCBCB.html",
							"GUID-FC75E7D6-8778-4E1C-977F-CB39857FCBCB.html",
							"GUID-FC75E7D6-8778-4E1C-977F-CB39857FCBCB.html",
							"GUID-FC75E7D6-8778-4E1C-977F-CB39857FCBCB.html",
							"GUID-FC75E7D6-8778-4E1C-977F-CB39857FCBCB.html",
							"GUID-4D6BE8EC-13EC-4A94-ABDE-0605142C88B5.html",
							"GUID-4D6BE8EC-13EC-4A94-ABDE-0605142C88B5.html",
							"GUID-4D6BE8EC-13EC-4A94-ABDE-0605142C88B5.html",
							"GUID-4D6BE8EC-13EC-4A94-ABDE-0605142C88B5.html",
							"GUID-4D6BE8EC-13EC-4A94-ABDE-0605142C88B5.html",
							"GUID-4D6BE8EC-13EC-4A94-ABDE-0605142C88B5.html",
							"GUID-4D6BE8EC-13EC-4A94-ABDE-0605142C88B5.html",
							"GUID-4D6BE8EC-13EC-4A94-ABDE-0605142C88B5.html",
							"GUID-CAEE987E-7C37-4ED7-8306-49A2E8EF93EA.html",
							"GUID-CAEE987E-7C37-4ED7-8306-49A2E8EF93EA.html",
							"GUID-CAEE987E-7C37-4ED7-8306-49A2E8EF93EA.html",
							"GUID-CAEE987E-7C37-4ED7-8306-49A2E8EF93EA.html",
							"GUID-CAEE987E-7C37-4ED7-8306-49A2E8EF93EA.html",
							"GUID-CAEE987E-7C37-4ED7-8306-49A2E8EF93EA.html",
							"GUID-CAEE987E-7C37-4ED7-8306-49A2E8EF93EA.html",
							"GUID-CAEE987E-7C37-4ED7-8306-49A2E8EF93EA.html",
							"GUID-D9C35F46-3BAD-427E-9C83-CA548BAE77DF.html",
							"GUID-D9C35F46-3BAD-427E-9C83-CA548BAE77DF.html",
							"GUID-D9C35F46-3BAD-427E-9C83-CA548BAE77DF.html",
							"GUID-D9C35F46-3BAD-427E-9C83-CA548BAE77DF.html",
							"GUID-D9C35F46-3BAD-427E-9C83-CA548BAE77DF.html",
							"GUID-D9C35F46-3BAD-427E-9C83-CA548BAE77DF.html",
							"GUID-D9C35F46-3BAD-427E-9C83-CA548BAE77DF.html",
							"GUID-D9C35F46-3BAD-427E-9C83-CA548BAE77DF.html",
							"GUID-280694C4-227F-4691-BEF1-FB6365B3CD28.html",
							"GUID-5C692195-B523-4322-A373-4780486CD3AB.html",
							"GUID-5C692195-B523-4322-A373-4780486CD3AB.html",
							"GUID-5C692195-B523-4322-A373-4780486CD3AB.html",
							"GUID-5C692195-B523-4322-A373-4780486CD3AB.html",
							"GUID-5C692195-B523-4322-A373-4780486CD3AB.html",
							"GUID-5C692195-B523-4322-A373-4780486CD3AB.html",
							"GUID-5C692195-B523-4322-A373-4780486CD3AB.html",
							"GUID-5C692195-B523-4322-A373-4780486CD3AB.html",
							"GUID-7CFA4233-3BEA-4D18-AB0D-36A346709A67.html",
							"GUID-7CFA4233-3BEA-4D18-AB0D-36A346709A67.html",
							"GUID-7CFA4233-3BEA-4D18-AB0D-36A346709A67.html",
							"GUID-7CFA4233-3BEA-4D18-AB0D-36A346709A67.html",
							"GUID-7CFA4233-3BEA-4D18-AB0D-36A346709A67.html",
							"GUID-7CFA4233-3BEA-4D18-AB0D-36A346709A67.html",
							"GUID-7CFA4233-3BEA-4D18-AB0D-36A346709A67.html",
							"GUID-7CFA4233-3BEA-4D18-AB0D-36A346709A67.html",
							"GUID-4594F3F1-EA78-43B4-854F-36413FDD31C5.html",
							"GUID-7E92DBD1-3ACE-40D5-A3D0-91FAEBA57E7E.html",
							"GUID-7E92DBD1-3ACE-40D5-A3D0-91FAEBA57E7E.html",
							"GUID-7E92DBD1-3ACE-40D5-A3D0-91FAEBA57E7E.html",
							"GUID-7E92DBD1-3ACE-40D5-A3D0-91FAEBA57E7E.html",
							"GUID-7E92DBD1-3ACE-40D5-A3D0-91FAEBA57E7E.html",
							"GUID-46F712DC-4824-449D-9199-9AF12D72B0BF.html",
							"GUID-46F712DC-4824-449D-9199-9AF12D72B0BF.html",
							"GUID-46F712DC-4824-449D-9199-9AF12D72B0BF.html",
							"GUID-46F712DC-4824-449D-9199-9AF12D72B0BF.html",
							"GUID-46F712DC-4824-449D-9199-9AF12D72B0BF.html",
							"GUID-46F712DC-4824-449D-9199-9AF12D72B0BF.html",
							"GUID-46F712DC-4824-449D-9199-9AF12D72B0BF.html",
							"GUID-46F712DC-4824-449D-9199-9AF12D72B0BF.html",
							"GUID-6B82A241-FF17-4820-B615-5688BFD6AC50.html",
							"GUID-6B82A241-FF17-4820-B615-5688BFD6AC50.html",
							"GUID-6B82A241-FF17-4820-B615-5688BFD6AC50.html",
							"GUID-6B82A241-FF17-4820-B615-5688BFD6AC50.html",
							"GUID-6B82A241-FF17-4820-B615-5688BFD6AC50.html",
							"GUID-6B82A241-FF17-4820-B615-5688BFD6AC50.html",
							"GUID-6B82A241-FF17-4820-B615-5688BFD6AC50.html",
							"GUID-6B82A241-FF17-4820-B615-5688BFD6AC50.html",
							"GUID-2D39B442-09EA-47D9-A710-67904FC4DA4F.html",
							"GUID-2D39B442-09EA-47D9-A710-67904FC4DA4F.html",
							"GUID-2D39B442-09EA-47D9-A710-67904FC4DA4F.html",
							"GUID-2D39B442-09EA-47D9-A710-67904FC4DA4F.html",
							"GUID-2D39B442-09EA-47D9-A710-67904FC4DA4F.html",
							"GUID-2D39B442-09EA-47D9-A710-67904FC4DA4F.html",
							"GUID-2D39B442-09EA-47D9-A710-67904FC4DA4F.html",
							"GUID-2D39B442-09EA-47D9-A710-67904FC4DA4F.html",
							"GUID-FD15FA49-9089-44AF-9012-CCC3EE291522.html",
							"GUID-FD15FA49-9089-44AF-9012-CCC3EE291522.html",
							"GUID-FD15FA49-9089-44AF-9012-CCC3EE291522.html",
							"GUID-FD15FA49-9089-44AF-9012-CCC3EE291522.html",
							"GUID-FD15FA49-9089-44AF-9012-CCC3EE291522.html",
							"GUID-FD15FA49-9089-44AF-9012-CCC3EE291522.html",
							"GUID-FD15FA49-9089-44AF-9012-CCC3EE291522.html",
							"GUID-FD15FA49-9089-44AF-9012-CCC3EE291522.html",
							"GUID-692317EF-E19C-4FF1-A9C7-EF5346CB492C.html",
							"GUID-DB172BDF-7D69-4E47-8E3A-9BE4DDBE6144.html",
							"GUID-DB172BDF-7D69-4E47-8E3A-9BE4DDBE6144.html",
							"GUID-DB172BDF-7D69-4E47-8E3A-9BE4DDBE6144.html",
							"GUID-DB172BDF-7D69-4E47-8E3A-9BE4DDBE6144.html",
							"GUID-DB172BDF-7D69-4E47-8E3A-9BE4DDBE6144.html",
							"GUID-DB172BDF-7D69-4E47-8E3A-9BE4DDBE6144.html",
							"GUID-84A559F7-B9AF-4927-9073-A2BDA2AA6804.html",
							"GUID-84A559F7-B9AF-4927-9073-A2BDA2AA6804.html",
							"GUID-84A559F7-B9AF-4927-9073-A2BDA2AA6804.html",
							"GUID-84A559F7-B9AF-4927-9073-A2BDA2AA6804.html",
							"GUID-E0B3B3A6-07A9-4EC6-9C84-977842046668.html",
							"GUID-E0B3B3A6-07A9-4EC6-9C84-977842046668.html",
							"GUID-E0B3B3A6-07A9-4EC6-9C84-977842046668.html",
							"GUID-E0B3B3A6-07A9-4EC6-9C84-977842046668.html",
							"GUID-E0B3B3A6-07A9-4EC6-9C84-977842046668.html",
							"GUID-C83F212A-690F-48CE-8F2A-4B83862B2C31.html",
							"GUID-C83F212A-690F-48CE-8F2A-4B83862B2C31.html",
							"GUID-C83F212A-690F-48CE-8F2A-4B83862B2C31.html",
							"GUID-C83F212A-690F-48CE-8F2A-4B83862B2C31.html",
							"GUID-C83F212A-690F-48CE-8F2A-4B83862B2C31.html",
							"GUID-C83F212A-690F-48CE-8F2A-4B83862B2C31.html",
							"GUID-C83F212A-690F-48CE-8F2A-4B83862B2C31.html",
							"GUID-C83F212A-690F-48CE-8F2A-4B83862B2C31.html",
							"GUID-78A366F1-25A1-48F4-8E56-7A4FE40964F7.html",
							"GUID-78A366F1-25A1-48F4-8E56-7A4FE40964F7.html",
							"GUID-78A366F1-25A1-48F4-8E56-7A4FE40964F7.html",
							"GUID-78A366F1-25A1-48F4-8E56-7A4FE40964F7.html",
							"GUID-78A366F1-25A1-48F4-8E56-7A4FE40964F7.html",
							"GUID-78A366F1-25A1-48F4-8E56-7A4FE40964F7.html",
							"GUID-78A366F1-25A1-48F4-8E56-7A4FE40964F7.html",
							"GUID-78A366F1-25A1-48F4-8E56-7A4FE40964F7.html",
							"GUID-9545B29C-1FCB-4AB0-A576-3B5F7BEEF4B9.html",
							"GUID-9545B29C-1FCB-4AB0-A576-3B5F7BEEF4B9.html",
							"GUID-9545B29C-1FCB-4AB0-A576-3B5F7BEEF4B9.html",
							"GUID-9545B29C-1FCB-4AB0-A576-3B5F7BEEF4B9.html",
							"GUID-9545B29C-1FCB-4AB0-A576-3B5F7BEEF4B9.html",
							"GUID-9545B29C-1FCB-4AB0-A576-3B5F7BEEF4B9.html",
							"GUID-9545B29C-1FCB-4AB0-A576-3B5F7BEEF4B9.html",
							"GUID-9545B29C-1FCB-4AB0-A576-3B5F7BEEF4B9.html",
							"GUID-68449BC3-7664-4425-8DAB-120B78CC3C35.html",
							"GUID-68449BC3-7664-4425-8DAB-120B78CC3C35.html",
							"GUID-68449BC3-7664-4425-8DAB-120B78CC3C35.html",
							"GUID-68449BC3-7664-4425-8DAB-120B78CC3C35.html",
							"GUID-68449BC3-7664-4425-8DAB-120B78CC3C35.html",
							"GUID-68449BC3-7664-4425-8DAB-120B78CC3C35.html",
							"GUID-68449BC3-7664-4425-8DAB-120B78CC3C35.html",
							"GUID-68449BC3-7664-4425-8DAB-120B78CC3C35.html",
							"GUID-2837E642-4901-446E-B0F5-8EE66291BCFC.html",
							"GUID-AAAB9525-D75A-490F-89CA-766C731ABBA6.html",
							"GUID-AAAB9525-D75A-490F-89CA-766C731ABBA6.html",
							"GUID-AAAB9525-D75A-490F-89CA-766C731ABBA6.html",
							"GUID-AAAB9525-D75A-490F-89CA-766C731ABBA6.html",
							"GUID-AAAB9525-D75A-490F-89CA-766C731ABBA6.html",
							"GUID-AAAB9525-D75A-490F-89CA-766C731ABBA6.html",
							"GUID-AAAB9525-D75A-490F-89CA-766C731ABBA6.html",
							"GUID-104E40C1-F4A9-499B-A870-1A65C35EF5C1.html",
							"GUID-104E40C1-F4A9-499B-A870-1A65C35EF5C1.html",
							"GUID-104E40C1-F4A9-499B-A870-1A65C35EF5C1.html",
							"GUID-104E40C1-F4A9-499B-A870-1A65C35EF5C1.html",
							"GUID-104E40C1-F4A9-499B-A870-1A65C35EF5C1.html",
							"GUID-8DF1397A-E9E5-47F3-8737-CFA4F0CD376A.html",
							"GUID-8DF1397A-E9E5-47F3-8737-CFA4F0CD376A.html",
							"GUID-8DF1397A-E9E5-47F3-8737-CFA4F0CD376A.html",
							"GUID-8DF1397A-E9E5-47F3-8737-CFA4F0CD376A.html",
							"GUID-8DF1397A-E9E5-47F3-8737-CFA4F0CD376A.html",
							"GUID-FA9685C3-2B37-4821-AD49-3A01ED20F7CC.html",
							"GUID-FA9685C3-2B37-4821-AD49-3A01ED20F7CC.html",
							"GUID-FA9685C3-2B37-4821-AD49-3A01ED20F7CC.html",
							"GUID-FA9685C3-2B37-4821-AD49-3A01ED20F7CC.html",
							"GUID-FA9685C3-2B37-4821-AD49-3A01ED20F7CC.html",
							"GUID-FA9685C3-2B37-4821-AD49-3A01ED20F7CC.html",
							"GUID-FA9685C3-2B37-4821-AD49-3A01ED20F7CC.html",
							"GUID-FA9685C3-2B37-4821-AD49-3A01ED20F7CC.html",
							"GUID-4E5D2B7C-5BDC-4C23-8747-D530B99ECF63.html",
							"GUID-4E5D2B7C-5BDC-4C23-8747-D530B99ECF63.html",
							"GUID-4E5D2B7C-5BDC-4C23-8747-D530B99ECF63.html",
							"GUID-4E5D2B7C-5BDC-4C23-8747-D530B99ECF63.html",
							"GUID-4E5D2B7C-5BDC-4C23-8747-D530B99ECF63.html",
							"GUID-4E5D2B7C-5BDC-4C23-8747-D530B99ECF63.html",
							"GUID-4E5D2B7C-5BDC-4C23-8747-D530B99ECF63.html",
							"GUID-4E5D2B7C-5BDC-4C23-8747-D530B99ECF63.html",
							"GUID-2EE5E09F-F7A3-4B3A-9CEE-DB7F52840E02.html",
							"GUID-30254EA1-9A20-4F0A-BB0C-50F3C5CE24D5.html",
							"GUID-30254EA1-9A20-4F0A-BB0C-50F3C5CE24D5.html",
							"GUID-30254EA1-9A20-4F0A-BB0C-50F3C5CE24D5.html",
							"GUID-30254EA1-9A20-4F0A-BB0C-50F3C5CE24D5.html",
							"GUID-30254EA1-9A20-4F0A-BB0C-50F3C5CE24D5.html",
							"GUID-CFBC8377-2DCD-4C48-AB07-B620B37D378A.html",
							"GUID-CFBC8377-2DCD-4C48-AB07-B620B37D378A.html",
							"GUID-CFBC8377-2DCD-4C48-AB07-B620B37D378A.html",
							"GUID-CFBC8377-2DCD-4C48-AB07-B620B37D378A.html",
							"GUID-CFBC8377-2DCD-4C48-AB07-B620B37D378A.html",
							"GUID-CFBC8377-2DCD-4C48-AB07-B620B37D378A.html",
							"GUID-CFBC8377-2DCD-4C48-AB07-B620B37D378A.html",
							"GUID-73035754-3012-47E9-A25A-8F9C8E9FE68E.html",
							"GUID-73035754-3012-47E9-A25A-8F9C8E9FE68E.html",
							"GUID-73035754-3012-47E9-A25A-8F9C8E9FE68E.html",
							"GUID-73035754-3012-47E9-A25A-8F9C8E9FE68E.html",
							"GUID-73035754-3012-47E9-A25A-8F9C8E9FE68E.html",
							"GUID-F4D61340-9BBF-4528-9D6B-4FB3E554F2AF.html",
							"GUID-F4D61340-9BBF-4528-9D6B-4FB3E554F2AF.html",
							"GUID-F4D61340-9BBF-4528-9D6B-4FB3E554F2AF.html",
							"GUID-F4D61340-9BBF-4528-9D6B-4FB3E554F2AF.html",
							"GUID-F4D61340-9BBF-4528-9D6B-4FB3E554F2AF.html",
							"GUID-F4D61340-9BBF-4528-9D6B-4FB3E554F2AF.html",
							"GUID-F4D61340-9BBF-4528-9D6B-4FB3E554F2AF.html",
							"GUID-F4D61340-9BBF-4528-9D6B-4FB3E554F2AF.html",
							"GUID-B8A118B5-D71D-40A9-A8A3-D07E6667D995.html",
							"GUID-B8A118B5-D71D-40A9-A8A3-D07E6667D995.html",
							"GUID-B8A118B5-D71D-40A9-A8A3-D07E6667D995.html",
							"GUID-B8A118B5-D71D-40A9-A8A3-D07E6667D995.html",
							"GUID-B8A118B5-D71D-40A9-A8A3-D07E6667D995.html",
							"GUID-B8A118B5-D71D-40A9-A8A3-D07E6667D995.html",
							"GUID-B8A118B5-D71D-40A9-A8A3-D07E6667D995.html",
							"GUID-B8A118B5-D71D-40A9-A8A3-D07E6667D995.html",
							"GUID-533D5ED2-D4A6-4D2D-96C2-F22F52395F72.html",
							"GUID-BC2CF70D-B995-4831-8AE7-85E53E02A57D.html",
							"GUID-BC2CF70D-B995-4831-8AE7-85E53E02A57D.html",
							"GUID-BC2CF70D-B995-4831-8AE7-85E53E02A57D.html",
							"GUID-BC2CF70D-B995-4831-8AE7-85E53E02A57D.html",
							"GUID-BC2CF70D-B995-4831-8AE7-85E53E02A57D.html",
							"GUID-DD1B8C31-2334-40FA-B562-83563A4A8933.html",
							"GUID-DD1B8C31-2334-40FA-B562-83563A4A8933.html",
							"GUID-DD1B8C31-2334-40FA-B562-83563A4A8933.html",
							"GUID-DD1B8C31-2334-40FA-B562-83563A4A8933.html",
							"GUID-DD1B8C31-2334-40FA-B562-83563A4A8933.html",
							"GUID-08FC43FF-5ACA-46F3-AEA6-8F5EFAD077EB.html",
							"GUID-08FC43FF-5ACA-46F3-AEA6-8F5EFAD077EB.html",
							"GUID-08FC43FF-5ACA-46F3-AEA6-8F5EFAD077EB.html",
							"GUID-08FC43FF-5ACA-46F3-AEA6-8F5EFAD077EB.html",
							"GUID-08FC43FF-5ACA-46F3-AEA6-8F5EFAD077EB.html",
							"GUID-3D1E32DB-4425-4009-9267-8617566212CD.html",
							"GUID-3D1E32DB-4425-4009-9267-8617566212CD.html",
							"GUID-3D1E32DB-4425-4009-9267-8617566212CD.html",
							"GUID-3D1E32DB-4425-4009-9267-8617566212CD.html",
							"GUID-3D1E32DB-4425-4009-9267-8617566212CD.html",
							"GUID-3D1E32DB-4425-4009-9267-8617566212CD.html",
							"GUID-3D1E32DB-4425-4009-9267-8617566212CD.html",
							"GUID-3D1E32DB-4425-4009-9267-8617566212CD.html",
							"GUID-FF05BAE1-E2E0-4281-A31D-9659BC2F604D.html",
							"GUID-FF05BAE1-E2E0-4281-A31D-9659BC2F604D.html",
							"GUID-FF05BAE1-E2E0-4281-A31D-9659BC2F604D.html",
							"GUID-FF05BAE1-E2E0-4281-A31D-9659BC2F604D.html",
							"GUID-FF05BAE1-E2E0-4281-A31D-9659BC2F604D.html",
							"GUID-FF05BAE1-E2E0-4281-A31D-9659BC2F604D.html",
							"GUID-FF05BAE1-E2E0-4281-A31D-9659BC2F604D.html",
							"GUID-FF05BAE1-E2E0-4281-A31D-9659BC2F604D.html",
							"GUID-537E27A2-F053-4056-861D-7A2157C17DE6.html",
							"GUID-537E27A2-F053-4056-861D-7A2157C17DE6.html",
							"GUID-537E27A2-F053-4056-861D-7A2157C17DE6.html",
							"GUID-537E27A2-F053-4056-861D-7A2157C17DE6.html",
							"GUID-537E27A2-F053-4056-861D-7A2157C17DE6.html",
							"GUID-537E27A2-F053-4056-861D-7A2157C17DE6.html",
							"GUID-537E27A2-F053-4056-861D-7A2157C17DE6.html",
							"GUID-537E27A2-F053-4056-861D-7A2157C17DE6.html",
							"GUID-577EB4F3-C11B-4D1A-BB91-0CFDB6EF6FB7.html",
							"GUID-577EB4F3-C11B-4D1A-BB91-0CFDB6EF6FB7.html",
							"GUID-577EB4F3-C11B-4D1A-BB91-0CFDB6EF6FB7.html",
							"GUID-577EB4F3-C11B-4D1A-BB91-0CFDB6EF6FB7.html",
							"GUID-577EB4F3-C11B-4D1A-BB91-0CFDB6EF6FB7.html",
							"GUID-577EB4F3-C11B-4D1A-BB91-0CFDB6EF6FB7.html",
							"GUID-577EB4F3-C11B-4D1A-BB91-0CFDB6EF6FB7.html",
							"GUID-577EB4F3-C11B-4D1A-BB91-0CFDB6EF6FB7.html",
							"GUID-218B5D0A-233A-4F9A-B771-1C7B7CA01C37.html",
							"GUID-218B5D0A-233A-4F9A-B771-1C7B7CA01C37.html",
							"GUID-218B5D0A-233A-4F9A-B771-1C7B7CA01C37.html",
							"GUID-218B5D0A-233A-4F9A-B771-1C7B7CA01C37.html",
							"GUID-218B5D0A-233A-4F9A-B771-1C7B7CA01C37.html",
							"GUID-218B5D0A-233A-4F9A-B771-1C7B7CA01C37.html",
							"GUID-218B5D0A-233A-4F9A-B771-1C7B7CA01C37.html",
							"GUID-218B5D0A-233A-4F9A-B771-1C7B7CA01C37.html",
							"GUID-F7D866DC-091E-4AC3-AA41-268779AF490A.html",
							"GUID-F7D866DC-091E-4AC3-AA41-268779AF490A.html",
							"GUID-F7D866DC-091E-4AC3-AA41-268779AF490A.html",
							"GUID-F7D866DC-091E-4AC3-AA41-268779AF490A.html",
							"GUID-F7D866DC-091E-4AC3-AA41-268779AF490A.html",
							"GUID-F7D866DC-091E-4AC3-AA41-268779AF490A.html",
							"GUID-F7D866DC-091E-4AC3-AA41-268779AF490A.html",
							"GUID-F7D866DC-091E-4AC3-AA41-268779AF490A.html"];

var SearchTitles = ["MPLAB® Harmony 3 Wireless_wifi",
"MPLAB® Harmony WINC WLAN Library",
"WINC Firmware Update Guide",
"MPLAB Harmony Integrated Software Framework",
"Description",
"Firmware Update Utilities",
"Image Tool",
"Generating Device Programming Files",
"WINC Programmer",
"Programming Device",
"Conclusion",
"Serial Bridge",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"Association Management",
"WDRV_WINC_ASSOC_CALLBACK Typedef",
"C",
"Summary",
"Description",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_ASSOC_HANDLE; Typedef",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_WINC_ASSOC_HANDLE_INVALID Macro",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_WINC_ASSOC_RSSI_CALLBACK Typedef",
"C",
"Summary",
"Description",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_AssocAuthTypeGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_AssocPeerAddressGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_AssocRSSIGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_AssocSSIDGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"BLE Operation",
"WDRV_WINC_BLEIsStarted Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_BLEStart Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_BLEStop Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"BSS Search",
"WDRV_WINC_BSSFIND_NOTIFY_CALLBACK Typedef",
"C",
"Summary",
"Description",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_BSSFindFirst Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_BSSFindGetInfo Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_BSSFindGetNumBSSResults Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_BSSFindInProgress Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_BSSFindNext Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_BSSFindReset Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_BSSFindSetEnabledChannels Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_BSSFindSetRSSIThreshold Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_BSSFindSetScanMatchMode Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_BSSFindSetScanParameters Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"Authentication BSS HTTP provisioning",
"WDRV_WINC_AuthCtxIsValid Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_AuthCtxSetDefaults Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_AuthCtxSetOpen Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_AuthCtxSetWEP Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_AuthCtxSetWPA Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_AuthCtxSetWPAEnterpriseMSCHAPv2 Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_AuthCtxSetWPAEnterpriseTLS Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_HTTP_PROV_CONTEXT Struct",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_WINC_HTTPPROV_INFO_CALLBACK Typedef",
"C",
"Summary",
"Description",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_HTTPProvCtxSetConnectCallback Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_HTTPProvCtxSetDefaults Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_HTTPProvCtxSetDomainName Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_HTTPProvCtxSetURLWildcard Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"Client Interaction",
"WDRV_WINC_Close Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_Open Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"Network Sockets and IP",
"WDRV_WINC_ICMP_ECHO_RSP_EVENT_HANDLER Typedef",
"C",
"Summary",
"Description",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_ICMP_ECHO_STATUS Enum",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_WINC_ICMPEchoRequest Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_IPAddressGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_IPAddressSet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_IPDefaultGatewaySet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_IPDHCPServerConfigure Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_IPDNSServerAddressSet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_IPLinkActive Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_IPUseDHCPGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_IPUseDHCPSet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SocketRegisterEventCallback Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SocketRegisterResolverCallback Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"NVM Access",
"WDRV_WINC_NVM_REGION Enum",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_WINC_NVMEraseSector Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_NVMRead Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_NVMWrite Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"Power Save Control",
"WDRV_WINC_PowerSaveGetMode Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_PowerSaveManualSleep Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_PowerSaveSetBeaconInterval Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_PowerSaveSetMode Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_PS_MODE Enum",
"C",
"Summary",
"Description",
"Remarks",
"Setup Initialization",
"WDRV_WINC_Deinitialize Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_Initialize Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_Reinitialize Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_Status Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"WDRV_WINC_Tasks Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"Soft-AP",
"WDRV_WINC_APSetCustIE Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_APStart Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_APStop Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_CUST_IE Struct",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_WINC_CUST_IE_STORE_CONTEXT Struct",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_WINC_CustIEStoreCtxAddIE Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_CustIEStoreCtxRemoveIE Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_CustIEStoreCtxSetStorage Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"STA",
"WDRV_WINC_BSSCON_NOTIFY_CALLBACK Typedef",
"C",
"Summary",
"Description",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_BSSConnect Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_BSSDisconnect Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_BSSReconnect Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"SSL/TLS Control",
"WDRV_WINC_SSL_CIPHERSUITELIST_CALLBACK Typedef",
"C",
"Summary",
"Description",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SSL_REQ_ECC_CALLBACK Typedef",
"C",
"Summary",
"Description",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SSLActiveCipherSuitesSet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SSLCTXCipherSuitesGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SSLCTXCipherSuitesSet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SSLCTXDefault Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SSLECCHandShakeRsp Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SSLECCReqCallbackSet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SSLRetrieveCert Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SSLRetrieveHash Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SSLStopRetrieveCert Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"System Time Control",
"WDRV_WINC_LocalTimeToUTC Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SystemTimeGetCurrent Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SystemTimeSetCurrent Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SystemTimeSNTPClientDisable Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SystemTimeSNTPClientEnable Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_SYSTIME_CURRENT_CALLBACK Typedef",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_WINC_UTCToLocalTime Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WPS",
"WDRV_WINC_WPS_DISC_CALLBACK Typedef",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_WINC_WPSEnrolleeDiscoveryStartPBC Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_WPSEnrolleeDiscoveryStartPIN Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_WINC_WPSEnrolleeDiscoveryStop Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"MPLAB® Harmony PIC32MZW1 WLAN Library",
"System Interface APIs",
"WDRV_PIC32MZW_SYS_INIT Struct",
"C",
"Summary",
"Description",
"WDRV_PIC32MZW_SYS_STATUS Enum",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_Initialize Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_Deinitialize Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_Reinitialize Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_Status Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Example",
"Remarks",
"Client Open/Close APIs",
"WDRV_PIC32MZW_CTRLDCPT Struct",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_Open Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_Close Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_StatusExt Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"Client - BSS Find APIs",
"WDRV_PIC32MZW_BSSFIND_NOTIFY_CALLBACK Typedef",
"C",
"Summary",
"Description",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_SCAN_MATCH_MODE Enum",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_SEC_MASK Enum",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_BSSFindFirst Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSFindGetInfo Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSFindGetNumBSSResults Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSFindInProgress Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSFindNext Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSFindReset Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSFindSetEnabledChannels24 Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSFindSetScanMatchMode Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSFindSetScanParameters Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSRoamingConfigure Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"Client - BSS Context APIs",
"WDRV_PIC32MZW_BSS_CONTEXT Struct",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_BSS_INFO Struct",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_BSS_ROAMING_CFG Enum",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_BSSCON_NOTIFY_CALLBACK Typedef",
"C",
"Summary",
"Description",
"Parameters",
"Returns",
"Remarks",
"Summary",
"Description",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSCtxIsValid Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSCtxSetBSSID Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSCtxSetChannel Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSCtxSetDefaults Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSCtxSetSSID Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSCtxSetSSIDVisibility Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"Client Interface - Authentication Context APIs",
"WDRV_PIC32MZW_ENT_AUTH_DOMAIN_USER_LEN_MAX Macro",
"C",
"WDRV_PIC32MZW_AUTH_MFP_CONFIG Enum",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_AUTH_TYPE Enum",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_AuthCtxConfigureMfp Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_AuthCtxIsValid Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_AuthCtxSetDefaults Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_AuthCtxSetEnterpriseTLS Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_AuthCtxSetOpen Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_AuthCtxSetPersonal Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_AuthCtxSharedKey Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_AuthCtxApTransitionDisable Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_AuthCtxStaTransitionDisable Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"Client - Association APIs",
"WDRV_PIC32MZW_ASSOC_HANDLE_INVALID Macro",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_ASSOC_RSSI_CALLBACK Typedef",
"C",
"Summary",
"Description",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_ASSOC_HANDLE; Typedef",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_ASSOC_INFO Struct",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_AssocDisconnect Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_AssocPeerAddressGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_AssocRSSIGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_AssocTransitionDisableGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"Client Interface - STA mode APIs",
"WDRV_PIC32MZW_BSSConnect Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_BSSDisconnect Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"Client Interface - Soft AP mode APIs",
"WDRV_PIC32MZW_SEC_MASK Enum",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_APStart Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_APStop Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_APRekeyIntervalSet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_APSetCustIE Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"802 11 Powersave API",
"WDRV_PIC32MZW_PS_NOTIFY_CALLBACK Typedef",
"C",
"Summary",
"Description",
"Parameters",
"Remarks",
"WDRV_PIC32MZW_POWERSAVE_MODE Enum",
"C",
"Summary",
"Description",
"WDRV_PIC32MZW_POWERSAVE_PIC_CORRELATION Enum",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_PowerSaveModeSet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_PowerSaveBroadcastTrackingSet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_PowerSaveListenIntervalSet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_PowerSaveSleepInactLimitSet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"Regulatory Domain Selection APIs",
"WDRV_PIC32MZW_REGDOMAIN_CALLBACK Typedef",
"C",
"Summary",
"Description",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_REGDOMAIN_SELECT Enum",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_RF_MAC_CONFIG Struct",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_RegDomainGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_RegDomainSet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"Vendor IE API Implementation",
"WDRV_PIC32MZW_IE_FRAME_TYPE_MASK Enum",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_IE_RX_CALLBACK Typedef",
"C",
"Summary",
"Description",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_VENDORIE_INFO Struct",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_IECustTxDataSet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_IERxDataGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"Client - Information APIs",
"WDRV_PIC32MZW_CHANNEL_ID Enum",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_CHANNEL24_MASK Enum",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_CONN_STATE Enum",
"C",
"Summary",
"Description",
"Remarks",
"WDRV_PIC32MZW_GetStatistics Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_InfoDeviceMACAddressGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_InfoEnabledChannelsGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_InfoOpChanGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_InfoRfMacConfigGet Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks",
"WDRV_PIC32MZW_PMKCacheFlush Function",
"C",
"Summary",
"Description",
"Precondition",
"Parameters",
"Returns",
"Remarks"];

var SearchInfo = [" MPLAB® Harmony 3 Wireless_wifi This is the help page for the MPLAB® Harmony 3 Wireless_wifi solutions Quickly incorporate connectivity to your designs with wireless ICs modules software and development kits that make connecting effortless for your customers Our comprehensive wireless portfolio has the technology to meet your range data rate interoperability frequency and topology needs Refer to the following links for release notes training materials and interface reference information ",
							" MPLAB® Harmony WINC WLAN Library The MPLAB Harmony WINC Driver provides a high-level interface to the ATWINC1500 and ATWINC3400 Wi-Fi network controller modules The WINC Driver Library in conjunction with the ATWINC1500 or ATWINC3400 module allows an application to: Join an existing 802 11 b/g/n 2 4GHz Wi-Fi Infrastructure network Create an 802 11 Wi-Fi Ad Hoc of Soft AP network Scan for other W-Fi devices in an area Supports BLE 4 0 provisioning and profiles in central and peripheral mode (ATWINC3400 only) Below are the interfaces provided by the WINC WLAN library ",
							" WINC Firmware Update Guide ",
							" MPLAB Harmony Integrated Software Framework This document explains the WINC Firmware Upgrade Process ",
							" Description The ATWINC1500 and ATWINC3400 WiFi devices require firmware to be loaded into flash memory to operate These devices will come shipped with firmware preloaded however it may become necessary to update this firmware to take advantage of fixes and new or expanded features MPLAB Harmony 3 and later include the WINC Firmware Update utilities required to update the flash firmware of the WINC devices These utilities can be found in the /utilities/wifi/winc directory User has to follow below steps to update the WINC module firmware • From the 'wireless_wifi' repo at 'wireless_wifi apps serial_bridge' program the serial bridge application • The application will put host device in serial bridge mode where it will take the WINC module image from laptop utility and program into WINC module • Below example show SAMD21 Xplained connected to WINC1500 Xplained on EXT1 for upgrading the WINC15x0 module firmware Microchip-Technology ",
							" Firmware Update Utilities Updating a WINC device requires two utilities an Image Tool which builds a file containing the changes required to the WINCs flash memory and a WINC Programming Tool which applies the changes to the WINC device ",
							" Image Tool ",
							" Generating Device Programming Files The following command line will generate a device programming file winc1500_19 6 1 prog image_tool exe -c winc1500_19 6 1 config txt -o winc1500_19 6 1 prog -of prog The file produced can be used to upgrade a WINC1500 to version 19 6 1 including the firmware HTTP files and root certificates ",
							" WINC Programmer ",
							" Programming Device The following command line will program a WINC1500 device via the serial port COM29 winc_programmer -p COM29 -d winc1500 -i winc1500_19 6 1 prog -if prog -w -r -pfw winc1500_19 6 1 firmware programmer_firmware_3A0 bin Output: WINC Programming Tool 1 0 0 (Jun 27 2018) Copyright (C) Microchip Technology Inc 2018 WINC serial bridge found chip ID is 0x001503a0 programming fw file: winc1500_19 6 1 firmware programmer_firmware_3A0 bin starting device reinitialise serial bridge to 500000 waiting for firmware to run flash ID 0x001440ef flash size is 8 Mb begin write operation 0x000000: 0x008000: 0x010000: 0x018000: 0x020000: 0x028000: 0x030000: 0x038000: 0x040000: 0x048000: 0x050000: 0x058000: 0x060000: 0x068000: 0x070000: 0x078000: 0x080000: 0x088000: 0x090000: 0x098000: 0x0a0000: 0x0a8000: 0x0b0000: 0x0b8000: 0x0c0000: 0x0c8000: 0x0d0000: 0x0d8000: 0x0e0000: 0x0e8000: 0x0f0000: 0x0f8000: begin read operation 0x000000: 0x008000: 0x010000: 0x018000: 0x020000: 0x028000: 0x030000: 0x038000: 0x040000: 0x048000: 0x050000: 0x058000: 0x060000: 0x068000: 0x070000: 0x078000: 0x080000: 0x088000: 0x090000: 0x098000: 0x0a0000: 0x0a8000: 0x0b0000: 0x0b8000: 0x0c0000: 0x0c8000: 0x0d0000: 0x0d8000: 0x0e0000: 0x0e8000: 0x0f0000: 0x0f8000: verify range 0x000000 to 0x100000 begin verify operation 0x000000: 0x008000: 0x010000: 0x018000: 0x020000: 0x028000: 0x030000: 0x038000: 0x040000: 0x048000: 0x050000: 0x058000: 0x060000: 0x068000: 0x070000: 0x078000: 0x080000: 0x088000: 0x090000: 0x098000: 0x0a0000: 0x0a8000: 0x0b0000: 0x0b8000: 0x0c0000: 0x0c8000: 0x0d0000: 0x0d8000: 0x0e0000: 0x0e8000: 0x0f0000: 0x0f8000: verify passed ",
							" Conclusion Once verified the Firmware has been updated The WINC module now contains the updated Firmware and it can be used with any other application of choice ",
							" Serial Bridge This example compiles the serial bridge application which is used to communicate to WINC devices from PC ",
							" Description Serial bridge application acts as a bridge between PC and WINC devices For example firmware update project use serial bridge application to load the firmware to WINC device via serial bridge application located in host MCU ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/serial_bridge/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_d21_xpro_winc1500 X MPLABX project for SAMD21 and WINC3400 Xplained pro sam_d21_xpro_winc3400 X MPLABX project for SAMD21 and WINC3400 Xplained pro sam_e54_xpro_winc1500 X MPLABX project for SAME54 and WINC3400 Xplained pro sam_e54_xpro_winc3400 X MPLABX project for SAME54 and WINC3400 Xplained pro ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Open the project Build and program the generated code into the hardware using its IDE Please refer to \"WINC Firmware Update Guide\" for more information Please note this example will not output any console messages ",
							" Association Management This topic provides information on Wi-Fi association management The application can query information about the current Wi-Fi association by calling one of these interface functions The requested information may not be immediately available to the MCU driver if this is the case the driver will request the information from the WINC device Each interface function can be passed a pointer to a buffer to receive the requested information value and/or a callback function to use for notification If no buffer pointer is provided each interface function will request up to date information from the WINC device and provide it through the callback provided If the information is available within the driver it will be copied into the supplied buffer and the function will return WDRV_WINC_STATUS_OK If the information is not available or the buffer pointer is not supplied the function will attempt to request the information from the WINC and if successfully requested will return WDRV_WINC_STATUS_RETRY_REQUEST indicating the request could be retired if required The function returns WDRV_WINC_STATUS_REQUEST_ERROR if an error occurred during make the request ",
							" WDRV_WINC_ASSOC_CALLBACK Typedef ",
							" C typedef void (*WDRV_WINC_ASSOC_CALLBACK) ",
							" Summary Pointer to a callback to provide information about the current association ",
							" Description This data type defines a function callback to provide details of the SSID network address authentication type and initial signal strength (RSSI) of the current association ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pSSID Pointer to current SSID pPeerAddress Pointer to the peer devices address authType Authentication type currently being used rssi The current RSSI of the association ",
							" Returns None ",
							" Remarks See WDRV_WINC_AssocSSIDGet WDRV_WINC_AssocPeerAddressGet and WDRV_WINC_AssocAuthTypeGet ",
							" WDRV_WINC_ASSOC_HANDLE; Typedef ",
							" C typedef uintptr_t WDRV_WINC_ASSOC_HANDLE; ",
							" Summary A handle representing an association instance ",
							" Description An association handle references a single association instance between AP and STA ",
							" Remarks None ",
							" WDRV_WINC_ASSOC_HANDLE_INVALID Macro ",
							" C #define WDRV_WINC_ASSOC_HANDLE_INVALID (((WDRV_WINC_ASSOC_HANDLE) -1)) ",
							" Summary Invalid association handle ",
							" Description Defines a value for an association handle which isn't yet valid ",
							" Remarks None ",
							" WDRV_WINC_ASSOC_RSSI_CALLBACK Typedef ",
							" C typedef void (*WDRV_WINC_ASSOC_RSSI_CALLBACK)(DRV_HANDLE handle int8_t rssi); ",
							" Summary A callback to provide the current RSSI of the current association ",
							" Description This callback provides details of the signal strength (RSSI) of the current association ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open rssi The current RSSI of the association ",
							" Returns None ",
							" Remarks None ",
							" WDRV_WINC_AssocAuthTypeGet Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_AssocAuthTypeGet ( DRV_HANDLE handle WDRV_WINC_AUTH_TYPE *const pAuthType WDRV_WINC_ASSOC_CALLBACK const pfAssociationInfoCB ) ",
							" Summary Retrieve the current association authentication type ",
							" Description Attempts to retrieve the authentication type of the current association ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle A peer device needs to be connected and associated ",
							" Parameters Param Description assocHandle Association handle pAuthType Pointer to element to receive the authentication type if available pfAssociationInfoCB Pointer to callback function to be used when authentication type is available ",
							" Returns WDRV_WINC_STATUS_OK - pAuthType will contain the authentication type WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected or there is no current association WDRV_WINC_STATUS_RETRY_REQUEST - The authentication type is not available but it will be requested from the WINC ",
							" Remarks If the authentication type is not currently known to the driver (stored within the WINC) a request will be sent to the WINC and the return status will be WDRV_WINC_STATUS_RETRY_REQUEST The callback function pfAssociationInfoCB can be provided which will be called when the WINC provides the association information to the driver Alternatively the caller may poll this function until the return status is WDRV_WINC_STATUS_OK to obtain the authentication type in pAuthType ",
							" WDRV_WINC_AssocPeerAddressGet Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_AssocPeerAddressGet ( DRV_HANDLE handle WDRV_WINC_NETWORK_ADDRESS *const pPeerAddress WDRV_WINC_ASSOC_CALLBACK const pfAssociationInfoCB ) ",
							" Summary Retrieve the current association peer device network address ",
							" Description Attempts to retrieve the network address of the peer device in the current association ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle A peer device needs to be connected and associated ",
							" Parameters Param Description assocHandle Association handle pPeerAddress Pointer to structure to receive the network address if available pfAssociationInfoCB Pointer to callback function to be used when network address is available ",
							" Returns WDRV_WINC_STATUS_OK - pPeerAddress will contain the network address WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected or there is no current association WDRV_WINC_STATUS_RETRY_REQUEST - The network address is not available but it will be requested from the WINC ",
							" Remarks If the network address is not currently known to the driver (stored within the WINC) a request will be sent to the WINC and the return status will be WDRV_WINC_STATUS_RETRY_REQUEST The callback function pfAssociationInfoCB can be provided which will be called when the WINC provides the association information to the driver Alternatively the caller may poll this function until the return status is WDRV_WINC_STATUS_OK to obtain the network address in pPeerAddress ",
							" WDRV_WINC_AssocRSSIGet Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_AssocRSSIGet ( DRV_HANDLE handle int8_t *const pRSSI WDRV_WINC_ASSOC_RSSI_CALLBACK const pfAssociationRSSICB ) ",
							" Summary Retrieve the current association RSSI ",
							" Description Attempts to retrieve the RSSI of the current association ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle A peer device needs to be connected and associated ",
							" Parameters Param Description assocHandle Association handle pRSSI Pointer to variable to receive RSSI if available pfAssociationRSSICB Pointer to callback function to be used when RSSI value is available ",
							" Returns WDRV_WINC_STATUS_OK - pRSSI will contain the RSSI WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected or there is no current association WDRV_WINC_STATUS_RETRY_REQUEST - The RSSI is not available but it will be requested from the WINC ",
							" Remarks If the RSSI is not currently known to the driver (stored within the WINC) a request will be sent to the WINC and the return status will be WDRV_WINC_STATUS_RETRY_REQUEST The callback function pfAssociationRSSICB can be provided which will be called when the WINC provides the RSSI information to the driver Alternatively the caller may poll this function until the return status is WDRV_WINC_STATUS_OK to obtain the RSSI in pRSSI ",
							" WDRV_WINC_AssocSSIDGet Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_AssocSSIDGet ( DRV_HANDLE handle WDRV_WINC_SSID *const pSSID WDRV_WINC_ASSOC_CALLBACK const pfAssociationInfoCB ) ",
							" Summary Retrieve the current association SSID ",
							" Description Attempts to retrieve the SSID of the current association ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle A peer device needs to be connected and associated ",
							" Parameters Param Description assocHandle Association handle pSSID Pointer to buffer to receive the SSID if available pfAssociationInfoCB Pointer to callback function to be used when SSID is available ",
							" Returns WDRV_WINC_STATUS_OK - pSSID will contain the SSID WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected or there is no current association WDRV_WINC_STATUS_RETRY_REQUEST - The SSID is not available but it will be requested from the WINC ",
							" Remarks If the SSID is not currently known to the driver (stored within the WINC) a request will be sent to the WINC and the return status will be WDRV_WINC_STATUS_RETRY_REQUEST The callback function pfAssociationInfoCB can be provided which will be called when the WINC provides the association information to the driver Alternatively the caller may poll this function until the return status is WDRV_WINC_STATUS_OK to obtain the SSID in pSSID ",
							" BLE Operation This topic provides information on how ATWINC3400 BLE operations are controlled The ATWINC3400 device includes BLE functionality while this driver does not provide direct access to the BLE functionality it does provide a control interface for enabling and disabling BLE functionality To enable BLE functionality the function WDRV_WINC_BLEStart can be called while the function WDRV_WINC_BLEStop disables BLE operations The application may use the function WDRV_WINC_BLEIsStarted to test if BLE functionality is currently enabled ",
							" WDRV_WINC_BLEIsStarted Function ",
							" C bool WDRV_WINC_BLEIsStarted(DRV_HANDLE handle) ",
							" Summary Determines if BLE has been started ",
							" Description Determines if BLE has been started ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ",
							" Returns true or false ",
							" Remarks None ",
							" WDRV_WINC_BLEStart Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_BLEStart(DRV_HANDLE handle) ",
							" Summary Starts the BLE interface ",
							" Description Enables the BLE interface ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ",
							" Returns WDRV_WINC_STATUS_OK - A find operation was initiated WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks None ",
							" WDRV_WINC_BLEStop Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_BLEStop(DRV_HANDLE handle) ",
							" Summary Stops the BLE interface ",
							" Description Disables the BLE interface ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ",
							" Returns WDRV_WINC_STATUS_OK - A find operation was initiated WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks None ",
							" BSS Search The application can use this interface to request a scan for local BSSs Once requested the WINC device will conduct the search using the configured search parameters and report the results back to the application one BSS at a time This interface can be used in either a callback mode a polled mode or a combination of both callback and polled depending on how the application wished to receive the BSS information Scan Parameters Thresholds and Channels How a scan is conducted depends on the parameters threshold and channel lists provided by the application Each scan operation on a channel consists of a number of scan slots the time spent in each slot can be configured for both active and passive scans as well as the number of slots per channel These parameters are set using the function WDRV_WINC_BSSFindSetScanParameters The RSSI threshold a BSS must exceed to be considered detected can be set by calling WDRV_WINC_BSSFindSetRSSIThreshold The channels which can be scanned can be set by calling WDRV_WINC_BSSFindSetEnabledChannels Starting a Scan When an application wishes to begin a scan operation it must call WDRV_WINC_BSSFindFirst It is possible to request a scan on only a single channel or on all channels enabled by WDRV_WINC_BSSFindSetEnabledChannels The scan can be performed using active mode (where probe requests are transmitted) or passive mode (where beacons are listened for) WDRV_WINC_BSSFindFirst takes an optional callback function to use for notifying the application when the scan operation is complete and the first result is available If this isn’t provided the application can poll this interface using WDRV_WINC_BSSFindInProgress to determine if the WINC device is still scanning Getting Results: Callback Only If a callback function was provided to WDRV_WINC_BSSFindFirst the WINC driver will call this callback when the first results are available The callback is provided with the scan result for a single BSS as well as the index of the results within the full set of BSSs discovered If the callback function returns the value true to the WINC driver it will cause the driver to request the next result from the WINC device When this result is available the WINC driver will again call the callback and provide the BSS information It is thus possible to receive all the results via the callback Getting Results : Callback Notification Foreground Retrieval While the application may wish to be notified of a BSS result being available via the callback mechanism it may be preferable to retrieve the result information from a foreground task For example in an OS environment the callback may simply signal a semaphore triggering the main application task to retrieve the BSS information In this model the callback called by the WINC driver should return the value false The WINC driver will not request the next set of BSS information from the WINC device The foreground task may then call WDRV_WINC_BSSFindGetInfo with a pointer to a WDRV_WINC_BSS_INFO structure to receive the BSS information If the function is called when there is no valid BSS information present in the WINC driver the function will return WDRV_WINC_STATUS_NO_BSS_INFO When the application wishes to request the next set of BSS information it must call WDRV_WINC_BSSFindNext It is possible to change the callback function at this time or even turn off callback operation if a NULL pointer is used Assuming the callback function is again specified the WINC driver will request the next set of BSS information from the WINC device and inform the application via the callback Getting Results : Polled The operations of the BSS scan can be inferred by polling this interface WDRV_WINC_BSSFindInProgress indicates if the scan operation is currently active and results are not yet available WDRV_WINC_BSSFindGetNumBSSResults returns the number of sets of BSS information available as a result of a scan operation WDRV_WINC_BSSFindGetInfo can be called to retrieve the BSS information If the information is not yet available this function will return WDRV_WINC_STATUS_NO_BSS_INFO Terminating a BSS Search Once a scan operation has been started by calling WDRV_WINC_BSSFindFirst it must be allowed to complete once it has the application may decide to ignore some or all of the results To abort the BSS information retrieval and abandon any remaining results the application can call WDRV_WINC_BSSFindReset ",
							" WDRV_WINC_BSSFIND_NOTIFY_CALLBACK Typedef ",
							" C typedef bool (*WDRV_WINC_BSSFIND_NOTIFY_CALLBACK) ",
							" Summary Callback to signal discovery of a BSS ",
							" Description When the information about a discovered BSS is requested the driver will use this callback to provide the BSS information to the user ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open index Index of BSS find results ofTotal Total number of BSS find results pBSSInfo Pointer to BSS information structure ",
							" Returns If true is returned the WINC driver will automatically fetch the next BSS find results which will cause a later call to this callback If false is returned the WINC driver will not fetch the next BSS find results the user must call WDRV_WINC_BSSFindNext to retrieve them ",
							" Remarks The callback function must return true or false true indicates that the user wishes the next BSS information structure be provided false indicates that the user will call WDRV_WINC_BSSFindNext to obtain the next BBS information structure ",
							" WDRV_WINC_BSSFindFirst Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_BSSFindFirst ( DRV_HANDLE handle WDRV_WINC_CHANNEL_ID channel bool active const WDRV_WINC_SSID_LIST *const pSSIDList const WDRV_WINC_BSSFIND_NOTIFY_CALLBACK pfNotifyCallback ) ",
							" Summary Request a BSS scan is performed by the WINC ",
							" Description A scan is requested on the specified channels An optional callback can be provided to receive notification of the first BSS discovered ",
							" Precondition WDRV_WINC_Initialize must have been called WDRV_WINC_Open must have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open channel Channel to scan maybe WDRV_WINC_ALL_CHANNELS or WDRV_WINC_CID_ANY in which case all enabled channels are scanned active Use active vs passive scanning pSSIDList Pointer to list of SSIDs to match on pfNotifyCallback Callback to receive notification of first BSS found ",
							" Returns WDRV_WINC_STATUS_OK - A scan was initiated WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_SCAN_IN_PROGRESS - A scan is already in progress ",
							" Remarks If channel is WDRV_WINC_ALL_CHANNELS or WDRV_WINC_CID_ANY then all enabled channels are scanned The enabled channels can be configured using WDRV_WINC_BSSFindSetEnabledChannels How the scan is performed can be configured using WDRV_WINC_BSSFindSetScanParameters ",
							" WDRV_WINC_BSSFindGetInfo Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_BSSFindGetInfo ( DRV_HANDLE handle WDRV_WINC_BSS_INFO *const pBSSInfo ) ",
							" Summary Requests the information structure of the current BSS scan result ",
							" Description After each call to either WDRV_WINC_BSSFindFirst or WDRV_WINC_BSSFindNext the driver receives a single BSS information structure which it stores This function retrieves that structure ",
							" Precondition WDRV_WINC_Initialize must have been called WDRV_WINC_Open must have been called to obtain a valid handle WDRV_WINC_BSSFindFirst must have been called ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pBSSInfo Pointer to structure to populate with the current BSS information ",
							" Returns WDRV_WINC_STATUS_OK - The request was accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_NO_BSS_INFO - There is no current BBS information available ",
							" Remarks This function may be polled after calling WDRV_WINC_BSSFindFirst or WDRV_WINC_BSSFindNext until it returns WDRV_WINC_STATUS_OK ",
							" WDRV_WINC_BSSFindGetNumBSSResults Function ",
							" C uint8_t WDRV_WINC_BSSFindGetNumBSSResults(DRV_HANDLE handle) ",
							" Summary Returns the number of BSS scan results found ",
							" Description Returns the number of BSS scan results found ",
							" Precondition WDRV_WINC_Initialize must have been called WDRV_WINC_Open must have been called to obtain a valid handle WDRV_WINC_BSSFindFirst must have been called to start a scan ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ",
							" Returns Number of BSS scan results available Zero indicates no results or an error occurred ",
							" Remarks None ",
							" WDRV_WINC_BSSFindInProgress Function ",
							" C bool WDRV_WINC_BSSFindInProgress(DRV_HANDLE handle) ",
							" Summary Indicates if a BSS scan is in progress ",
							" Description Returns a flag indicating if a BSS scan operation is currently running ",
							" Precondition WDRV_WINC_Initialize must have been called WDRV_WINC_Open must have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ",
							" Returns Flag indicating if a scan is in progress If an error occurs the result is false ",
							" Remarks None ",
							" WDRV_WINC_BSSFindNext Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_BSSFindNext ( DRV_HANDLE handle WDRV_WINC_BSSFIND_NOTIFY_CALLBACK pfNotifyCallback ) ",
							" Summary Request the next scan results be provided ",
							" Description The information structure of the next BSS is requested from the WINC ",
							" Precondition WDRV_WINC_Initialize must have been called WDRV_WINC_Open must have been called to obtain a valid handle WDRV_WINC_BSSFindFirst must have been called ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pfNotifyCallback Callback to receive notification of next BSS found ",
							" Returns WDRV_WINC_STATUS_OK - The request was accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_SCAN_IN_PROGRESS - A scan is already in progress WDRV_WINC_STATUS_BSS_FIND_END - No more results are available ",
							" Remarks None ",
							" WDRV_WINC_BSSFindReset Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_BSSFindReset ( DRV_HANDLE handle WDRV_WINC_BSSFIND_NOTIFY_CALLBACK pfNotifyCallback ) ",
							" Summary Request the first scan results again ",
							" Description The information structure of the first BSS is requested from the WINC ",
							" Precondition WDRV_WINC_Initialize must have been called WDRV_WINC_Open must have been called to obtain a valid handle WDRV_WINC_BSSFindFirst must have been called ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pfNotifyCallback Callback to receive notification of next BSS found ",
							" Returns WDRV_WINC_STATUS_OK - The request was accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_SCAN_IN_PROGRESS - A scan is already in progress WDRV_WINC_STATUS_BSS_FIND_END - No more results are available ",
							" Remarks None ",
							" WDRV_WINC_BSSFindSetEnabledChannels Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_BSSFindSetEnabledChannels ( DRV_HANDLE handle WDRV_WINC_CHANNEL_MASK channelMask ) ",
							" Summary Configures the channels which can be scanned ",
							" Description To comply with regulatory domains certain channels must not be scanned This function configures which channels are enabled to be used ",
							" Precondition WDRV_WINC_Initialize must have been called WDRV_WINC_Open must have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open channelMask A channel mask detailing all the enabled channels ",
							" Returns WDRV_WINC_STATUS_OK - The request was accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The WINC was unable to accept this request ",
							" Remarks None ",
							" WDRV_WINC_BSSFindSetRSSIThreshold Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_BSSFindSetRSSIThreshold ( DRV_HANDLE handle int8_t rssiThreshold ) ",
							" Summary Configures the scan RSSI threshold ",
							" Description The RSSI threshold required for reconnection to an AP without scanning all channels first ",
							" Precondition WDRV_WINC_Initialize must have been called WDRV_WINC_Open must have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open rssiThreshold Minimum RSSI for detection ",
							" Returns WDRV_WINC_STATUS_OK - The request was accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_WINC_BSSFindSetScanMatchMode Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_BSSFindSetScanMatchMode ( DRV_HANDLE handle WDRV_WINC_SCAN_MATCH_MODE matchMode ) ",
							" Summary Configures the scan matching mode ",
							" Description This function configures the matching mode either stop on first or match all used when scanning for SSIDs ",
							" Precondition WDRV_WINC_Initialize must have been called WDRV_WINC_Open must have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open matchMode Required scan matching mode ",
							" Returns WDRV_WINC_STATUS_OK - The request was accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The WINC was unable to accept this request ",
							" Remarks None ",
							" WDRV_WINC_BSSFindSetScanParameters Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_BSSFindSetScanParameters ( DRV_HANDLE handle uint8_t numSlots uint8_t activeSlotTime uint8_t passiveSlotTime uint8_t numProbes ) ",
							" Summary Configures the scan operation ",
							" Description The scan consists of a number of slots per channel each slot can has a configurable time period and number of probe requests to send ",
							" Precondition WDRV_WINC_Initialize must have been called WDRV_WINC_Open must have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open numSlots Number if slots (minimum is 2) activeSlotTime Time waiting for responses (10ms = slotTime = 250ms) for active scans passiveSlotTime Time waiting for responses (10ms = slotTime = 1200ms) for passive scans numProbes Number of probes per slot ",
							" Returns WDRV_WINC_STATUS_OK - The request was accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks If any parameter is zero then the configured value is unchanged ",
							" Authentication BSS HTTP provisioning This topic provides information how contexts are used To simplify other interfaces and encapsulate information the WINC Driver uses context structures in various places to pass around information Interface functions are provided to create query and update these contexts as appropriate for their function Authentication Contexts The authentication context contains information relevant to the authentication mechanisms used in Wi-Fi Currently supported are Open WEP and WPA-PSK The structure WDRV_WINC_AUTH_CONTEXT is provided to contain the context To initialize a context the function WDRV_WINC_AuthCtxSetDefaults is provided this ensures the context is in a known state The function WDRV_WINC_AuthCtxIsValid is provided to test if a context is valid Each authentication type has at least one function which can be used to configure the type of authentication algorithm used as well as the parameters which are required BSS Contexts The BSS context contains information relevant to a BSS such as SSID and channel The structure WDRV_WINC_BSS_CONTEXT is provided to contain the context To initialize a context the function WDRV_WINC_BSSCtxSetDefaults is provided this ensures the context is in a known state The function WDRV_WINC_BSSCtxIsValid is provided to test if a context is valid In some applications a BSS context is valid even if an SSID is blank therefore this function can be informed whether a blank SSID is valid or not The SSID of the BSS can be configured using the function WDRV_WINC_BSSCtxSetSSID The channel of the BSS can be configure using the function WDRV_WINC_BSSCtxSetChannel In some applications a BSS can be cloaked therefore the state can be configured in a BSS context using the function WDRV_WINC_BSSCtxSetSSIDVisibility to indicate if an BSS is considered visible or not HTTP Provisioning Contexts The HTTP Provisioning Context contains information relevant to a provisioning Soft-AP The structure WDRV_WINC_HTTP_PROV_CONTEXT is provided to contain the context To initialize a context the function WDRV_WINC_HTTPProvCtxSetDefaults is provided this ensures the context is in a known state The domain name of the provisioning HTTP server is configured using the function WDRV_WINC_HTTPProvCtxSetDomainName A provisioning HTTP server can perform wildcard DNS mapping to force a HTTP client to connect irrespective of the URL used to configure this option the function WDRV_WINC_HTTPProvCtxSetURLWildcard is provided A callback for the provisioning service can be configure using the function WDRV_WINC_HTTPProvCtxSetConnectCallback ",
							" WDRV_WINC_AuthCtxIsValid Function ",
							" C bool WDRV_WINC_AuthCtxIsValid(const WDRV_WINC_AUTH_CONTEXT *const pAuthCtx) ",
							" Summary Tests if an authentication context is valid ",
							" Description Tests the elements of the authentication context to judge if their values are legal ",
							" Precondition None ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context ",
							" Returns true or false indicating if context is valid ",
							" Remarks None ",
							" WDRV_WINC_AuthCtxSetDefaults Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_AuthCtxSetDefaults ( WDRV_WINC_AUTH_CONTEXT *const pAuthCtx ) ",
							" Summary Configures an authentication context into a default state ",
							" Description Ensures that each element of the structure is configured into a default state ",
							" Precondition None ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context ",
							" Returns WDRV_WINC_STATUS_OK - The context has been configured WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks A default context is not valid until it is configured ",
							" WDRV_WINC_AuthCtxSetOpen Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_AuthCtxSetOpen ( WDRV_WINC_AUTH_CONTEXT *const pAuthCtx ) ",
							" Summary Configure an authentication context for Open authentication ",
							" Description The type and state information are configured appropriately for Open authentication ",
							" Precondition None ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context ",
							" Returns WDRV_WINC_STATUS_OK - The context has been configured WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_WINC_AuthCtxSetWEP Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_AuthCtxSetWEP ( WDRV_WINC_AUTH_CONTEXT *const pAuthCtx uint8_t idx uint8_t *pKey uint8_t size ) ",
							" Summary Configure an authentication context for WEP authentication ",
							" Description The auth type and information are configured appropriately for WEP authentication ",
							" Precondition None ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context idx WEP index pKey Pointer to WEP key size Size of WEP key ",
							" Returns WDRV_WINC_STATUS_OK - The context has been configured WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_WINC_AuthCtxSetWPA Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_AuthCtxSetWPA ( WDRV_WINC_AUTH_CONTEXT *const pAuthCtx uint8_t *const pPSK uint8_t size ) ",
							" Summary Configure an authentication context for WPA-PSK authentication ",
							" Description The type and state information are configured appropriately for WPA-PSK authentication ",
							" Precondition None ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context pPSK Pointer to WPA-PSK key size Size of WPA-PSK key ",
							" Returns WDRV_WINC_STATUS_OK - The context has been configured WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_WINC_AuthCtxSetWPAEnterpriseMSCHAPv2 Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_AuthCtxSetWPAEnterpriseMSCHAPv2 ( WDRV_WINC_AUTH_CONTEXT *const pAuthCtx const char *const pUserDomain const uint8_t *const pPassword const uint16_t passwordLength const bool visibleUserName ) ",
							" Summary Configure an authentication context for WPA(2)-Enterprise authentication using MS-CHAPv2 ",
							" Description The type and state information are configured appropriately for WPA-Enterprise authentication ",
							" Precondition None ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context pUserDomain Pointer to user and domain name pPassword Pointer to password passwordLength Length of password visibleUserName Flag indicating if usernames should be visible in initial EAP exchanges ",
							" Returns WDRV_WINC_STATUS_OK - The context has been configured WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_WINC_AuthCtxSetWPAEnterpriseTLS Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_AuthCtxSetWPAEnterpriseTLS ( WDRV_WINC_AUTH_CONTEXT *const pAuthCtx const char *const pUserDomain const uint8_t *const pPrivateKey const uint16_t privateKeyLength const uint8_t *const pCert const uint16_t certLength const bool visibleUserName ) ",
							" Summary Configure an authentication context for WPA(2)-Enterprise authentication using TLS ",
							" Description The type and state information are configured appropriately for WPA-Enterprise authentication ",
							" Precondition None ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context pUserDomain Pointer to user and domain name pPrivateKey Pointer to RSA private key in DER binary format privateKeyLength Length of RSA private key pCert Pointer to RSA certificate in DER binary format certLength Length of RSA certificate visibleUserName Flag indicating if usernames should be visible in initial EAP exchanges ",
							" Returns WDRV_WINC_STATUS_OK - The context has been configured WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_WINC_HTTP_PROV_CONTEXT Struct ",
							" C typedef struct { /* Flag indicating if any URL is mapped to the provisioning server */ bool wildcardURL; /* Domain name of provisioning server */ char domainName[64+1]; /* Pointer to callback to signal provisioning information */ WDRV_WINC_HTTPPROV_INFO_CALLBACK pfProvConnectInfoCB; } WDRV_WINC_HTTP_PROV_CONTEXT; ",
							" Summary HTTP provisioning context definition ",
							" Description This structure contains the provisioning information needed when creating a Soft-AP via WDRV_WINC_APStart ",
							" Remarks None ",
							" WDRV_WINC_HTTPPROV_INFO_CALLBACK Typedef ",
							" C typedef void (*WDRV_WINC_HTTPPROV_INFO_CALLBACK) ",
							" Summary HTTP provisioning callback for connect information ",
							" Description This callback is used to signal the desired SSID and authentication contexts selected via provisioning ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pSSID Pointer to selected SSID pAuthCtx Pointer to selected authentication context provisioned Flag indicating provision success ",
							" Returns None ",
							" Remarks None ",
							" WDRV_WINC_HTTPProvCtxSetConnectCallback Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_HTTPProvCtxSetConnectCallback ( WDRV_WINC_HTTP_PROV_CONTEXT *const pHTTPProvCtx const WDRV_WINC_HTTPPROV_INFO_CALLBACK pfProvConnectInfoCB ) ",
							" Summary Defines the connection information callback ",
							" Description Associates the function provided with the provisioning context The callback will be used once the client has provided credentials to be used ",
							" Precondition WDRV_WINC_HTTPProvCtxSetDefaults must have been called ",
							" Parameters Param Description pHTTPProvCtx Pointer to provisioning store structure pfProvConnectInfoCB Function pointer for callback function ",
							" Returns WDRV_WINC_STATUS_OK - The callback is set WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_WINC_HTTPProvCtxSetDefaults Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_HTTPProvCtxSetDefaults ( WDRV_WINC_HTTP_PROV_CONTEXT *const pHTTPProvCtx ) ",
							" Summary Initialize provisioning store ",
							" Description Ensure the provisioning store is initialized to appropriate defaults ",
							" Precondition None ",
							" Parameters Param Description pHTTPProvCtx Pointer to provisioning store structure ",
							" Returns WDRV_WINC_STATUS_OK - Store initialized WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_WINC_HTTPProvCtxSetDomainName Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_HTTPProvCtxSetDomainName ( WDRV_WINC_HTTP_PROV_CONTEXT *const pHTTPProvCtx const char *const pname ) ",
							" Summary Define the DNS domain name for the provisioning server ",
							" Description This defines the DNS domain name associated with the Soft-AP instance web server ",
							" Precondition WDRV_WINC_HTTPProvCtxSetDefaults must have been called ",
							" Parameters Param Description pHTTPProvCtx Pointer to provisioning store structure pname Pointer to domain name string ",
							" Returns WDRV_WINC_STATUS_OK - The domain name is set WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_WINC_HTTPProvCtxSetURLWildcard Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_HTTPProvCtxSetURLWildcard ( WDRV_WINC_HTTP_PROV_CONTEXT *const pHTTPProvCtx bool wildcardURL ) ",
							" Summary Define the use of a wildcard URL check ",
							" Description Indicates if the Soft-AP should map all DNS domain names to the server to capture the clients device ",
							" Precondition WDRV_WINC_HTTPProvCtxSetDefaults must have been called ",
							" Parameters Param Description pHTTPProvCtx Pointer to provisioning store structure ",
							" Returns WDRV_WINC_STATUS_OK - The flag is set WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" Client Interaction This topic provides information on general client operation General Client Operation For the application to begin using an instance of the WINC module it must call the WDRV_WINC_Open function This provides the configuration required to open the WINC instance for operation The function WDRV_WINC_Close closes an already opened instance of the WINC Driver invalidating the handle WDRV_WINC_Open must have been called to obtain a valid opened device handle ",
							" WDRV_WINC_Close Function ",
							" C void WDRV_WINC_Close(DRV_HANDLE handle) ",
							" Summary Closes an instance of the WINC driver ",
							" Description This is the function that closes an instance of the MAC All per client data is released and the handle can no longer be used after this function is called ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ",
							" Returns None ",
							" Remarks None ",
							" WDRV_WINC_Open Function ",
							" C DRV_HANDLE WDRV_WINC_Open(const SYS_MODULE_INDEX index const DRV_IO_INTENT intent) ",
							" Summary Opens an instance of the WINC driver ",
							" Description Opens an instance of the WINC driver and returns a handle which must be used when calling other driver functions ",
							" Precondition WDRV_WINC_Initialize should have been called ",
							" Parameters Param Description index Identifier for the driver instance to be opened intent Zero or more of the values from the enumeration DRV_IO_INTENT ORed together to indicate the intended use of the driver ",
							" Returns - Valid handle - if the open function succeeded - DRV_HANDLE_INVALID - if an error occurs ",
							" Remarks The index and intent parameters are not used in the current implementation and are maintained only for compatibility with the generic driver Open function signature ",
							" Network Sockets and IP This topic provides information on how to use the built in TCP/IP stack of the WINC devices When operating in Socket mode the WINC devices run a small TCP/IP stack to offload the work from the host MCU This stack is and IPv4 based stack support TCP and UDP sockets with limited DHCP DNS and NTP support The WINC Driver provides interface functions to query and control the stack as well as a Berkeley-like socket interface using functions more familiar to developers such as socket connect send and recv In addition to stack specified interface function this module also provides some functions for functionality which is only available when the WINC device is operating in Socket mode such as OTA ICMP Echo Request For link check the stack provides a simple ICMP Echo Request client Using the function WDRV_WINC_ICMPEchoRequest the application can send an ICMP ‘Ping’ packet to a destination IP address A callback can be provided which will be notified of any response or error Dynamic IP Address Allocation When operating as a Wi-Fi station device the WINC will perform a DHCP Request once connected The application can use the function WDRV_WINC_IPUseDHCPSet to enable dynamic address requests and provide a callback function to receive DHCP events Although the default mode of operation is to have DHCP enabled this function should still be called to register the callback if required To determine if the WINC is currently using DHCP to manage its IP address the application can call the function WDRV_WINC_IPUseDHCPGet Enabling dynamic address behavior must be done before connecting to a BSS Static IP Address Allocation The application may set the IP address of the WINC device when operating as a Wi-Fi station Calling the function WDRV_WINC_IPAddressSet configures the IP address and netmask to be used by the WINC device To determine if the WINC is currently using a static IP address the application can call the function WDRV_WINC_IPAddressGet In addition to the IP address and netmask the application should also set the DNS server address using the function WDRV_WINC_IPDNSServerAddressSet and the default gateway using the function WDRV_WINC_IPDefaultGatewaySet Enabling static address behavior must be done before connecting to a BSS Link Check The function WDRV_WINC_IPLinkActive can be used to determine if the IP stack is operational For dynamic IP address allocation this is true only once and IP address has been received from the DHCP server For static IP address this is true once the station is connected to the BSS Soft AP DHCP Server When operating as a Soft-AP device the WINC device can be configured to serve IP addresses from a pool The DHCP server address of the WINC device is configurable using the function WDRV_WINC_IPDHCPServerConfigure Socket Event and Resolver Callbacks Once connected and socket event which occurs is reported back to the application via the Socket Event Callback this can be registered with the WINC driver using the function WDRV_WINC_SocketRegisterEventCallback Any DNS request made by the WINC device will result in a response which will be provided to the application via the Resolver Callback which can be registered with the WINC drier using the function WDRV_WINC_SocketRegisterResolverCallback OTA The built-in OTA operation of the WINC device can request an OTA image from a HTTP URL To request an OTA attempt the application can use the function WDRV_WINC_OTAUpdateFromURL a callback can be provided to receive updates on the progress of the update If the application wishes to abort the update operation it can do so by calling the function WDRV_WINC_OTAUpdateAbort Once received and validated the new OTA image can be activated by the function WDRV_WINC_SwitchActiveFirmwareImage ",
							" WDRV_WINC_ICMP_ECHO_RSP_EVENT_HANDLER Typedef ",
							" C typedef void (*WDRV_WINC_ICMP_ECHO_RSP_EVENT_HANDLER) ",
							" Summary Pointer to an ICMP echo response event handler function ",
							" Description This data type defines a function event handler which is called in response to an ICMP echo request response event ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ipAddress IPv4 address rtt The round-trip time statusCode Status code ",
							" Returns None ",
							" Remarks Only supported with the socket mode WINC driver The status code indicates if the ICMP echo request was successful or not It may take the form of either: PING_ERR_SUCCESS - The request was successful PING_ERR_DEST_UNREACH - The destination was unreachable PING_ERR_TIMEOUT - The request timed out ",
							" WDRV_WINC_ICMP_ECHO_STATUS Enum ",
							" C typedef enum { /* The operation completed successfully */ WDRV_WINC_ICMP_ECHO_STATUS_SUCCESS = 0 /* ICMP destination unreachable */ WDRV_WINC_ICMP_ECHO_STATUS_UNREACH = 1 /* The operation timed out */ WDRV_WINC_ICMP_ECHO_STATUS_TIMEOUT = 2 } WDRV_WINC_ICMP_ECHO_STATUS; ",
							" Summary Defines the ICMP echo status codes ",
							" Description This enumeration defines the ICMP status supplied by the ICMP echo response callback ",
							" Remarks This is only defined for use with the WINC in socket mode ",
							" WDRV_WINC_ICMPEchoRequest Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_ICMPEchoRequest ( DRV_HANDLE handle uint32_t ipAddress uint8_t ttl const WDRV_WINC_ICMP_ECHO_RSP_EVENT_HANDLER pfICMPEchoResponseCB ) ",
							" Summary Sends an ICMP echo request ",
							" Description Sends an ICMP echo request packet to the IP specified ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle The WINC must not be connected ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ipAddress IPv4 address ttl The Time-to-live value pfICMPEchoResponseCB Callback for ICMP address events ",
							" Returns WDRV_WINC_STATUS_OK - The request has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks None ",
							" WDRV_WINC_IPAddressGet Function ",
							" C uint32_t WDRV_WINC_IPAddressGet(DRV_HANDLE handle) ",
							" Summary Returns the current IPv4 address ",
							" Description Returns the current IPv4 address if configured ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ",
							" Returns IP address or zero for an error conditions ",
							" Remarks The top 8 bits of the IPv4 32 bit representation corresponds to the last byte of the IPv4 address i e 192 168 0 1 = 0x0100A8C0 ",
							" WDRV_WINC_IPAddressSet Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_IPAddressSet ( DRV_HANDLE handle uint32_t ipAddress uint32_t netMask ) ",
							" Summary Configures an IPv4 address ",
							" Description Disables DHCP on the WINC and assigns a static IPv4 address The address isn't applied to the WINC until a connection is formed ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle The WINC must not be connected ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ipAddress IPv4 address netMask IPv4 netmask ",
							" Returns WDRV_WINC_STATUS_OK - The address has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks Only applicable when connected in infrastructure station mode The top 8 bits of the IPv4 32 bit representation corresponds to the last byte of the IPv4 address i e 192 168 0 1 = 0x0100A8C0 ",
							" WDRV_WINC_IPDefaultGatewaySet Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_IPDefaultGatewaySet ( DRV_HANDLE handle uint32_t gatewayAddress ) ",
							" Summary Configures the default gateway used by the WINC ",
							" Description Disables DHCP on the WINC and assigns a static default gateway address The address isn't applied to the WINC until a connection is formed ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle The WINC must not be connected ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open gatewayAddress IPv4 address of default gateway ",
							" Returns WDRV_WINC_STATUS_OK - The address has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks Only applicable when connected in infrastructure station mode The top 8 bits of the IPv4 32 bit representation corresponds to the last byte of the IPv4 address i e 192 168 0 1 = 0x0100A8C0 ",
							" WDRV_WINC_IPDHCPServerConfigure Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_IPDHCPServerConfigure ( DRV_HANDLE handle uint32_t ipAddress uint32_t netMask WDRV_WINC_DHCP_ADDRESS_EVENT_HANDLER const pfDHCPAddressEventCallback ) ",
							" Summary Configures the Soft-AP DHCP server ",
							" Description Configures the IPv4 address and callback for the DHCP server ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle The WINC must not be connected ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ipAddress IPv4 address netMask IPv4 netmask pfDHCPAddressEventCallback Callback for DHCP address events ",
							" Returns WDRV_WINC_STATUS_OK - The request has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks Only applicable when connected in Soft-AP mode Parameter netMask is only applicable for WINC drivers supporting the extended Soft-AP API m2m_wifi_enable_ap_ext and m2m_wifi_start_provision_mode_ext ",
							" WDRV_WINC_IPDNSServerAddressSet Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_IPDNSServerAddressSet ( DRV_HANDLE handle uint32_t dnsServerAddress ) ",
							" Summary Configures the DNS server address ",
							" Description Disables DHCP on the WINC and assigns a static DNS address The address isn't applied to the WINC until a connection is formed ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle The WINC must not be connected ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open dnsServerAddress IPv4 address of DNS server ",
							" Returns WDRV_WINC_STATUS_OK - The address has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks Only applicable when connected in infrastructure station mode The top 8 bits of the IPv4 32 bit representation corresponds to the last byte of the IPv4 address i e 192 168 0 1 = 0x0100A8C0 ",
							" WDRV_WINC_IPLinkActive Function ",
							" C bool WDRV_WINC_IPLinkActive(DRV_HANDLE handle) ",
							" Summary Indicates state of IP link ",
							" Description Returns a flag indicating if the IP link is active or not ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ",
							" Returns Flag indicating IP link active state (true/false) ",
							" Remarks None ",
							" WDRV_WINC_IPUseDHCPGet Function ",
							" C bool WDRV_WINC_IPUseDHCPGet(DRV_HANDLE handle) ",
							" Summary Determine if DHCP is to be used ",
							" Description Determines if the WINC will use DHCP for IP address configuration ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle The WINC must not be connected ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ",
							" Returns Flag indicating if DHCP will be used ",
							" Remarks Only applicable when connected in infrastructure station mode ",
							" WDRV_WINC_IPUseDHCPSet Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_IPUseDHCPSet ( DRV_HANDLE handle const WDRV_WINC_DHCP_ADDRESS_EVENT_HANDLER pfDHCPAddressEventCallback ) ",
							" Summary Enables DHCP ",
							" Description Enables the use of DHCP by the WINC This removes any static IP configuration The use of DHCP isn't applied to the WINC until a connection is formed ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle The WINC must not be connected ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pfDHCPAddressEventCallback Callback for DHCP address events ",
							" Returns WDRV_WINC_STATUS_OK - The request has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks Only applicable when connected in infrastructure station mode ",
							" WDRV_WINC_SocketRegisterEventCallback Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_SocketRegisterEventCallback ( DRV_HANDLE handle tpfAppSocketCb pfAppSocketCb ) ",
							" Summary Register an event callback for socket events ",
							" Description Socket events are dispatched to the application via this callback ",
							" Precondition None ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pfAppSocketCb Function pointer to event callback handler ",
							" Returns WDRV_WINC_STATUS_OK - Callback registered WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_WINC_SocketRegisterResolverCallback Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_SocketRegisterResolverCallback ( DRV_HANDLE handle tpfAppResolveCb pfAppResolveCb ) ",
							" Summary Register an event callback for DNS resolver events ",
							" Description DNS resolver events are dispatched to the application via this callback ",
							" Precondition None ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pfAppResolveCb Function pointer to event callback handler ",
							" Returns WDRV_WINC_STATUS_OK - Callback registered WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" NVM Access This topic provides information on how the SPI flash within the WINC device can be read written and erased The WINC device contains a SPI flash device within which firmware and data are stored It is sometime applicable for the application to update or query a specific area within the flash This interface allows the application to query and update the NVM flash The flash can only be access through this interface if the WINC device has been placed into a held state such that the WINC firmware is not accessing the flash Flexible Flash Map How the flash is arranged is called the flash map Depending on which WINC device firmware and application is being run this map may be altered from the default map therefore the application should avoid any access which assumes fixed locations for entries within the flash To support the application the NVM access interface must be called with a specified region this region identifies which area within the flash the application is interacting with All addresses supplied to the NVM interface are relative to the start of the region specified therefore except for raw access the addresses are not physical addresses within the flash area Region Description WDRV_WINC_NVM_REGION_RAW The entire flash area WDRV_WINC_NVM_REGION_FIRMWARE_ACTIVE WINC firmware (active) WDRV_WINC_NVM_REGION_FIRMWARE_INACTIVE WINC firmware (inactive) WDRV_WINC_NVM_REGION_PLL_TABLE PLL table values (cannot be erased use combined region below) WDRV_WINC_NVM_REGION_GAIN_TABLE Gain table values (cannot be erased use combined region below) WDRV_WINC_NVM_REGION_PLL_AND_GAIN_TABLES Combined PLL and gain table WDRV_WINC_NVM_REGION_ROOT_CERTS Root certificates WDRV_WINC_NVM_REGION_LOCAL_CERTS Local TLS certificates WDRV_WINC_NVM_REGION_CONN_PARAM Connection parameters WDRV_WINC_NVM_REGION_HTTP_FILES HTTP server files WDRV_WINC_NVM_REGION_HOST_FILE Host file download area Enabling Access To enable access to the flash from the application the WINC must be placed into a held state The application must call WDRV_WINC_Open with the DRV_IO_INTENT_EXCLUSIVE intent to ensure the WINC firmware is not running Erase Sectors To erase a sector with a region the function WDRV_WINC_NVMEraseSector can be called specifying the starting sector within the region to start the erase operation on and the number of sectors to erase Read Data To read a block of data the application can call WDRV_WINC_NVMRead specifying the offset address within the region and the number of bytes to be read Write Data To write a block of data the application can call WDRV_WINC_NVMWrite specifying the offset address within the region and the number of bytes to be written ",
							" WDRV_WINC_NVM_REGION Enum ",
							" C typedef enum { /* Access to the entire flash address space */ WDRV_WINC_NVM_REGION_RAW /* Access to the firmware region (active image) */ WDRV_WINC_NVM_REGION_FIRMWARE_ACTIVE /* Access to the firmware region (inactive image) */ WDRV_WINC_NVM_REGION_FIRMWARE_INACTIVE /* Access to PLL table region */ WDRV_WINC_NVM_REGION_PLL_TABLE /* Access to gain table region */ WDRV_WINC_NVM_REGION_GAIN_TABLE /* Access to PLL and gain tables region */ WDRV_WINC_NVM_REGION_PLL_AND_GAIN_TABLES /* Access to root certificate region */ WDRV_WINC_NVM_REGION_ROOT_CERTS /* Access to TLS local certificate region */ WDRV_WINC_NVM_REGION_LOCAL_CERTS /* Access to connection parameters region */ WDRV_WINC_NVM_REGION_CONN_PARAM /* Access to HTTP files region */ WDRV_WINC_NVM_REGION_HTTP_FILES /* Access to host download region */ WDRV_WINC_NVM_REGION_HOST_FILE /* Number of regions */ NUM_WDRV_WINC_NVM_REGIONS } WDRV_WINC_NVM_REGION; ",
							" Summary Defines the available NVM regions ",
							" Description This enumeration defines the possible NVM regions which can be manipulated using this interface The WDRV_WINC_NVM_REGION_RAW can be used to access the entire flash ",
							" Remarks None ",
							" WDRV_WINC_NVMEraseSector Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_NVMEraseSector ( DRV_HANDLE handle WDRV_WINC_NVM_REGION region uint8_t startSector uint8_t numSectors ); ",
							" Summary Erase a sector within an NVM region ",
							" Description Erases a number of sectors which exist within the requested region ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called with the intent DRV_IO_INTENT_EXCLUSIVE to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open region Region of NVM to erase startSector Sector offset within region to erase numSectors Number of sectors to erase ",
							" Returns WDRV_WINC_STATUS_OK - The erase completed successfully WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request encountered an error ",
							" Remarks The WINC driver must have been opened for exclusive access to the flash to ensure the WINC firmware is not operating when manipulating the SPI flash ",
							" WDRV_WINC_NVMRead Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_NVMRead ( DRV_HANDLE handle WDRV_WINC_NVM_REGION region void *pBuffer uint32_t offset uint32_t size ); ",
							" Summary Reads data from an NVM region ",
							" Description Reads the number of bytes specified from the NVM region ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called with the intent DRV_IO_INTENT_EXCLUSIVE to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open region Region of NVM to read pBuffer Pointer to buffer to write the data read into offset Offset within NVM region to read the data from size Number of bytes to be read ",
							" Returns WDRV_WINC_STATUS_OK - The read completed successfully WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request encountered an error ",
							" Remarks The WINC driver must have been opened for exclusive access to the flash to ensure the WINC firmware is not operating when manipulating the SPI flash ",
							" WDRV_WINC_NVMWrite Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_NVMWrite ( DRV_HANDLE handle WDRV_WINC_NVM_REGION region void *pBuffer uint32_t offset uint32_t size ); ",
							" Summary Writes data to an NVM region ",
							" Description Writes the number of bytes specified to the NVM region ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called with the intent DRV_IO_INTENT_EXCLUSIVE to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open region Region of NVM to write pBuffer Pointer to buffer containing the data to write offset Offset within NVM region to write the data to size Number of bytes to be written ",
							" Returns WDRV_WINC_STATUS_OK - The write completed successfully WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request encountered an error ",
							" Remarks The WINC driver must have been opened for exclusive access to the flash to ensure the WINC firmware is not operating when manipulating the SPI flash The write operation does not erase the flash device first therefore the user must ensure the flash region has been erased first ",
							" Power Save Control This topic provides information on how to control the power save modes of the WINC devices The application can set and get the current power save mode of the WINC device using the functions WDRV_WINC_PowerSaveSetMode and WDRV_WINC_PowerSaveGetMode Some power save modes ensure the WINC device is available to monitor beacons from its BSS The interval of monitoring can be set through the function WDRV_WINC_PowerSaveSetBeaconInterval Note: WDRV_WINC_PowerSaveSetMode should be called after WDRV_WINC_PowerSaveSetBeaconInterval to ensure the WINC device is fully configure for its chosen power save mode ",
							" WDRV_WINC_PowerSaveGetMode Function ",
							" C WDRV_WINC_PS_MODE WDRV_WINC_PowerSaveGetMode(DRV_HANDLE handle) ",
							" Summary Returns the current power save mode ",
							" Description Returns to the caller the current power save mode in use by the WINC ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ",
							" Returns WDRV_WINC_PS_MODE_INVALID - An error occurred Other WDRV_WINC_PS_MODE value - Current power save mode ",
							" Remarks None ",
							" WDRV_WINC_PowerSaveManualSleep Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_PowerSaveManualSleep ( DRV_HANDLE handle uint32_t sleepTime ) ",
							" Summary Manual sleep power save operation ",
							" Description If the current power save mode is WDRV_WINC_PS_MODE_MANUAL the WINC can be placed into low power mode by requesting sleep ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle Power save mode must be WDRV_WINC_PS_MODE_MANUAL ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open sleepTime Sleep period specified in milli-seconds ",
							" Returns WDRV_WINC_STATUS_OK - The request has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks None ",
							" WDRV_WINC_PowerSaveSetBeaconInterval Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_PowerSaveSetBeaconInterval ( DRV_HANDLE handle uint16_t numBeaconIntervals ) ",
							" Summary Configures the beacon listening interval ",
							" Description The beacon listening interval specifies how many beacon period will occur between listening actions when the WINC is in low power mode ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open numBeaconIntervals Number of beacon intervals between listening operations ",
							" Returns WDRV_WINC_STATUS_OK - The interval has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks None ",
							" WDRV_WINC_PowerSaveSetMode Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_PowerSaveSetMode ( DRV_HANDLE handle WDRV_WINC_PS_MODE mode ) ",
							" Summary Sets the power save mode ",
							" Description Selects the current power save mode the WINC should be using ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open mode Desired new power save mode ",
							" Returns WDRV_WINC_STATUS_OK - The power save mode has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks None ",
							" WDRV_WINC_PS_MODE Enum ",
							" C typedef enum { /* Invalid mode */ WDRV_WINC_PS_MODE_INVALID = /* Power save is off */ WDRV_WINC_PS_MODE_OFF = /* Automatic control of power save */ WDRV_WINC_PS_MODE_AUTO_HIGH_POWER = /* Automatic control of power save */ WDRV_WINC_PS_MODE_AUTO_MED_POWER = /* Automatic control of power save */ WDRV_WINC_PS_MODE_AUTO_LOW_POWER = /* Manual control of power save */ WDRV_WINC_PS_MODE_MANUAL = } WDRV_WINC_PS_MODE; ",
							" Summary Defines the power save modes ",
							" Description These mode describe possible power states ",
							" Remarks None ",
							" Setup Initialization This topic provides information on setup/initialization The system performs the initialization of the device driver with settings that affect only the instance of the device that is being initialized The WDRV_WINC_Initialize function returns an object handle of the type SYS_MODULE_OBJ After this the object handle returned by the Initialize interface would be used by the other system interfaces such as WDRV_WINC_Deinitialize WDRV_WINC_Reinitialize WDRV_WINC_Status and WDRV_WINC_Tasks ",
							" WDRV_WINC_Deinitialize Function ",
							" C void WDRV_WINC_Deinitialize(SYS_MODULE_OBJ object) ",
							" Summary WINC driver deinitialization function ",
							" Description This is the function that deinitializes the WINC It is called by the system ",
							" Precondition WDRV_WINC_Initialize should have been called ",
							" Parameters Param Description object Driver object handle returned from WDRV_WINC_Initialize ",
							" Returns None ",
							" Remarks None ",
							" WDRV_WINC_Initialize Function ",
							" C SYS_MODULE_OBJ WDRV_WINC_Initialize ( const SYS_MODULE_INDEX index const SYS_MODULE_INIT *const init ) ",
							" Summary System interface initialization of the WINC driver ",
							" Description This is the function that initializes the WINC driver It is called by the system ",
							" Precondition None ",
							" Parameters Param Description index Index for the WINC driver instance to be initialized init Pointer to initialization data currently not used ",
							" Returns Valid handle to a driver object - if successful SYS_MODULE_OBJ_INVALID - if initialization failed ",
							" Remarks The returned object must be passed as argument to WDRV_WINC_Reinitialize WDRV_WINC_Deinitialize WDRV_WINC_Tasks and WDRV_WINC_Status routines ",
							" WDRV_WINC_Reinitialize Function ",
							" C void WDRV_WINC_Reinitialize ( SYS_MODULE_OBJ object const SYS_MODULE_INIT *const init ) ",
							" Summary WINC driver reinitialization function ",
							" Description This is the function that re-initializes the WINC It is called by the system ",
							" Precondition WDRV_WINC_Initialize should have been called ",
							" Parameters Param Description object Driver object handle returned from WDRV_WINC_Initialize init Pointer to initialization data currently not used ",
							" Returns None ",
							" Remarks None ",
							" WDRV_WINC_Status Function ",
							" C SYS_STATUS WDRV_WINC_Status(SYS_MODULE_OBJ object) ",
							" Summary Provides the current status of the WINC driver module ",
							" Description This function provides the current status of the WINC driver module ",
							" Precondition WDRV_WINC_Initialize must have been called before calling this function ",
							" Parameters Param Description object Driver object handle returned from WDRV_WINC_Initialize ",
							" Returns SYS_STATUS_READY - Indicates that any previous module operation for the specified module has completed SYS_STATUS_BUSY - Indicates that a previous module operation for the specified module has not yet completed SYS_STATUS_ERROR - Indicates that the specified module is in an error state ",
							" Example SYS_MODULE_OBJ object; // Returned from WDRV_WINC_Initialize SYS_STATUS status; status = WDRV_WINC_Status(object); if (SYS_STATUS_ERROR = status) { // Handle error } ",
							" Remarks Any value greater than SYS_STATUS_READY is also a normal running state in which the driver is ready to accept new operations SYS_STATUS_BUSY - Indicates that the driver is busy with a previous system level operation and cannot start another SYS_STATUS_ERROR - Indicates that the driver is in an error state Any value less than SYS_STATUS_ERROR is also an error state SYS_MODULE_DEINITIALIZED - Indicates that the driver has been deinitialized This operation can be used to determine when any of the driver's module level operations has completed If the status operation returns SYS_STATUS_BUSY then a previous operation has not yet completed Once the status operation returns SYS_STATUS_READY any previous operations have completed The value of SYS_STATUS_ERROR is negative (-1) Any value less than that is also an error state This function will NEVER block waiting for hardware If the Status operation returns an error value the error may be cleared by calling the reinitialize operation If that fails the deinitialize operation will need to be called followed by the initialize operation to return to normal operations ",
							" WDRV_WINC_Tasks Function ",
							" C void WDRV_WINC_Tasks(SYS_MODULE_OBJ object) ",
							" Summary Maintains the WINC drivers state machine ",
							" Description This function is used to maintain the driver's internal state machine ",
							" Precondition WDRV_WINC_Initialize must have been called before calling this function ",
							" Parameters Param Description object Driver object handle returned from WDRV_WINC_Initialize ",
							" Returns None ",
							" Remarks This function is normally not called directly by an application It is called by the system's Tasks routine (SYS_Tasks) ",
							" Soft-AP This topic provides information on how to operate a Soft AP The WINC device can create a Soft-AP allowing a Wi-Fi station device to connect to the WINC There are two forms of Soft-AP which can be created a normal application Soft-AP where any extra functionality beyond the Wi-Fi connection is provided by the application and a provisioning Soft-AP which presents a simple web server allowing a station device to pass BSS credentials to the WINC for future use when acting as a Wi-Fi station device To create a Soft-AP the function WDRV_WINC_APStart is called This function takes several context structures to config aspects of the Soft-AP operation these contexts are: BSS : Describes the BSS which will be created Authentication : Describes the security level to be used HTTP Provisioning : Describes the provisioning service offered by the Soft-AP Only the BSS context is required A callback is also provided to update the application on events To stop using the Soft-AP the function WDRV_WINC_APStop is called Custom IEs Application specific information elements (IEs) can be included in the beacons transmitted by the Soft-AP To use custom IEs the application must create a custom IE store which is then filled with IE data before being given to the WINC device using the function WDRV_WINC_APSetCustIE before starting a Soft-AP instance The function WDRV_WINC_CustIEStoreCtxSetStorage is used to initialize a storage are for constructing the custom IEs Once storage has been allocated custom IEs can be added and removed using WDRV_WINC_CustIEStoreCtxAddIE and WDRV_WINC_CustIEStoreCtxRemoveIE ",
							" WDRV_WINC_APSetCustIE Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_APSetCustIE ( DRV_HANDLE handle const WDRV_WINC_CUST_IE_STORE_CONTEXT *const pCustIECtx ) ",
							" Summary Configures the custom IE ",
							" Description Soft-AP beacons may contain a application provided custom IE This function associates an custom IE store context with the Soft-AP instance ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle WDRV_WINC_APStart must have been called to start an Soft-AP ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pCustIECtx Pointer to custom IE store context ",
							" Returns WDRV_WINC_STATUS_OK - The request has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks None ",
							" WDRV_WINC_APStart Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_APStart ( DRV_HANDLE handle const WDRV_WINC_BSS_CONTEXT *const pBSSCtx const WDRV_WINC_AUTH_CONTEXT *const pAuthCtx const WDRV_WINC_HTTP_PROV_CONTEXT *const pHTTPProvCtx const WDRV_WINC_BSSCON_NOTIFY_CALLBACK pfNotifyCallback ) ",
							" Summary Starts an instance of Soft-AP ",
							" Description Using the defined BSS and authentication contexts with an optional HTTP provisioning context (socket mode only) this function creates and starts a Soft-AP instance ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle A BSS context must have been created and initialized An authentication context must have been created and initialized ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pBSSCtx Pointer to BSS context pAuthCtx Pointer to authentication context pHTTPProvCtx Pointer to HTTP provisioning context (optional) pfNotifyCallback Pointer to notification callback function ",
							" Returns WDRV_WINC_STATUS_OK - The request has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected WDRV_WINC_STATUS_INVALID_CONTEXT - The BSS context is not valid ",
							" Remarks None ",
							" WDRV_WINC_APStop Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_APStop(DRV_HANDLE handle) ",
							" Summary Stops an instance of Soft-AP ",
							" Description Stops an instance of Soft-AP ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ",
							" Returns WDRV_WINC_STATUS_OK - The request has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks None ",
							" WDRV_WINC_CUST_IE Struct ",
							" C typedef struct { /* ID */ uint8_t id; /* Length of data */ uint8_t length; /* Data */ uint8_t data[]; } WDRV_WINC_CUST_IE; ",
							" Summary Defines the format of a custom IE ",
							" Description Custom IEs consist of an ID length and data ",
							" Remarks This definition does not allocate any storage for data ",
							" WDRV_WINC_CUST_IE_STORE_CONTEXT Struct ",
							" C typedef struct { /* Maximum length of the IE store data */ uint8_t maxLength; /* Current length of data in the store */ uint8_t curLength; /* IE data in store */ uint8_t ieData[]; } WDRV_WINC_CUST_IE_STORE_CONTEXT; ",
							" Summary Defines the storage used for holding custom IEs ",
							" Description Custom IEs are past to the Soft-AP via the custom IE store which packages the IEs together ",
							" Remarks None ",
							" WDRV_WINC_CustIEStoreCtxAddIE Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_CustIEStoreCtxAddIE ( WDRV_WINC_CUST_IE_STORE_CONTEXT *const pCustIECtx uint8_t id const uint8_t *const pData uint8_t dataLength ) ",
							" Summary Add data to the custom IE store ",
							" Description The data and ID provided are copied into the custom IE store ",
							" Precondition WDRV_WINC_CustIEStoreCtxSetStorage must have been called ",
							" Parameters Param Description pCustIECtx Pointer to custom IE store id ID of custom IE pData Pointer to data to be stored in the custom IE dataLength Length of data pointed to by pData ",
							" Returns WDRV_WINC_STATUS_OK - The data was added successfully WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_NO_SPACE - The data will not fit into the custom IE store ",
							" Remarks None ",
							" WDRV_WINC_CustIEStoreCtxRemoveIE Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_CustIEStoreCtxRemoveIE ( WDRV_WINC_CUST_IE_STORE_CONTEXT *const pCustIECtx uint8_t id ) ",
							" Summary Removes data from the custom IE store ",
							" Description This function removes a custom IE from the store which matches the ID provided ",
							" Precondition WDRV_WINC_CustIEStoreCtxSetStorage must have been called ",
							" Parameters Param Description pCustIECtx Pointer to custom IE store id ID of custom IE to remove ",
							" Returns WDRV_WINC_STATUS_OK - The data was added successfully WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_WINC_CustIEStoreCtxSetStorage Function ",
							" C WDRV_WINC_CUST_IE_STORE_CONTEXT* WDRV_WINC_CustIEStoreCtxSetStorage ( uint8_t *const pStorage uint16_t lenStorage ) ",
							" Summary Initialize the custom IE store ",
							" Description The caller provides storage for the custom IE store this will be initialized and a pointer provided which can be passed to WDRV_WINC_APSetCustIE after custom IEs are added by WDRV_WINC_CustIEStoreCtxAddIE ",
							" Precondition None ",
							" Parameters Param Description pStorage Pointer to storage to use for custom IE store lenStorage Length of storage pointed to by pStorage ",
							" Returns Pointer to custom IE store or NULL if error occurs ",
							" Remarks lenStorage should be: (2 = lenStorage = 257) If less than 2 then an error will be signalled if more that 257 only 257 bytes will be used ",
							" STA This topic provides information on how the library supports connecting to BSSs as a Wi-Fi station device The WINC device can connect to a BSS as a Wi-Fi station device To connect to a BSS the function WDRV_WINC_BSSConnect can be called this takes two contexts which provide information about the BSS to be connected to and the authentication method to be used A callback is provided to events relating to the connection To disconnect from a BSS the function WDRV_WINC_BSSDisconnect can be called To reconnect to a previous BSS the function WDRV_WINC_BSSReconnect can be called a callback can also be provided to provide the same feedback as the function WDRV_WINC_BSSConnect ",
							" WDRV_WINC_BSSCON_NOTIFY_CALLBACK Typedef ",
							" C typedef void (*WDRV_WINC_BSSCON_NOTIFY_CALLBACK) ",
							" Summary Callback to notify the user of a change in connection state ",
							" Description When the connection state changes this callback enable the driver to signal the user about that event and reason ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open assocHandle Association handle currentState Current connection state errorCode Error code ",
							" Returns None ",
							" Remarks None ",
							" WDRV_WINC_BSSConnect Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_BSSConnect ( DRV_HANDLE handle const WDRV_WINC_BSS_CONTEXT *const pBSSCtx const WDRV_WINC_AUTH_CONTEXT *const pAuthCtx const WDRV_WINC_BSSCON_NOTIFY_CALLBACK pfNotifyCallback ) ",
							" Summary Connects to a BSS in infrastructure station mode ",
							" Description Using the defined BSS and authentication contexts this function requests the WINC connect to the BSS as an infrastructure station ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle A BSS context must have been created and initialized An authentication context must have been created and initialized ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pBSSCtx Pointer to BSS context pAuthCtx Pointer to authentication context pfNotifyCallback Pointer to notification callback function ",
							" Returns WDRV_WINC_STATUS_OK - The request has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected WDRV_WINC_STATUS_INVALID_CONTEXT - The BSS context is not valid WDRV_WINC_STATUS_CONNECT_FAIL - The connection has failed ",
							" Remarks None ",
							" WDRV_WINC_BSSDisconnect Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_BSSDisconnect(DRV_HANDLE handle) ",
							" Summary Disconnects from a BSS ",
							" Description Disconnects from an existing BSS ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ",
							" Returns WDRV_WINC_STATUS_OK - The request has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_DISCONNECT_FAIL - The disconnection has failed WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks None ",
							" WDRV_WINC_BSSReconnect Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_BSSReconnect ( DRV_HANDLE handle WDRV_WINC_BSSCON_NOTIFY_CALLBACK pfNotifyCallback ) ",
							" Summary Reconnects to a BSS using stored credentials ",
							" Description Reconnects to the previous BSS using credentials stored from last time ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle WDRV_WINC_BSSConnect must have previously been called to establish connection ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pfNotifyCallback Pointer to notification callback function ",
							" Returns WDRV_WINC_STATUS_OK - The request has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected WDRV_WINC_STATUS_CONNECT_FAIL - The connection has failed ",
							" Remarks None ",
							" SSL/TLS Control This topic provides information on how to configure the SSL/TLS sessions Internally the WINC devices are configured to establish TLS sessions using a typical set of cipher suites If the application wishes to alter that set this interface can be used The cipher suites are managed using a Cipher Suite context which the application can manipulate before sending to the WINC device The default cipher suites can be obtained by calling the function WDRV_WINC_SSLCTXDefault to initialize a Cipher Suite Context with the default ciphers The application can query and configure the cipher suites using lists of IANA identifiers for each cipher suite To retrieve the current list of ID the application can use the function WDRV_WINC_SSLCTXCipherSuitesGet To import a list of cipher suites into a context the application can use the function WDRV_WINC_SSLCTXCipherSuitesSet Once a Cipher Suite Context has been updated it can be loaded into the WINC device using the function WDRV_WINC_SSLActiveCipherSuitesSet ",
							" WDRV_WINC_SSL_CIPHERSUITELIST_CALLBACK Typedef ",
							" C typedef void (*WDRV_WINC_SSL_CIPHERSUITELIST_CALLBACK) ",
							" Summary Callback to report cipher suites ",
							" Description Called when the cipher suites are changed ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pSSLCipherSuiteCtx Pointer to cipher suite list ",
							" Returns None ",
							" Remarks None ",
							" WDRV_WINC_SSL_REQ_ECC_CALLBACK Typedef ",
							" C typedef void (*WDRV_WINC_SSL_REQ_ECC_CALLBACK) ",
							" Summary Callback to request ECC information ",
							" Description Called when authentication with ECC Cipher suites ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open reqType Request type eccReqInfo ECC request info pExtendInfo Extra information relevant to the request ",
							" Returns None ",
							" Remarks pExtendInfo contains information related to the type of request being made: if reqType is WDRV_WINC_ECC_REQ_CLIENT_ECDH or ECC_REQ_SERVER_ECDH the information is stored in a WDRV_WINC_ECDH_INFO structure pExtendInfo- ecdhInfo If reqType is WDRV_WINC_ECC_REQ_GEN_KEY pExtendInfo is NULL If reqType is WDRV_WINC_ECC_REQ_SIGN_GEN the information is stored in a WDRV_WINC_ECDSA_SIGN_REQ_INFO structure pExtendInfo- ecdsaSignReqInfo If reqType is WDRV_WINC_ECC_REQ_SIGN_VERIFY the information is stored in a WDRV_WINC_ECDSA_VERIFY_REQ_INFO structure pExtendInfo- ecdsaVerifyReqInfo ",
							" WDRV_WINC_SSLActiveCipherSuitesSet Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_SSLActiveCipherSuitesSet ( DRV_HANDLE handle WDRV_WINC_CIPHER_SUITE_CONTEXT *pSSLCipherSuiteCtx WDRV_WINC_SSL_CIPHERSUITELIST_CALLBACK pfSSLListCallback ) ",
							" Summary Set the active cipher suites ",
							" Description Passes the active cipher suite list to the WINC ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pSSLCipherSuiteCtx Pointer to cipher suite context pfSSLListCallback Pointer to callback function to receive updated list of cipher suites ",
							" Returns WDRV_WINC_STATUS_OK - The operation was performed WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks None ",
							" WDRV_WINC_SSLCTXCipherSuitesGet Function ",
							" C uint8_t WDRV_WINC_SSLCTXCipherSuitesGet ( WDRV_WINC_CIPHER_SUITE_CONTEXT *pSSLCipherSuiteCtx uint16_t *pCipherSuiteList uint8_t maxNumCipherSuites ) ",
							" Summary Returns the enabled cipher suites from a context ",
							" Description Gets the list of cipher suites from a context as a list of IANA IDs ",
							" Precondition None ",
							" Parameters Param Description pSSLCipherSuiteCtx Pointer to cipher suite context pCipherSuiteList Pointer to list of cipher suites to populate maxNumCipherSuites Maximum number of cipher suites to populate in list ",
							" Returns WDRV_WINC_STATUS_OK - The operation was performed WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_WINC_SSLCTXCipherSuitesSet Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_SSLCTXCipherSuitesSet ( WDRV_WINC_CIPHER_SUITE_CONTEXT *pSSLCipherSuiteCtx uint16_t *pCipherSuiteList uint8_t numCipherSuites ) ",
							" Summary Set the cipher suites enabled in a context ",
							" Description Sets the list of enabled cipher suites within a cipher suite context using IANA defined IDs ",
							" Precondition None ",
							" Parameters Param Description pSSLCipherSuiteCtx Pointer to cipher suite context pCipherSuiteList Pointer to list of cipher suites to enable numCipherSuites Number of cipher suites to enable ",
							" Returns WDRV_WINC_STATUS_OK - The operation was performed WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_WINC_SSLCTXDefault Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_SSLCTXDefault ( WDRV_WINC_CIPHER_SUITE_CONTEXT *pSSLCipherSuiteCtx ) ",
							" Summary Initialize an SSL cipher suite context ",
							" Description Sets the default values for the cipher suite context ",
							" Precondition None ",
							" Parameters Param Description pSSLCipherSuiteCtx Pointer to cipher suite context ",
							" Returns WDRV_WINC_STATUS_OK - The operation was performed WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_WINC_SSLECCHandShakeRsp Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_SSLECCHandShakeRsp ( DRV_HANDLE handle WINC_WDRV_ECC_REQ_TYPE reqType WINC_WDRV_ECC_STATUS status const WDRV_WINC_ECC_HANDSHAKE_INFO *const pHandshakeData const WDRV_WINC_ECDH_INFO *const pECDHRspInfo const uint8_t *const pRspDataBuff uint16_t rspDataSz ) ",
							" Summary Handshake Response for ECC cipher suites ",
							" Description Passes the ECC response data to WINC ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open reqType Request type being responded to status Status of request operation pHandshakeData Pointer to ECC handshake structure pECDHRspInfo Pointer to ECDH response structure pRspDataBuff Pointer of the response data to be sent rspDataSz Response data size ",
							" Returns WDRV_WINC_STATUS_OK - The operation was performed WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The operation is not success ",
							" Remarks pECDHRspInfo is only required when pEccRspInfo- reqCmd is: WDRV_WINC_ECC_REQ_CLIENT_ECDH WDRV_WINC_ECC_REQ_SERVER_ECDH WDRV_WINC_ECC_REQ_GEN_KEY ",
							" WDRV_WINC_SSLECCReqCallbackSet Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_SSLECCReqCallbackSet ( DRV_HANDLE handle WDRV_WINC_REQ_ECC_CALLBACK pfECCREQCallback ) ",
							" Summary Set the ECC request callback ",
							" Description Registers the ECC request callback with the driver ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pfECCREQCallback Pointer to callback function to receive ECC request information from WINC This value can be NULL if ECC is not required ",
							" Returns WDRV_WINC_STATUS_OK - The operation was performed WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_WINC_SSLRetrieveCert Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_SSLRetrieveCert ( DRV_HANDLE handle uint16_t *pCurveType uint8_t *pHash uint8_t *pSig WDRV_WINC_EC_POINT_REP *pKey ) ",
							" Summary Retrieve the certificate to be verified from the WINC ",
							" Description Retrieve the certificate to be verified from the WINC ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pCurveType Pointer to the certificate curve type pHash Pointer to the certificate hash pSig Pointer to the certificate signature pKey Pointer to the certificate Key ",
							" Returns WDRV_WINC_STATUS_OK - The operation was performed WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The operation is not success ",
							" Remarks None ",
							" WDRV_WINC_SSLRetrieveHash Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_SSLRetrieveHash ( DRV_HANDLE handle uint8_t *pHash uint16_t hashSz ) ",
							" Summary Retrieve the certificate hash ",
							" Description Retrieve the certificate hash from the WINC ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pHash Pointer to the certificate hash hashSz Hash size ",
							" Returns WDRV_WINC_STATUS_OK - The operation was performed WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The operation is not success ",
							" Remarks None ",
							" WDRV_WINC_SSLStopRetrieveCert Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_SSLStopRetrieveCert(DRV_HANDLE handle) ",
							" Summary Stop processing the certificate ",
							" Description Stop processing the certificate ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ",
							" Returns WDRV_WINC_STATUS_OK - The operation was performed WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" System Time Control This topic provides information on how the WINC system time can be controlled and queried The WINC device maintains a system time internally Time can be set in two ways by an NTP query from the WINC device to an NTP server or by the host MCU configuring the desired time The source of the time either none NTP or MCU can be configured by calling the function WDRV_WINC_SystemTimeSetSource If the host MCU is providing the time the function WDRV_WINC_SystemTimeSetCurrent allows the application to set the current time using UTC format The WINC can provide the current time to the application by calling the function WDRV_WINC_SystemTimeGetCurrent and providing a callback which will be called when the time is returned from the WINC device The WINC device used a structure tstrSystemTime to transfer some time events Two functions are provided in the WINC Driver to assist translating between this local structure and UTC time These functions are WDRV_WINC_LocalTimeToUTC and WDRV_WINC_UTCToLocalTime ",
							" WDRV_WINC_LocalTimeToUTC Function ",
							" C uint32_t WDRV_WINC_LocalTimeToUTC(const tstrSystemTime *const pSysTime) ",
							" Summary Convert local system time to UTC time ",
							" Description Converts the local system time structure into a more convenient UTC time ",
							" Precondition None ",
							" Parameters Param Description pSysTime Pointer to system time structure ",
							" Returns UTC time or zero if an error occurs ",
							" Remarks None ",
							" WDRV_WINC_SystemTimeGetCurrent Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_SystemTimeGetCurrent ( DRV_HANDLE handle const WDRV_WINC_SYSTIME_CURRENT_CALLBACK pfGetCurrentCallback ) ",
							" Summary Requests the current system time from the WINC ",
							" Description Requests the current system time which is returned via the callback provided ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pfGetCurrentCallback Function pointer to callback ",
							" Returns WDRV_WINC_STATUS_OK - The request has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks None ",
							" WDRV_WINC_SystemTimeSetCurrent Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_SystemTimeSetCurrent ( DRV_HANDLE handle uint32_t curTime ) ",
							" Summary Sets the current system time on the WINC ",
							" Description Configures the system time to the UTC value specified ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open curTime The current UTC time (epoch 01/01/1970) ",
							" Returns WDRV_WINC_STATUS_OK - The request has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks None ",
							" WDRV_WINC_SystemTimeSNTPClientDisable Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_SystemTimeSNTPClientDisable(DRV_HANDLE handle); ",
							" Summary Disable the SNTP client ",
							" Description Disables the SNTP client used to set the system time ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ",
							" Returns WDRV_WINC_STATUS_OK - The request has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks None ",
							" WDRV_WINC_SystemTimeSNTPClientEnable Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_SystemTimeSNTPClientEnable ( DRV_HANDLE handle const char *pServerName bool allowDHCPOverride ); ",
							" Summary Enable the SNTP client to set system time ",
							" Description Enables the SNTP client used to set the system time ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pServerName Pointer to the NTP server name allowDHCPOverride Flag indicating if the DHCP setting for NTP server should override the system server name ",
							" Returns WDRV_WINC_STATUS_OK - The request has been accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks pServerName may be NULL to indicate no specified NTP server name will be used If allowDHCPOverride is also true then the server name can still be set via DHCP If the first character is an asterisk (*) then it will be treated as a server pool where the asterisk will be replaced with an incrementing value from 0 to 3 each time a server fails (example: * pool ntp org) Configurable server name and DHCP override control at not available on WINC3400 and WINC1500 pre 19 6 0 ",
							" WDRV_WINC_SYSTIME_CURRENT_CALLBACK Typedef ",
							" C typedef void (*WDRV_WINC_SYSTIME_CURRENT_CALLBACK) ",
							" Summary Callback returning the system time ",
							" Description Callback returning the system time The time is returned as UTC seconds since 01/01/1970 ",
							" Remarks None ",
							" WDRV_WINC_UTCToLocalTime Function ",
							" C bool WDRV_WINC_UTCToLocalTime(uint32_t timeUTC tstrSystemTime *const pSysTime) ",
							" Summary Convert UTC time to local system time ",
							" Description Converts UTC time into the local system time structure format ",
							" Precondition None ",
							" Parameters Param Description timeUTC UTC time to convert pSysTime Pointer to system time structure to write ",
							" Returns true - Conversion performed false - An error occurred ",
							" Remarks None ",
							" WPS This topic provides information on how to use WPS to connect to Wi-Fi BSSs The WINC device supports WPS using PIN and PBC methods Two functions are provided to begin WPS enrollee discovery using these methods WPS Method Function PIN WDRV_WINC_WPSEnrolleeDiscoveryStartPIN PBC WDRV_WINC_WPSEnrolleeDiscoveryStartPBC These functions use a provided callback to signal discovery events The function WDRV_WINC_WPSEnrolleeDiscoveryStop can be used to stop WPS discovery ",
							" WDRV_WINC_WPS_DISC_CALLBACK Typedef ",
							" C typedef void (*WDRV_WINC_WPS_DISC_CALLBACK) ",
							" Summary Callback to report WPS discovery results ",
							" Description Callback to report WPS discovery results ",
							" Remarks None ",
							" WDRV_WINC_WPSEnrolleeDiscoveryStartPBC Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_WPSEnrolleeDiscoveryStartPBC ( DRV_HANDLE handle const WDRV_WINC_WPS_DISC_CALLBACK pfWPSDiscoveryCallback ) ",
							" Summary Start WPS discovery (Push Button) ",
							" Description Starts the WPS discovery as an enrollee using the Push Button method ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pfWPSDiscoveryCallback Callback function to return discovery results to ",
							" Returns WDRV_WINC_STATUS_OK - Discovery request accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks None ",
							" WDRV_WINC_WPSEnrolleeDiscoveryStartPIN Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_WPSEnrolleeDiscoveryStartPIN ( DRV_HANDLE handle uint32_t pin const WDRV_WINC_WPS_DISC_CALLBACK pfWPSDiscoveryCallback ) ",
							" Summary Start WPS discovery (PIN) ",
							" Description Starts the WPS discovery as an enrollee using the PIN method ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open pin WPS PIN number pfWPSDiscoveryCallback Callback function to return discovery results to ",
							" Returns WDRV_WINC_STATUS_OK - Discovery request accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks The pin number is an 8-digit number where the least significant digit is a checksum as defined by WPS ",
							" WDRV_WINC_WPSEnrolleeDiscoveryStop Function ",
							" C WDRV_WINC_STATUS WDRV_WINC_WPSEnrolleeDiscoveryStop(DRV_HANDLE handle) ",
							" Summary Stop WPS discovery ",
							" Description Stops the WPS discovery if it was started ",
							" Precondition WDRV_WINC_Initialize should have been called WDRV_WINC_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_WINC_Open ",
							" Returns WDRV_WINC_STATUS_OK - Discovery request accepted WDRV_WINC_STATUS_NOT_OPEN - The driver instance is not open WDRV_WINC_STATUS_INVALID_ARG - The parameters were incorrect WDRV_WINC_STATUS_REQUEST_ERROR - The request to the WINC was rejected ",
							" Remarks None ",
							" MPLAB® Harmony PIC32MZW1 WLAN Library The PIC32MZW1 Wi-Fi module consists of two instances a control instance and a data instance The control instance is driven as a conventional Harmony system interface by the system kernel or scheduler to initialize and run the module the data instance implements a Harmony TCP/IP stack MAC Driver module instance driven by the Harmony TCP/IP stack Below are the interfaces provided by the PIC32MZW1 WLAN library ",
							" System Interface APIs The PIC32MZW1 Wi-Fi module consists of two instances a control instance and a data instance The control instance is driven as a conventional Harmony system interface by the system kernel or scheduler to initialize and run the module the data instance implements a Harmony TCP/IP stack MAC Driver module instance driven by the Harmony TCP/IP stack ",
							" WDRV_PIC32MZW_SYS_INIT Struct ",
							" C typedef struct { /* Pointer to Crypt RNG context */ CRYPT_RNG_CTX *pCryptRngCtx; /* Pointer to regulatory domain string */ char *const pRegDomName; /* Power-Save Mode */ WDRV_PIC32MZW_POWERSAVE_MODE powerSaveMode; /* Correlation between PIC and WiFi power modes */ WDRV_PIC32MZW_POWERSAVE_PIC_CORRELATION powerSavePICCorrelation; } WDRV_PIC32MZW_SYS_INIT; ",
							" Summary Data that's passed to the Control instance ",
							" Description This structure defines the Control instance initialization ",
							" WDRV_PIC32MZW_SYS_STATUS Enum ",
							" C typedef enum { /* RF initialisation is in progress*/ WDRV_PIC32MZW_SYS_STATUS_RF_INIT_BUSY = SYS_STATUS_READY_EXTENDED /* RF configuration is missing */ WDRV_PIC32MZW_SYS_STATUS_RF_CONF_MISSING /* RF is configured and is ready */ WDRV_PIC32MZW_SYS_STATUS_RF_READY } WDRV_PIC32MZW_SYS_STATUS; ",
							" Summary Defines extended system states ",
							" Description An extended state gives information about availability of RF config ",
							" Remarks None ",
							" WDRV_PIC32MZW_Initialize Function ",
							" C SYS_MODULE_OBJ WDRV_PIC32MZW_Initialize ( const SYS_MODULE_INDEX index const SYS_MODULE_INIT *const init ) ",
							" Summary System interface initialization of the PIC32MZW driver ",
							" Description This is the function that initializes the PIC32MZW driver It is called by the system ",
							" Precondition None ",
							" Parameters Param Description index Index for the PIC32MZW driver instance to be initialized init Pointer to initialization data currently not used ",
							" Returns Valid handle to a driver object - if successful SYS_MODULE_OBJ_INVALID - if initialization failed ",
							" Remarks The returned object must be passed as argument to WDRV_PIC32MZW_Reinitialize WDRV_PIC32MZW_Deinitialize WDRV_PIC32MZW_Tasks and WDRV_PIC32MZW_Status routines ",
							" WDRV_PIC32MZW_Deinitialize Function ",
							" C void WDRV_PIC32MZW_Deinitialize(SYS_MODULE_OBJ object) ",
							" Summary PIC32MZW driver deinitialization function ",
							" Description This is the function that deinitializes the PIC32MZW It is called by the system ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called ",
							" Parameters Param Description object Driver object handle returned from WDRV_PIC32MZW_Initialize ",
							" Returns None ",
							" Remarks None ",
							" WDRV_PIC32MZW_Reinitialize Function ",
							" C void WDRV_PIC32MZW_Reinitialize ( SYS_MODULE_OBJ object const SYS_MODULE_INIT *const init ) ",
							" Summary PIC32MZW driver reinitialization function ",
							" Description This is the function that re-initializes the PIC32MZW It is called by the system ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called ",
							" Parameters Param Description object Driver object handle returned from WDRV_PIC32MZW_Initialize init Pointer to initialization data currently not used ",
							" Returns None ",
							" Remarks None ",
							" WDRV_PIC32MZW_Status Function ",
							" C SYS_STATUS WDRV_PIC32MZW_Status(SYS_MODULE_OBJ object) ",
							" Summary Provides the current status of the PIC32MZW driver module ",
							" Description This function provides the current status of the PIC32MZW driver module ",
							" Precondition WDRV_PIC32MZW_Initialize must have been called before calling this function ",
							" Parameters Param Description object Driver object handle returned from WDRV_PIC32MZW_Initialize ",
							" Returns SYS_STATUS_READY - Indicates that any previous module operation for the specified module has completed SYS_STATUS_BUSY - Indicates that a previous module operation for the specified module has not yet completed SYS_STATUS_ERROR - Indicates that the specified module is in an error state ",
							" Example SYS_MODULE_OBJ object; // Returned from WDRV_PIC32MZW_Initialize SYS_STATUS status; status = WDRV_PIC32MZW_Status(object); if (SYS_STATUS_ERROR = status) { // Handle error } ",
							" Remarks Any value greater than SYS_STATUS_READY is also a normal running state in which the driver is ready to accept new operations SYS_STATUS_BUSY - Indicates that the driver is busy with a previous system level operation and cannot start another SYS_STATUS_ERROR - Indicates that the driver is in an error state Any value less than SYS_STATUS_ERROR is also an error state SYS_MODULE_DEINITIALIZED - Indicates that the driver has been deinitialized This operation can be used to determine when any of the driver's module level operations has completed If the status operation returns SYS_STATUS_BUSY then a previous operation has not yet completed Once the status operation returns SYS_STATUS_READY any previous operations have completed The value of SYS_STATUS_ERROR is negative (-1) Any value less than that is also an error state This function will NEVER block waiting for hardware If the Status operation returns an error value the error may be cleared by calling the reinitialize operation If that fails the deinitialize operation will need to be called followed by the initialize operation to return to normal operations ",
							" Client Open/Close APIs The PIC32MZW1 Wi-Fi module consists of two instances a control instance and a data instance The control instance is driven as a conventional Harmony system interface by the system kernel or scheduler to initialize and run the module the data instance implements a Harmony TCP/IP stack MAC Driver module instance driven by the Harmony TCP/IP stack ",
							" WDRV_PIC32MZW_CTRLDCPT Struct ",
							" C typedef struct _WDRV_PIC32MZW_CTRLDCPT { /* Primary driver handle */ DRV_HANDLE handle; /* Flag indicating if this instance is operating as s station or soft-AP */ bool isAP; /* Variable to store the state of the connection */ WDRV_PIC32MZW_CONN_STATE connectedState; /* Flag indicating if a BSS scan is currently in progress */ bool scanInProgress; /* Current index of the BSS scan results */ uint8_t scanIndex; /* Flag indicating if the scan parameters have been modified */ bool scanParamDefault; /* The number of scan slots per channel */ uint8_t scanNumSlots; /* Number of probe requests to be sent each scan slot */ uint8_t scanNumProbes; /* Time spent on each active channel probing for BSS's */ uint16_t scanActiveScanTime; /* Time spent on each passive channel listening for beacons */ uint16_t scanPassiveListenTime; /* The current power-save mode */ WDRV_PIC32MZW_POWERSAVE_MODE powerSaveMode; /* Power-save PIC/WiFi sync/async correlation mode */ WDRV_PIC32MZW_POWERSAVE_PIC_CORRELATION powerSavePICCorrelation; /* Access semaphore for MAC firmware library */ OSAL_SEM_HANDLE_TYPE drvAccessSemaphore; /* Main event semaphore */ OSAL_SEM_HANDLE_TYPE drvEventSemaphore; /* Bitmap of enabled 2 4GHz channels for scanning */ WDRV_PIC32MZW_CHANNEL24_MASK scanChannelMask24; /* Current operating channel */ WDRV_PIC32MZW_CHANNEL_ID opChannel; /* Association information (STA) */ WDRV_PIC32MZW_ASSOC_INFO assocInfoSTA; /* Association information (AP) */ WDRV_PIC32MZW_ASSOC_INFO assocInfoAP[WDRV_PIC32MZW_NUM_ASSOCS]; /* Regulatory domain name */ char regDomName[WDRV_PIC32MZW_REGDOMAIN_MAX_NAME_LEN]; /* Length of regulatory domain name */ uint8_t regDomNameLength; /* RF and MAC configuration status */ uint8_t rfMacConfigStatus; /* Physical MAC address of interface */ WDRV_PIC32MZW_MAC_ADDR macAddr; /* Extended system status which can be queried via WDRV_PIC32MZW_StatusExt */ WDRV_PIC32MZW_SYS_STATUS extSysStat; /* Callback to use for BSS find operations */ WDRV_PIC32MZW_BSSFIND_NOTIFY_CALLBACK pfBSSFindNotifyCB; /* Callback to use for notifying changes in connection state */ WDRV_PIC32MZW_BSSCON_NOTIFY_CALLBACK pfConnectNotifyCB; /* Callback to use for retrieving association RSSI information from the PIC32MZW */ WDRV_PIC32MZW_ASSOC_RSSI_CALLBACK pfAssociationRSSICB; /* Callback to use for retrieving regulatory domain information */ WDRV_PIC32MZW_REGDOMAIN_CALLBACK pfRegDomCB; /* Callback used for retrieving vendor IE information received */ WDRV_PIC32MZW_IE_RX_CALLBACK pfVendorIERxCB; /* Vendor specific IE frame filter mask */ uint8_t vendorIEMask; /* Handle to driver TLS module */ DRV_PIC32MZW1_TLS_HANDLE tlsHandle; /* Callback to use for notifying WiFi power-save sleep entry and exit */ WDRV_PIC32MZW_PS_NOTIFY_CALLBACK pfPSNotifyCB; } WDRV_PIC32MZW_CTRLDCPT; ",
							" Summary Driver descriptor for the PIC32MZW Control driver ",
							" Description Structure containing the system level descriptor for the PIC32MZW driver This structure is initialized by a call to WDRV_PIC32MZW_MACInitialize ",
							" Remarks None ",
							" WDRV_PIC32MZW_Open Function ",
							" C DRV_HANDLE WDRV_PIC32MZW_Open(const SYS_MODULE_INDEX index const DRV_IO_INTENT intent) ",
							" Summary Opens an instance of the PIC32MZW driver ",
							" Description Opens an instance of the PIC32MZW driver and returns a handle which must be used when calling other driver functions ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called ",
							" Parameters Param Description index Identifier for the driver instance to be opened intent Zero or more of the values from the enumeration DRV_IO_INTENT ORed together to indicate the intended use of the driver ",
							" Returns - Valid handle - if the open function succeeded - DRV_HANDLE_INVALID - if an error occurs ",
							" Remarks The index and intent parameters are not used in the current implementation and are maintained only for compatibility with the generic driver Open function signature ",
							" WDRV_PIC32MZW_Close Function ",
							" C void WDRV_PIC32MZW_Close(DRV_HANDLE handle) ",
							" Summary Closes an instance of the PIC32MZW driver ",
							" Description This is the function that closes an instance of the MAC All per client data is released and the handle can no longer be used after this function is called ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open ",
							" Returns None ",
							" Remarks None ",
							" WDRV_PIC32MZW_StatusExt Function ",
							" C WDRV_PIC32MZW_SYS_STATUS WDRV_PIC32MZW_StatusExt(SYS_MODULE_OBJ object) ",
							" Summary Provides the extended system status of the PIC32MZW driver module ",
							" Description This function provides the extended system status of the PIC32MZW driver module ",
							" Precondition WDRV_PIC32MZW_Initialize must have been called before calling this function ",
							" Parameters Param Description object Driver object handle returned from WDRV_PIC32MZW_Initialize ",
							" Returns WDRV_PIC32MZW_SYS_STATUS_RF_INIT_BUSY - RF initialisation is in progress WDRV_PIC32MZW_SYS_STATUS_RF_CONF_MISSING - RF configuration is missing WDRV_PIC32MZW_SYS_STATUS_RF_READY - RF is configured and is ready ",
							" Remarks None ",
							" Client - BSS Find APIs The application can use this interface to request a scan for local BSSs Once requested the device will conduct the search using the configured search parameters and report the results back to the application one BSS at a time This interface can be used in either a callback mode a polled mode or a combination of both callback and polled depending on how the application wishes to receive the BSS information How a scan is conducted depends on the parameters and channel lists provided by the application The channels which can be scanned may be set by calling WDRV_PIC32MZW_BSSFindSetEnabledChannels24  When an application wishes to begin a scan operation it must call WDRV_PIC32MZW_BSSFindFirst It is possible to request a scan on only a single channel or on all channels enabled by calling WDRV_PIC32MZW_BSSFindSetEnabledChannels The scan can be performed using active mode (where probe requests are transmitted) or passive mode (where beacons are listened for) WDRV_PIC32MZW_BSSFindFirst takes an optional callback function to use for notifying the application when the scan operation is complete and the first result is available If this isn’t provided the application can poll this interface using WDRV_PIC32MZW_BSSFindInProgress to determine if the device is still scanning Getting Results – Callback Only If a callback function was provided to WDRV_PIC32MZW_BSSFindFirst the Wi-Fi driver will call this callback when the first results are available The callback is provided with the scan result for a single BSS as well as the index of the results within the full set of BSSs discovered If the callback function returns the value true to the Wi-Fi driver it will cause the driver to request the next result from the PIC32MZW1 device When this result is available the Wi-Fi driver will again call the callback and provide the BSS information It is thus possible to receive all the results via the callback Getting Results – Callback Notification Foreground Retrieval While the application may wish to be notified of a BSS result being available via the callback mechanism it may be preferable to retrieve the result information from a foreground task For example in an OS environment the callback may simply signal a semaphore triggering the main application task to retrieve the BSS information In this model the callback called by the Wi-Fi driver should return the value false The Wi-Fi driver will not request the next set of BSS information from the PIC32MZW1 device The foreground task may then call WDRV_PIC32MZW_BSSFindGetInfo with a pointer to a WDRV_PIC32MZW_BSS_INFO structure to receive the BSS information If the function is called when there is no valid BSS information present in the PIC32MZW driver the function will return WDRV_PIC32MZW_STATUS_NO_BSS_INFO  When the application wishes to request the next set of BSS information it must call WDRV_PIC32MZW_BSSFindNext It is possible to change the callback function at this time or even turn off callback operation if a NULL pointer is used Assuming the callback function is again specified the Wi-Fi driver will request the next set of BSS information from the device and inform the application via the callback Getting Results – Polled The operations of the BSS scan can be inferred by polling this interface WDRV_PIC32MZW_BSSFindInProgress indicates if the scan operation is currently active and results are not yet available WDRV_PIC32MZW_BSSFindGetNumBSSResults returns the number of sets of BSS information available as a result of a scan operation WDRV_PIC32MZW_BSSFindGetInfo can be called to retrieve the BSS information If the information is not yet available this function will return WDRV_PIC32MZW_STATUS_NO_BSS_INFO Terminating a BSS Search Once a scan operation has been started by calling WDRV_PIC32MZW_BSSFindFirst it must be allowed to complete once it has the application may decide to ignore some or all of the results To abort the BSS information retrieval and abandon any remaining results the application can call WDRV_PIC32MZW_BSSFindReset  ",
							" WDRV_PIC32MZW_BSSFIND_NOTIFY_CALLBACK Typedef ",
							" C typedef bool (*WDRV_PIC32MZW_BSSFIND_NOTIFY_CALLBACK) ",
							" Summary Callback to signal discovery of a BSS ",
							" Description When the information about a discovered BSS is requested the driver will use this callback to provide the BSS information to the user ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open index Index of BSS find results ofTotal Total number of BSS find results pBSSInfo Pointer to BSS information structure ",
							" Returns If true is returned the PIC32MZW driver will automatically fetch the next BSS find results which will cause a later call to this callback If false is returned the PIC32MZW driver will not fetch the next BSS find results the user must call WDRV_PIC32MZW_BSSFindNext to retrieve them ",
							" Remarks The callback function must return true or false true indicates that the user wishes the next BSS information structure be provided false indicates that the user will call WDRV_PIC32MZW_BSSFindNext to obtain the next BBS information structure ",
							" WDRV_PIC32MZW_SCAN_MATCH_MODE Enum ",
							" C typedef enum { /* Stop scan on first match */ WDRV_PIC32MZW_SCAN_MATCH_MODE_STOP_ON_FIRST /* Scan for all matches */ WDRV_PIC32MZW_SCAN_MATCH_MODE_FIND_ALL } WDRV_PIC32MZW_SCAN_MATCH_MODE; ",
							" Summary List of possible scan matching modes ",
							" Description The scan matching mode can be to stop on first match or match all ",
							" Remarks None ",
							" WDRV_PIC32MZW_SEC_MASK Enum ",
							" C typedef enum { /* AP supports WEP-40 or WEP-104 as standalone or as GTK with 11i TSN */ WDRV_PIC32MZW_SEC_BIT_WEP = 0x01 /* AP supports TKIP as GTK (if not WEP) and PTK */ WDRV_PIC32MZW_SEC_BIT_WPA = 0x02 /* AP includes RSNE and supports CCMP-128 as GTK (if not TKIP or WEP) and PTK */ WDRV_PIC32MZW_SEC_BIT_WPA2OR3 = 0x04 /* AP supports BIP-CMAC-128 as IGTK */ WDRV_PIC32MZW_SEC_BIT_MFP_CAPABLE = 0x08 /* AP requires management frame protection */ WDRV_PIC32MZW_SEC_BIT_MFP_REQUIRED = 0x10 /* AP supports 802 1x authentication */ WDRV_PIC32MZW_SEC_BIT_ENTERPRISE = 0x20 /* AP supports PSK authentication */ WDRV_PIC32MZW_SEC_BIT_PSK = 0x40 /* AP supports SAE authentication */ WDRV_PIC32MZW_SEC_BIT_SAE = 0x80 } WDRV_PIC32MZW_SEC_MASK; ",
							" Summary List of possible security capabilities ",
							" Description The security capabilities that may be offered by an AP ",
							" Remarks None ",
							" WDRV_PIC32MZW_BSSFindFirst Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_BSSFindFirst ( DRV_HANDLE handle WDRV_PIC32MZW_CHANNEL_ID channel bool active const WDRV_PIC32MZW_SSID_LIST *const pSSIDList const WDRV_PIC32MZW_BSSFIND_NOTIFY_CALLBACK pfNotifyCallback ) ",
							" Summary Request a BSS scan is performed by the PIC32MZW ",
							" Description A scan is requested on the specified channels An optional callback can be provided to receive notification of the first BSS discovered ",
							" Precondition WDRV_PIC32MZW_Initialize must have been called WDRV_PIC32MZW_Open must have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open channel Channel to scan maybe WDRV_PIC32MZW_CID_ANY in which case all enabled channels are scanned active Use active vs passive scanning pSSIDList Pointer to list of SSIDs to match on pfNotifyCallback Callback to receive notification of first BSS found ",
							" Returns WDRV_PIC32MZW_STATUS_OK - A scan was initiated WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_SCAN_IN_PROGRESS - A scan is already in progress ",
							" Remarks If channel is WDRV_PIC32MZW_CID_ANY then all enabled channels are scanned The enabled channels can be configured using WDRV_PIC32MZW_BSSFindSetEnabledChannels How the scan is performed can be configured using WDRV_PIC32MZW_BSSFindSetScanParameters ",
							" WDRV_PIC32MZW_BSSFindGetInfo Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_BSSFindGetInfo ( DRV_HANDLE handle WDRV_PIC32MZW_BSS_INFO *const pBSSInfo ) ",
							" Summary Requests the information structure of the current BSS scan result ",
							" Description After each call to either WDRV_PIC32MZW_BSSFindFirst or WDRV_PIC32MZW_BSSFindNext the driver receives a single BSS information structure which it stores This function retrieves that structure ",
							" Precondition WDRV_PIC32MZW_Initialize must have been called WDRV_PIC32MZW_Open must have been called to obtain a valid handle WDRV_PIC32MZW_BSSFindFirst must have been called ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open pBSSInfo Pointer to structure to populate with the current BSS information ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request was accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_NO_BSS_INFO - There is no current BBS information available ",
							" Remarks This function may be polled after calling WDRV_PIC32MZW_BSSFindFirst or WDRV_PIC32MZW_BSSFindNext until it returns WDRV_PIC32MZW_STATUS_OK ",
							" WDRV_PIC32MZW_BSSFindGetNumBSSResults Function ",
							" C uint8_t WDRV_PIC32MZW_BSSFindGetNumBSSResults(DRV_HANDLE handle) ",
							" Summary Returns the number of BSS scan results found ",
							" Description Returns the number of BSS scan results found ",
							" Precondition WDRV_PIC32MZW_Initialize must have been called WDRV_PIC32MZW_Open must have been called to obtain a valid handle WDRV_PIC32MZW_BSSFindFirst must have been called to start a scan ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open ",
							" Returns Number of BSS scan results available Zero indicates no results or an error occurred ",
							" Remarks None ",
							" WDRV_PIC32MZW_BSSFindInProgress Function ",
							" C bool WDRV_PIC32MZW_BSSFindInProgress(DRV_HANDLE handle) ",
							" Summary Indicates if a BSS scan is in progress ",
							" Description Returns a flag indicating if a BSS scan operation is currently running ",
							" Precondition WDRV_PIC32MZW_Initialize must have been called WDRV_PIC32MZW_Open must have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open ",
							" Returns Flag indicating if a scan is in progress If an error occurs the result is false ",
							" Remarks None ",
							" WDRV_PIC32MZW_BSSFindNext Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_BSSFindNext ( DRV_HANDLE handle WDRV_PIC32MZW_BSSFIND_NOTIFY_CALLBACK pfNotifyCallback ) ",
							" Summary Request the next scan results be provided ",
							" Description The information structure of the next BSS is requested from the PIC32MZW ",
							" Precondition WDRV_PIC32MZW_Initialize must have been called WDRV_PIC32MZW_Open must have been called to obtain a valid handle WDRV_PIC32MZW_BSSFindFirst must have been called ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open pfNotifyCallback Callback to receive notification of next BSS found ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request was accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_SCAN_IN_PROGRESS - A scan is already in progress WDRV_PIC32MZW_STATUS_BSS_FIND_END - No more results are available ",
							" Remarks None ",
							" WDRV_PIC32MZW_BSSFindReset Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_BSSFindReset ( DRV_HANDLE handle WDRV_PIC32MZW_BSSFIND_NOTIFY_CALLBACK pfNotifyCallback ) ",
							" Summary Request the first scan results again ",
							" Description The information structure of the first BSS is requested from the PIC32MZW ",
							" Precondition WDRV_PIC32MZW_Initialize must have been called WDRV_PIC32MZW_Open must have been called to obtain a valid handle WDRV_PIC32MZW_BSSFindFirst must have been called ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open pfNotifyCallback Callback to receive notification of next BSS found ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request was accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_SCAN_IN_PROGRESS - A scan is already in progress WDRV_PIC32MZW_STATUS_BSS_FIND_END - No more results are available ",
							" Remarks None ",
							" WDRV_PIC32MZW_BSSFindSetEnabledChannels24 Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_BSSFindSetEnabledChannels24 ( DRV_HANDLE handle WDRV_PIC32MZW_CHANNEL24_MASK channelMask24 ) ",
							" Summary Set the enabled channels list for 2 4GHz ",
							" Description To comply with regulatory domains certain channels must not be scanned This function configures which channels are enabled to be used ",
							" Precondition WDRV_PIC32MZW_Initialize must have been called WDRV_PIC32MZW_Open must have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open channelMask24 A 2 4GHz channel mask detailing all the enabled channels ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request was accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The PIC32MZW was unable to accept this request ",
							" Remarks None ",
							" WDRV_PIC32MZW_BSSFindSetScanMatchMode Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_BSSFindSetScanMatchMode ( DRV_HANDLE handle WDRV_PIC32MZW_SCAN_MATCH_MODE matchMode ) ",
							" Summary Configures the scan matching mode ",
							" Description This function configures the matching mode either stop on first or match all used when scanning for SSIDs ",
							" Precondition WDRV_PIC32MZW_Initialize must have been called WDRV_PIC32MZW_Open must have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open matchMode Required scan matching mode ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request was accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The PIC32MZW was unable to accept this request ",
							" Remarks None ",
							" WDRV_PIC32MZW_BSSFindSetScanParameters Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_BSSFindSetScanParameters ( DRV_HANDLE handle uint8_t numSlots uint16_t activeSlotTime uint16_t passiveSlotTime uint8_t numProbes ) ",
							" Summary Configures the scan operation ",
							" Description Configures the time periods of active and passive scanning operations ",
							" Precondition WDRV_PIC32MZW_Initialize must have been called WDRV_PIC32MZW_Open must have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open numSlots Number of slots (minimum is 2) activeSlotTime Time spent on each active channel probing for BSS's passiveSlotTime Time spent on each passive channel listening for beacons numProbes Number of probes per slot ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request was accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks If any parameter is zero then the configured value is unchanged ",
							" WDRV_PIC32MZW_BSSRoamingConfigure Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_BSSRoamingConfigure ( DRV_HANDLE handle WDRV_PIC32MZW_BSS_ROAMING_CFG roamingCfg ) ",
							" Summary Configures BSS roaming support ",
							" Description Enables or disables BSS roaming support If enabled the PIC32MZW can perform a DHCP renew of the current IP address if configured to do so otherwise it will assume the existing IP address is still valid ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open roamingCfg Roaming configuration see WDRV_PIC32MZW_BSS_ROAMING_CFG ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_CONNECT_FAIL - The disconnection has failed WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected ",
							" Remarks None ",
							" Client - BSS Context APIs The BSS context contains information relevant to a BSS such as SSID and channel The structure WDRV_PIC32MZW_BSS_CONTEXT is provided to contain the context To initialize a context the function WDRV_PIC32MZW_BSSCtxSetDefaults is provided this ensures the context is in a known state The function WDRV_PIC32MZW_BSSCtxIsValid is provided to test if a context is valid In some applications a BSS context is valid even if an SSID is blank Therefore this function can be informed whether a blank SSID is valid or not The SSID of the BSS can be configured using the function WDRV_PIC32MZW_BSSCtxSetSSID The channel of the BSS can be configure using the function W DRV_PIC32MZW_BSSCtxSetChannel In some applications a BSS can be cloaked therefore the state can be configured in a BSS context using the function WDRV_PIC32MZW_BSSCtxSetSSIDVisibility to indicate if an BSS is considered visible or not ",
							" WDRV_PIC32MZW_BSS_CONTEXT Struct ",
							" C typedef struct { /* SSID of BSS */ WDRV_PIC32MZW_SSID ssid; /* BSSID */ WDRV_PIC32MZW_MAC_ADDR bssid; /* Current channel of BSS */ WDRV_PIC32MZW_CHANNEL_ID channel; /* Flag indicating if SSID is cloaked */ bool cloaked; } WDRV_PIC32MZW_BSS_CONTEXT; ",
							" Summary Context structure containing information about BSSs ",
							" Description The context contains the SSID channel and visibility of a BSS ",
							" Remarks None ",
							" WDRV_PIC32MZW_BSS_INFO Struct ",
							" C typedef struct { /* BSS context information (BSSID SSID channel etc) */ WDRV_PIC32MZW_BSS_CONTEXT ctx; /* Signal strength RSSI of BSS */ int8_t rssi; /* Security capabilities of BSS */ WDRV_PIC32MZW_SEC_MASK secCapabilities; /* Recommended authentication type for connecting to BSS */ WDRV_PIC32MZW_AUTH_TYPE authTypeRecommended; } WDRV_PIC32MZW_BSS_INFO; ",
							" Summary Structure containing information about a BSS ",
							" Description This structure contains the BSSID and SSID of the BSS as well as the signal strength RSSI The authentication type used by the BSS and the channel it is operating on are also provided ",
							" Remarks None ",
							" WDRV_PIC32MZW_BSS_ROAMING_CFG Enum ",
							" C typedef enum { /* BSS Roaming is turned off */ WDRV_PIC32MZW_BSS_ROAMING_CFG_OFF /* BSS Roaming is turned on no IP renew occurs */ WDRV_PIC32MZW_BSS_ROAMING_CFG_ON /* BSS Roaming is turned on DHCP renew is request upon reconnection */ WDRV_PIC32MZW_BSS_ROAMING_CFG_ON_IP_RENEW } WDRV_PIC32MZW_BSS_ROAMING_CFG; ",
							" Summary Defines the BSS roaming configuration ",
							" Description This enumeration defines the BSS roaming configuration ",
							" Remarks None ",
							" WDRV_PIC32MZW_BSSCON_NOTIFY_CALLBACK Typedef ",
							" C typedef void (*WDRV_PIC32MZW_BSSCON_NOTIFY_CALLBACK) ",
							" Summary Callback to notify the user of a change in connection state ",
							" Description When the connection state changes this callback enable the driver to signal the user about that event and reason ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open assocHandle Association handle currentState Current connection state ",
							" Returns None ",
							" Remarks None ",
							" Summary Pointer to a generic status callback function ",
							" Description This defines a generic status function callback type which can be passed into certain functions to receive feedback ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open status A status value ",
							" Returns None ",
							" Remarks The value of the status passed to the function is dependant on the function used to register the callback See WDRV_PIC32MZW_OTAUpdateFromURL WDRV_PIC32MZW_SwitchActiveFirmwareImage WDRV_PIC32MZW_HostFileRead and WDRV_PIC32MZW_HostFileErase ",
							" WDRV_PIC32MZW_BSSCtxIsValid Function ",
							" C bool WDRV_PIC32MZW_BSSCtxIsValid ( const WDRV_PIC32MZW_BSS_CONTEXT *const pBSSCtx bool ssidValid ) ",
							" Summary Tests if a BSS context is valid ",
							" Description Tests the elements of the BSS context to judge if their values are legal ",
							" Precondition None ",
							" Parameters Param Description pBSSCtx Pointer to a BSS context ssidValid Flag indicating if the SSID within the context must be valid ",
							" Returns true or false indicating if context is valid ",
							" Remarks A valid SSID is one which has a non-zero length The check is optional as it is legal for the SSID field to be zero length ",
							" WDRV_PIC32MZW_BSSCtxSetBSSID Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_BSSCtxSetBSSID ( WDRV_PIC32MZW_BSS_CONTEXT *const pBSSCtx uint8_t *const pBSSID ) ",
							" Summary Configures the BSSID of the BSS context ",
							" Description The BSSID string is copied into the BSS context ",
							" Precondition None ",
							" Parameters Param Description pBSSCtx Pointer to a BSS context pBSSID Pointer to buffer containing the new BSSID ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The context has been configured WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_INVALID_CONTEXT - The BSS context is not valid ",
							" Remarks None ",
							" WDRV_PIC32MZW_BSSCtxSetChannel Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_BSSCtxSetChannel ( WDRV_PIC32MZW_BSS_CONTEXT *const pBSSCtx WDRV_PIC32MZW_CHANNEL_ID channel ) ",
							" Summary Configures the channel of the BSS context ",
							" Description The supplied channel value is copied into the BSS context ",
							" Precondition None ",
							" Parameters Param Description pBSSCtx Pointer to a BSS context channel Channel number ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The context has been configured WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_INVALID_CONTEXT - The BSS context is not valid ",
							" Remarks channel may be WDRV_PIC32MZW_CID_ANY to represent no fixed channel ",
							" WDRV_PIC32MZW_BSSCtxSetDefaults Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_BSSCtxSetDefaults ( WDRV_PIC32MZW_BSS_CONTEXT *const pBSSCtx ) ",
							" Summary Configures a BSS context into a default legal state ",
							" Description Ensures that each element of the structure is configured into a legal state ",
							" Precondition None ",
							" Parameters Param Description pBSSCtx Pointer to a BSS context ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The context has been configured WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_PIC32MZW_BSSCtxSetSSID Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_BSSCtxSetSSID ( WDRV_PIC32MZW_BSS_CONTEXT *const pBSSCtx uint8_t *const pSSID uint8_t ssidLength ) ",
							" Summary Configures the SSID of the BSS context ",
							" Description The SSID string and length provided are copied into the BSS context ",
							" Precondition None ",
							" Parameters Param Description pBSSCtx Pointer to a BSS context pSSID Pointer to buffer containing the new SSID ssidLength The length of the SSID held in the pSSID buffer ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The context has been configured WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_INVALID_CONTEXT - The BSS context is not valid ",
							" Remarks None ",
							" WDRV_PIC32MZW_BSSCtxSetSSIDVisibility Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_BSSCtxSetSSIDVisibility ( WDRV_PIC32MZW_BSS_CONTEXT *const pBSSCtx bool visible ) ",
							" Summary Configures the visibility of the BSS context ",
							" Description Specific to Soft-AP mode this flag defines if the BSS context will create a visible presence on air ",
							" Precondition None ",
							" Parameters Param Description pBSSCtx Pointer to a BSS context visible Flag indicating if this BSS will be visible or not ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The context has been configured WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_INVALID_CONTEXT - The BSS context is not valid ",
							" Remarks None ",
							" Client Interface - Authentication Context APIs The authentication context contains information relevant to the authentication mechanisms used in Wi-Fi Currently supported are Open WPA/WPA2/WPA3-Personal and WPA/WPA2/WPA3-Enterprise(EAP-TLS) The structure WDRV_PIC32MZW_AUTH_CONTEXT is provided to contain the context To initialize a context the function WDRV_PIC32MZW_AuthCtxSetDefaults is provided which ensures the context is in a known state The function WDRV_PIC32MZW_AuthCtxIsValid is provided to test if a context is valid Each authentication type has at least one function which can be used to configure the type of authentication algorithm used as well as the parameters which are required ",
							" WDRV_PIC32MZW_ENT_AUTH_DOMAIN_USER_LEN_MAX Macro ",
							" C #define WDRV_PIC32MZW_ENT_AUTH_DOMAIN_USER_LEN_MAX 255 #define WDRV_PIC32MZW_MAX_SSID_LEN 32 #define WDRV_PIC32MZW_MAC_ADDR_LEN 6 #define WDRV_PIC32MZW_WEP_40_KEY_STRING_SIZE 10 #define WDRV_PIC32MZW_WEP_104_KEY_STRING_SIZE 26 #define WDRV_PIC32MZW_PSK_LEN 64 #define WDRV_PIC32MZW_MAX_PSK_PASSWORD_LEN 63 #define WDRV_PIC32MZW_MIN_PSK_PASSWORD_LEN 8 for authentication with Enterprise methods ",
							" WDRV_PIC32MZW_AUTH_MFP_CONFIG Enum ",
							" C typedef enum { /* Management Frame Protection enabled but not required * This is the default configuration for the following auth types: * WDRV_PIC32MZW_AUTH_TYPE_WPAWPA2_PERSONAL * WDRV_PIC32MZW_AUTH_TYPE_WPA2_PERSONAL * WDRV_PIC32MZW_AUTH_TYPE_WPA2WPA3_PERSONAL * WDRV_PIC32MZW_AUTH_TYPE_WPAWPA2_ENTERPRISE * WDRV_PIC32MZW_AUTH_TYPE_WPA2_ENTERPRISE * WDRV_PIC32MZW_AUTH_TYPE_WPA2WPA3_ENTERPRISE * This configuration is not compatible with other auth types */ WDRV_PIC32MZW_AUTH_MFP_ENABLED /* Management Frame Protection required * This is an optional configuration for the following auth types: * WDRV_PIC32MZW_AUTH_TYPE_WPA2_PERSONAL * WDRV_PIC32MZW_AUTH_TYPE_WPA2WPA3_PERSONAL * WDRV_PIC32MZW_AUTH_TYPE_WPA2_ENTERPRISE * WDRV_PIC32MZW_AUTH_TYPE_WPA2WPA3_ENTERPRISE * This configuration is not compatible with other auth types */ WDRV_PIC32MZW_AUTH_MFP_REQUIRED /* Management Frame Protection disabled * This is an optional configuration for the following auth types: * WDRV_PIC32MZW_AUTH_TYPE_WPAWPA2_PERSONAL * WDRV_PIC32MZW_AUTH_TYPE_WPA2_PERSONAL * WDRV_PIC32MZW_AUTH_TYPE_WPAWPA2_ENTERPRISE * WDRV_PIC32MZW_AUTH_TYPE_WPA2_ENTERPRISE * This configuration is not compatible with other auth types */ WDRV_PIC32MZW_AUTH_MFP_DISABLED } WDRV_PIC32MZW_AUTH_MFP_CONFIG; ",
							" Summary List of possible configurations for Management Frame Protection ",
							" Description This type defines the possible configurations that can be specified in WDRV_PIC32MZW_AuthCtxConfigureMfp ",
							" Remarks Not all MFP configurations are compatible with all auth types When an auth context is applied the MFP configuration is ignored if it is not compatible with the auth type ",
							" WDRV_PIC32MZW_AUTH_TYPE Enum ",
							" C typedef enum { /* This type may be used in helper function * WDRV_PIC32MZW_AuthCtxSetPersonal in which case it is translated into * the best practice auth type Other uses of this type are invalid */ WDRV_PIC32MZW_AUTH_TYPE_DEFAULT /* No encryption */ WDRV_PIC32MZW_AUTH_TYPE_OPEN /* WEP encryption */ WDRV_PIC32MZW_AUTH_TYPE_WEP /* WPA2 mixed mode (AP) / compatibility mode (STA) with PSK * (As an AP GTK is TKIP as a STA GTK is chosen by AP; * PTK can be CCMP or TKIP) */ WDRV_PIC32MZW_AUTH_TYPE_WPAWPA2_PERSONAL /* WPA2-only authentication with PSK (PTK and GTK are both CCMP) */ /* Note that a WPA2-only STA will not connect to a WPA2 mixed mode AP */ WDRV_PIC32MZW_AUTH_TYPE_WPA2_PERSONAL /* WPA3 SAE transition mode (CCMP IGTK can be BIP or none) */ WDRV_PIC32MZW_AUTH_TYPE_WPA2WPA3_PERSONAL /* WPA3 SAE authentication (CCMP IGTK is BIP) */ WDRV_PIC32MZW_AUTH_TYPE_WPA3_PERSONAL /* WPA2/WPA enterprise mixed mode authentication type */ WDRV_PIC32MZW_AUTH_TYPE_WPAWPA2_ENTERPRISE /* WPA2 enterprise authentication type */ WDRV_PIC32MZW_AUTH_TYPE_WPA2_ENTERPRISE /* WPA3 enterprise transition mode authentication type */ WDRV_PIC32MZW_AUTH_TYPE_WPA2WPA3_ENTERPRISE /* WPA3 enterprise authentication type */ WDRV_PIC32MZW_AUTH_TYPE_WPA3_ENTERPRISE /* Authentication types with this value or above are not recognised */ WDRV_PIC32MZW_AUTH_TYPE_MAX } WDRV_PIC32MZW_AUTH_TYPE; ",
							" Summary List of possible authentication types ",
							" Description This type defines the possible authentication types that can be requested in AP mode or STA mode ",
							" Remarks None ",
							" WDRV_PIC32MZW_AuthCtxConfigureMfp Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_AuthCtxConfigureMfp ( WDRV_PIC32MZW_AUTH_CONTEXT *const pAuthCtx WDRV_PIC32MZW_AUTH_MFP_CONFIG config ) ",
							" Summary Set the Management Frame Protection configuration of an authentication context ",
							" Description The authentication context is updated with the Management Frame Protection configuration specified in the config parameter ",
							" Precondition None ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context config The required Management Frame Protection configuration ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The context has been updated WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks Not all MFP configurations are compatible with all auth types When an auth context is applied the MFP configuration is ignored if it is not compatible with the auth type The MFP configuration is initialised to WDRV_PIC32MZW_AUTH_MFP_ENABLED by WDRV_PIC32MZW_AuthCtxSetPersonal and WDRV_PIC32MZW_AuthCtxSetEnterpriseTLS ",
							" WDRV_PIC32MZW_AuthCtxIsValid Function ",
							" C bool WDRV_PIC32MZW_AuthCtxIsValid(const WDRV_PIC32MZW_AUTH_CONTEXT *const pAuthCtx) ",
							" Summary Tests if an authentication context is valid ",
							" Description Tests the elements of the authentication context to judge if their values are legal ",
							" Precondition None ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context ",
							" Returns true or false indicating if context is valid ",
							" Remarks None ",
							" WDRV_PIC32MZW_AuthCtxSetDefaults Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_AuthCtxSetDefaults ( WDRV_PIC32MZW_AUTH_CONTEXT *const pAuthCtx ) ",
							" Summary Configures an authentication context into a default state ",
							" Description Ensures that each element of the structure is configured into a default state ",
							" Precondition None ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The context has been configured WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks A default context is not valid until it is configured ",
							" WDRV_PIC32MZW_AuthCtxSetEnterpriseTLS Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_AuthCtxSetEnterpriseTLS ( WDRV_PIC32MZW_AUTH_CONTEXT *const pAuthCtx const char *const pUserDomain WDRV_PIC32MZW_TLS_CONTEXT_HANDLE tlsCtxHandle WDRV_PIC32MZW_AUTH_TYPE authType ) ",
							" Summary Configure an authentication context for WPA-Enterprise authentication using TLS ",
							" Description The type and state information are configured appropriately for WPA-Enterprise authentication The Management Frame Protection configuration is initialized to WDRV_PIC32MZW_AUTH_MFP_ENABLED ",
							" Precondition Wolfssl TLS context handle is created and all the required certs and keys are loaded peer server certificate validation is enabled using the appropriate wolfssl APIs Below is the example code for reference: WDRV_PIC32MZW_TLS_CONTEXT_HANDLE APP_Create_TLS_Context( const uint8_t *const pCAcert uint16_t u16CAcertLen int caCertFormat const uint8_t *const pCert uint16_t u16CertLen int privCertFormat const uint8_t *const pPriKey uint16_t u16PriKeyLen int privKeyFormat) { WOLFSSL_CTX *pTlsCtx = NULL; if ((NULL == pCAcert) || (NULL == pCert) || (NULL == pPriKey)) { return WDRV_PIC32MZW_TLS_CONTEXT_HANDLE_INVALID; } if ((u16CAcertLen == 0) || (u16CertLen == 0) || (u16PriKeyLen == 0 )) { return WDRV_PIC32MZW_TLS_CONTEXT_HANDLE_INVALID; } // Validate cert and key formats if ( ((WOLFSSL_FILETYPE_PEM == caCertFormat) || (WOLFSSL_FILETYPE_ASN1 == caCertFormat))) { return WDRV_PIC32MZW_TLS_CONTEXT_HANDLE_INVALID; } if ( ((WOLFSSL_FILETYPE_PEM == privCertFormat) || (WOLFSSL_FILETYPE_ASN1 == privCertFormat))) { return WDRV_PIC32MZW_TLS_CONTEXT_HANDLE_INVALID; } if ( ((WOLFSSL_FILETYPE_PEM == privKeyFormat) || (WOLFSSL_FILETYPE_ASN1 == privKeyFormat))) { return WDRV_PIC32MZW_TLS_CONTEXT_HANDLE_INVALID; } // Create wolfssl context with TLS v1 2 pTlsCtx = wolfSSL_CTX_new(wolfTLSv1_2_client_method()); if (NULL == pTlsCtx) { return WDRV_PIC32MZW_TLS_CONTEXT_HANDLE_INVALID; } // Load CA certificate into WOLFSSL_CTX for validating peer if (SSL_SUCCESS = wolfSSL_CTX_load_verify_buffer(pTlsCtx pCAcert u16CAcertLen caCertFormat)) { wolfSSL_CTX_free(pTlsCtx); return WDRV_PIC32MZW_TLS_CONTEXT_HANDLE_INVALID; } // Verify the certificate received from the server during the handshake wolfSSL_CTX_set_verify(pTlsCtx WOLFSSL_VERIFY_PEER 0); // Load client certificate into WOLFSSL_CTX if (SSL_SUCCESS = wolfSSL_CTX_use_certificate_buffer(pTlsCtx pCert u16CertLen privCertFormat)) { wolfSSL_CTX_free(pTlsCtx); return WDRV_PIC32MZW_TLS_CONTEXT_HANDLE_INVALID; } // Load client key into WOLFSSL_CTX if (SSL_SUCCESS = wolfSSL_CTX_use_PrivateKey_buffer(pTlsCtx pPriKey u16PriKeyLen privKeyFormat)) { wolfSSL_CTX_free(pTlsCtx); return WDRV_PIC32MZW_TLS_CONTEXT_HANDLE_INVALID; } return (WDRV_PIC32MZW_TLS_CONTEXT_HANDLE) pTlsCtx; } ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context authType Authentication type pUserDomain Pointer to user and domain name tlsCtxHandle Wolfssl TLS Context handle ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The context has been configured WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_PIC32MZW_AuthCtxSetOpen Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_AuthCtxSetOpen ( WDRV_PIC32MZW_AUTH_CONTEXT *const pAuthCtx ) ",
							" Summary Configure an authentication context for Open authentication ",
							" Description The auth type and information are configured appropriately for Open authentication ",
							" Precondition None ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The context has been configured WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_PIC32MZW_AuthCtxSetPersonal Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_AuthCtxSetPersonal ( WDRV_PIC32MZW_AUTH_CONTEXT *const pAuthCtx uint8_t *pPassword uint8_t size WDRV_PIC32MZW_AUTH_TYPE authType ) ",
							" Summary Configure an authentication context for WPA personal authentication ",
							" Description The auth type and information are configured appropriately for personal authentication with the password or PSK provided The Management Frame Protection configuration is initialised to WDRV_PIC32MZW_AUTH_MFP_ENABLED ",
							" Precondition None ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context pPassword Pointer to password (or 64-character PSK) size Size of password (or 64 for PSK) authType Authentication type (or WDRV_PIC32MZW_AUTH_TYPE_DEFAULT) ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The context has been configured WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_PIC32MZW_AuthCtxSharedKey Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_AuthCtxSharedKey ( WDRV_PIC32MZW_AUTH_CONTEXT *const pAuthCtx bool enable ) ",
							" Summary Enable or disable Shared Key authentication in an authentication context ",
							" Description The authentication context is updated to enable or disable Shared Key authentication ",
							" Precondition None ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context enable True to enable Shared Key authentication false to disable ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The context has been updated WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks Shared Key authentication is initialised as disabled by WDRV_PIC32MZW_AuthCtxSetWEP Shared Key is not available when the device is an authenticator Shared Key authentication is only attempted if Open System authentication fails (i e not supported by the authenticator) ",
							" WDRV_PIC32MZW_AuthCtxApTransitionDisable Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_AuthCtxApTransitionDisable ( WDRV_PIC32MZW_AUTH_CONTEXT *const pAuthCtx bool tdOn ) ",
							" Summary Turn on/off the transition disable feature in AP mode ",
							" Description The authentication context is updated to turn on/off the transmission of a transition disable element in AP mode ",
							" Precondition None ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context enableTD True to turn on transition disable false to turn it off ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The context has been updated WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks The transition disable element instructs STAs to disable transition security algorithms (i e AKM suites 2 and 6) from their network profile for this ESS ",
							" WDRV_PIC32MZW_AuthCtxStaTransitionDisable Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_AuthCtxStaTransitionDisable ( WDRV_PIC32MZW_AUTH_CONTEXT *const pAuthCtx ) ",
							" Summary Disable transition security algorithms in STA mode ",
							" Description The authentication context is updated to disable transition security algorithms in STA mode ",
							" Precondition None ",
							" Parameters Param Description pAuthCtx Pointer to an authentication context ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The context has been updated WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks The transition security algorithms to be disabled are the TKIP cipher and AKM suites 1 2 and 6 ",
							" Client - Association APIs This interface provides information about the current association with a peer device ",
							" WDRV_PIC32MZW_ASSOC_HANDLE_INVALID Macro ",
							" C #define WDRV_PIC32MZW_ASSOC_HANDLE_INVALID (((WDRV_PIC32MZW_ASSOC_HANDLE) -1)) ",
							" Summary Invalid association handle ",
							" Description Defines a value for an association handle which isn't yet valid ",
							" Remarks None ",
							" WDRV_PIC32MZW_ASSOC_RSSI_CALLBACK Typedef ",
							" C typedef void (*WDRV_PIC32MZW_ASSOC_RSSI_CALLBACK) ",
							" Summary A callback to provide the current RSSI of the current association ",
							" Description This callback provides details of the signal strength (RSSI) of the current association ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open assocHandle Association handle rssi The current RSSI of the association ",
							" Returns None ",
							" Remarks None ",
							" WDRV_PIC32MZW_ASSOC_HANDLE; Typedef ",
							" C typedef uintptr_t WDRV_PIC32MZW_ASSOC_HANDLE; ",
							" Summary A handle representing an association instance ",
							" Description An association handle references a single association instance between AP and STA ",
							" Remarks None ",
							" WDRV_PIC32MZW_ASSOC_INFO Struct ",
							" C typedef struct { /* Primary driver handle */ DRV_HANDLE handle; /* MAC address of peer device */ WDRV_PIC32MZW_MAC_ADDR peerAddress; /* Authentication type used */ WDRV_PIC32MZW_AUTH_TYPE authType; /* Whether the AP sent a transition disable element in this association */ bool transitionDisable; /* Last RSSI value read */ int8_t rssi; /* Association ID */ uint8_t assocID; } WDRV_PIC32MZW_ASSOC_INFO; ",
							" Summary Structure containing information about an association ",
							" Description This structure contains the association information for a connection between an AP and STA ",
							" Remarks None ",
							" WDRV_PIC32MZW_AssocDisconnect Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_AssocDisconnect(WDRV_PIC32MZW_ASSOC_HANDLE assocHandle) ",
							" Summary Disconnects an association ",
							" Description This API disconnects the STA associated with softAP based on the input association handle Association handle is updated to the application whenever a new STA is connected to the softAP This API can also be used in STA mode to disconnect the STA from an AP ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle WDRV_PIC32MZW_APStart should have been called to start softAP in softAP mode WDRV_PIC32MZW_BSSConnect should have been called to connect to an AP in STA mode ",
							" Parameters Param Description assocHandle WDRV_PIC32MZW_ASSOC_HANDLE obtained when STA joins an AP or an association is done ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected WDRV_PIC32MZW_STATUS_NOT_CONNECTED - The association isn't valid ",
							" Remarks None ",
							" WDRV_PIC32MZW_AssocPeerAddressGet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_AssocPeerAddressGet ( WDRV_PIC32MZW_ASSOC_HANDLE assocHandle WDRV_PIC32MZW_MAC_ADDR *const pPeerAddress ) ",
							" Summary Retrieve the current association peer device network address ",
							" Description Attempts to retrieve the network address of the peer device in the current association ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle A peer device needs to be connected and associated ",
							" Parameters Param Description assocHandle Association handle pPeerAddress Pointer to structure to receive the network address ",
							" Returns WDRV_PIC32MZW_STATUS_OK - pPeerAddress will contain the network address WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected or there is no current association WDRV_PIC32MZW_STATUS_RETRY_REQUEST - The network address is not available but it will be requested from the PIC32MZW WDRV_PIC32MZW_STATUS_NOT_CONNECTED - Not currently connected ",
							" Remarks If the network address is not currently known to the driver (stored within the PIC32MZW) a request will be sent to the PIC32MZW and the return status will be WDRV_PIC32MZW_STATUS_RETRY_REQUEST ",
							" WDRV_PIC32MZW_AssocRSSIGet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_AssocRSSIGet ( WDRV_PIC32MZW_ASSOC_HANDLE assocHandle int8_t *const pRSSI WDRV_PIC32MZW_ASSOC_RSSI_CALLBACK const pfAssociationRSSICB ) ",
							" Summary Retrieve the current association RSSI ",
							" Description Attempts to retrieve the RSSI of the current association ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle A peer device needs to be connected and associated ",
							" Parameters Param Description assocHandle Association handle pRSSI Pointer to variable to receive RSSI if available pfAssociationRSSICB Pointer to callback function to be used when RSSI value is available ",
							" Returns WDRV_PIC32MZW_STATUS_OK - pRSSI will contain the RSSI WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected or there is no current association WDRV_PIC32MZW_STATUS_RETRY_REQUEST - The RSSI is not available but it will be requested from the PIC32MZW WDRV_PIC32MZW_STATUS_NOT_CONNECTED - Not currently connected ",
							" Remarks If the RSSI is not currently known to the driver (stored within the PIC32MZW) a request will be sent to the PIC32MZW and the return status will be WDRV_PIC32MZW_STATUS_RETRY_REQUEST The callback function pfAssociationRSSICB can be provided which will be called when the PIC32MZW provides the RSSI information to the driver Alternatively the caller may poll this function until the return status is WDRV_PIC32MZW_STATUS_OK to obtain the RSSI in pRSSI ",
							" WDRV_PIC32MZW_AssocTransitionDisableGet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_AssocTransitionDisableGet ( WDRV_PIC32MZW_ASSOC_HANDLE assocHandle bool *const pTransitionDisable ) ",
							" Summary Determine whether transition algorithms should be disabled for this network ",
							" Description Determines whether a WPA3 transition disable element was sent by the device (if the device is in AP mode) or received from the peer AP (if the device is in STA mode) during the 4-way handshake of the current association ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle A peer device needs to be connected and associated ",
							" Parameters Param Description assocHandle Association handle pTransitionDisable Pointer to variable to receive the transition disable status (true if transition algorithms should be disabled false otherwise) ",
							" Returns WDRV_PIC32MZW_STATUS_OK - pPeerAddress will contain the network address WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected or there is no current association WDRV_PIC32MZW_STATUS_NOT_CONNECTED - Not currently connected ",
							" Remarks In STA mode if the output is true then the application should set the WDRV_PIC32MZW_AUTH_MOD_STA_TD modifier in the Auth context for all subsequent connection requests to this ESS See WDRV_PIC32MZW_AuthCtxStaTransitionDisable ",
							" Client Interface - STA mode APIs The PIC32MZW1 device can connect to a BSS as a Wi-Fi station device To connect to a BSS the function WDRV_PIC32MZW_BSSConnect can be called this takes two contexts which provide information about the BSS to be connected to and the authentication method to be used A callback is provided to communicate events back to the application regarding connection status ",
							" WDRV_PIC32MZW_BSSConnect Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_BSSConnect ( DRV_HANDLE handle const WDRV_PIC32MZW_BSS_CONTEXT *const pBSSCtx const WDRV_PIC32MZW_AUTH_CONTEXT *const pAuthCtx const WDRV_PIC32MZW_BSSCON_NOTIFY_CALLBACK pfNotifyCallback ) ",
							" Summary Connects to a BSS in infrastructure station mode ",
							" Description Using the defined BSS and authentication contexts this function requests the PIC32MZW connect to the BSS as an infrastructure station ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle A BSS context must have been created and initialized An authentication context must have been created and initialized ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open pBSSCtx Pointer to BSS context pAuthCtx Pointer to authentication context pfNotifyCallback Pointer to notification callback function ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected WDRV_PIC32MZW_STATUS_INVALID_CONTEXT - The BSS context is not valid WDRV_PIC32MZW_STATUS_CONNECT_FAIL - The connection has failed ",
							" Remarks If pBSSCtx and pAuthCtx are both NULL then no connection will be attempted however the pfNotifyCallback callback will still be accepted even if a connection is active ",
							" WDRV_PIC32MZW_BSSDisconnect Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_BSSDisconnect(DRV_HANDLE handle) ",
							" Summary Disconnects from a BSS ",
							" Description Disconnects from an existing BSS ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_DISCONNECT_FAIL - The disconnection has failed WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected ",
							" Remarks None ",
							" Client Interface - Soft AP mode APIs The PIC32MZW1 device can create a Soft-AP allowing a Wi-Fi station device to connect to the PIC32MZW1 To create a Soft-AP the function WDRV_PIC32MZW_APStart is called This function takes several context structures to config aspects of the Soft-AP operation these contexts are: BSS - Describes the BSS which will be created Authentication - Describes the security level to be used Specification of a BSS context is required If no authentication context is provided the Wi-Fi driver will create a Soft-AP with no security A callback is also provided to update the application on events To stop using the Soft-AP the function WDRV_PIC32MZW_APStop is called ",
							" WDRV_PIC32MZW_SEC_MASK Enum ",
							" C typedef enum { /* AP supports WEP-40 or WEP-104 as standalone or as GTK with 11i TSN */ WDRV_PIC32MZW_SEC_BIT_WEP = 0x01 /* AP supports TKIP as GTK (if not WEP) and PTK */ WDRV_PIC32MZW_SEC_BIT_WPA = 0x02 /* AP includes RSNE and supports CCMP-128 as GTK (if not TKIP or WEP) and PTK */ WDRV_PIC32MZW_SEC_BIT_WPA2OR3 = 0x04 /* AP supports BIP-CMAC-128 as IGTK */ WDRV_PIC32MZW_SEC_BIT_MFP_CAPABLE = 0x08 /* AP requires management frame protection */ WDRV_PIC32MZW_SEC_BIT_MFP_REQUIRED = 0x10 /* AP supports 802 1x authentication */ WDRV_PIC32MZW_SEC_BIT_ENTERPRISE = 0x20 /* AP supports PSK authentication */ WDRV_PIC32MZW_SEC_BIT_PSK = 0x40 /* AP supports SAE authentication */ WDRV_PIC32MZW_SEC_BIT_SAE = 0x80 } WDRV_PIC32MZW_SEC_MASK; ",
							" Summary List of possible security capabilities ",
							" Description The security capabilities that may be offered by an AP ",
							" Remarks None ",
							" WDRV_PIC32MZW_APStart Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_APStart ( DRV_HANDLE handle const WDRV_PIC32MZW_BSS_CONTEXT *const pBSSCtx const WDRV_PIC32MZW_AUTH_CONTEXT *const pAuthCtx const WDRV_PIC32MZW_BSSCON_NOTIFY_CALLBACK pfNotifyCallback ) ",
							" Summary Starts an instance of Soft-AP ",
							" Description Using the defined BSS and authentication contexts with an optional HTTP provisioning context (socket mode only) this function creates and starts a Soft-AP instance ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle A BSS context must have been created and initialized An authentication context must have been created and initialized ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open pBSSCtx Pointer to BSS context pAuthCtx Pointer to authentication context pfNotifyCallback Pointer to notification callback function ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected WDRV_PIC32MZW_STATUS_INVALID_CONTEXT - The BSS context is not valid ",
							" Remarks If pBSSCtx and pAuthCtx are both NULL then no AP will be established however the pfNotifyCallback callback will still be accepted even if an AP is active ",
							" WDRV_PIC32MZW_APStop Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_APStop(DRV_HANDLE handle) ",
							" Summary Stops an instance of Soft-AP ",
							" Description Stops an instance of Soft-AP ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected ",
							" Remarks None ",
							" WDRV_PIC32MZW_APRekeyIntervalSet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_APRekeyIntervalSet ( DRV_HANDLE handle const uint32_t interval ) ",
							" Summary Configures the group re-key interval used when operating in Soft-AP mode ",
							" Description The re-key interval specifies how much time must elapse before a group re-key is initiated with connected stations The timer is restarted after each group re-key ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open interval The time in seconds that must pass before each re-key attempt The minimum time value is 60 seconds Defaults to 86400 ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected ",
							" Remarks Takes effect after the next re-key - if an interval other than the default is desired then it is recommended to call this API before calling WDRV_PIC32MZW_APStart ",
							" WDRV_PIC32MZW_APSetCustIE Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_APSetCustIE ( DRV_HANDLE handle const WDRV_PIC32MZW_CUST_IE_STORE_CONTEXT *const pCustIECtx ) ",
							" Summary Configures the custom IE ",
							" Description Soft-AP beacons may contain an application provided custom IE This function associates a custom IE store context with the Soft-AP instance ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open pCustIECtx Pointer to custom IE store context ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected ",
							" Remarks None ",
							" 802 11 Powersave API ",
							" WDRV_PIC32MZW_PS_NOTIFY_CALLBACK Typedef ",
							" C typedef void (*WDRV_PIC32MZW_PS_NOTIFY_CALLBACK) ",
							" Summary Callback to signal sleep entry of SMC(WSM/WDS) and exit of powersave cycle ",
							" Description After WiFi power-save mode is set by the user the driver will use this callback to provide notification on each sleep entry of power-save sleep-wakeup-sleep cycle and exit notification of power-save cycle on error OR on user trigger to Run mode ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open psMode Current power-save mode bSleepEntry TRUE on sleep entry FALSE on power-save cycle exit u32SleepDurationMs Duration of sleep configured for SMC(WSM/WDS) ",
							" Remarks The user can take necessary action on sleep entry For ex configure RTCC and put PIC to sleep/idle ",
							" WDRV_PIC32MZW_POWERSAVE_MODE Enum ",
							" C typedef enum { /* Run mode : No power-save Both TX and RX are active */ WDRV_PIC32MZW_POWERSAVE_RUN_MODE = 0 /* WSM mode : Wireless sleep mode TX and RX are stopped clocks will be running STA will be in power-save mode keeping the connection active with AP */ WDRV_PIC32MZW_POWERSAVE_WSM_MODE = 1 /* WDS mode : Wireless Deep sleep mode TX and RX are stopped clocks will be cutoff STA will be in power-save mode keeping the connection active with AP */ WDRV_PIC32MZW_POWERSAVE_WDS_MODE = 2 } WDRV_PIC32MZW_POWERSAVE_MODE; ",
							" Summary Defines the power save modes supported by the WiFi driver/firmware ",
							" Description This enumeration defines the various WiFi power save modes supported by the WiFi driver/firmware ",
							" WDRV_PIC32MZW_POWERSAVE_PIC_CORRELATION Enum ",
							" C typedef enum { /* Asynchronous correlation Trigger of sleep mode entry/exit is done through software */ WDRV_PIC32MZW_POWERSAVE_PIC_ASYNC_MODE = 0 /* Synchronous correlation Trigger of sleep mode entry/exit is done through hardware */ WDRV_PIC32MZW_POWERSAVE_PIC_SYNC_MODE = 1 } WDRV_PIC32MZW_POWERSAVE_PIC_CORRELATION; ",
							" Summary Defines the correlation between WiFi and PIC sleep modes ",
							" Description This enumeration defines the correlation between WiFi and PIC sleep modes WDRV_PIC32MZW_POWERSAVE_PIC_ASYNC_MODE - PIC sleep entry forces WiFi into Sleep PIC wakeup (non WiFi) can be independent of the WiFi sleep modes WiFi sleep entry can be independent of the PIC sleep mode entry WiFi wakeup to RUN mode will force PIC into RUN mode WDRV_PIC32MZW_POWERSAVE_PIC_SYNC_MODE - PIC sleep entry forces the WiFi into sleep mode and vice-versa PIC wakeup forces the WiFi sleep exit(Run) and vice-versa ",
							" Remarks None ",
							" WDRV_PIC32MZW_PowerSaveModeSet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_PowerSaveModeSet ( DRV_HANDLE handle WDRV_PIC32MZW_POWERSAVE_MODE powerSaveMode WDRV_PIC32MZW_POWERSAVE_CORRELATION picCorrelation WDRV_PIC32MZW_PS_NOTIFY_CALLBACK pfNotifyCallback ) ",
							" Summary Set the power-save/sleep mode for WiFi ",
							" Description Requests that the current power-save mode is changed to the one specified according to the parameters ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle WiFi must not currently be configured as a Soft-AP ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open powerSaveMode Power-save mode for WiFi picCorrelation PIC-WiFi power-save correlation mode pfNotifyCallback Callback function to receive sleep entry notification ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected WDRV_PIC32MZW_STATUS_OPERATION_NOT_SUPPORTED - The requested operation is not supported ",
							" Remarks Async Correlation Mode: powerSaveMode is applied immediately WSM/WDS mode will apply even though the PIC is currently in the RUN state Sync Correlation Mode: powerSaveMode is applied to the WiFi when the PIC next enters sleep mode In either mode powerSaveMode of RUN will cause the WiFi to leave power-save mode and enter RUN mode ",
							" WDRV_PIC32MZW_PowerSaveBroadcastTrackingSet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_PowerSaveBroadcastTrackingSet ( DRV_HANDLE handle bool dtimTracking ); ",
							" Summary Configures the WiFi broadcast traffic wake up behaviour ",
							" Description Configures if the WiFi should wake for DTIM broadcast traffic or not ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open dtimTracking Flag indicating if the WiFi should wake at DTIM intervals ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected ",
							" Remarks None ",
							" WDRV_PIC32MZW_PowerSaveListenIntervalSet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_PowerSaveListenIntervalSet ( DRV_HANDLE handle uint16_t u16ListenInt ); ",
							" Summary Set the Wi-Fi listen interval for power save operation(in beacon period count) ",
							" Description Set the Wi-Fi listen interval value for power save operation It is given in units of Beacon period Periodically after the listen interval fires the WiFi wakes up and listen to the beacon and check for any buffered frames for it from the AP A default value of 10 is used by the WiFi stack for listen interval The user can override that value via this API ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open u16ListenInt Listen interval in units of beacon period ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected ",
							" Remarks WDRV_PIC32MZW_PowerSaveListenIntervalSet should be called before WDRV_PIC32MZW_BSSConnect ",
							" WDRV_PIC32MZW_PowerSaveSleepInactLimitSet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_PowerSaveSleepInactLimitSet ( DRV_HANDLE handle uint16_t u16SleepInactLimit ); ",
							" Summary Set the sleep inactivity(assoc-timeout) threshold/limit for power save operation (in beacon period count) ",
							" Description Set the sleep inactivity threshold/limit value for power save operation It is given in units of Beacon period During power-save if there is no activity in the BSS for the number of beacons specified by u16SleepInactLimit a NULL frame will be sent to the AP This is done to avoid the AP de-authenticating the STA during an inactivity period A default value of 10(ie 10 ms) is used by the WiFi stack as Inactivity timeout limit The user can override that value via this API ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open u16SleepInactLimit Inactivity threshold in units of Beacon period ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected ",
							" Remarks WDRV_PIC32MZW_PowerSaveSleepInactLimitSet should be called before WDRV_PIC32MZW_BSSConnect ",
							" Regulatory Domain Selection APIs NOTE: There are restrictions on use of this API especially related to any exposure of this functionality to an end user Please refer to the Radio Performance section of the Datasheet” ",
							" WDRV_PIC32MZW_REGDOMAIN_CALLBACK Typedef ",
							" C typedef void (*WDRV_PIC32MZW_REGDOMAIN_CALLBACK) ",
							" Summary Pointer to a regulatory domain callback ",
							" Description This defines a function pointer to a regulatory domain callback which will receive information about a single domain ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open index Index with a grouping of regulatory domains ofTotal Total number of domain within a grouping isCurrent Is this domain the currently active one pRegDomInfo Pointer to WDRV_PIC32MZW_REGDOMAIN_INFO of regulatory domain ",
							" Returns None ",
							" Remarks When called in response to WDRV_PIC32MZW_RegDomainGet this callback will receive a grouping of 'ofTotal' domain records An empty grouping is indicated by pRegDomain being blank (empty or NULL) and ofTotal being zero When called in response to WDRV_PIC32MZW_RegDomainSet this callback will receive either a single group of the request domain as confirmation of application or ofTotal will be zero ",
							" WDRV_PIC32MZW_REGDOMAIN_SELECT Enum ",
							" C typedef enum { WDRV_PIC32MZW_REGDOMAIN_SELECT_NONE WDRV_PIC32MZW_REGDOMAIN_SELECT_CURRENT WDRV_PIC32MZW_REGDOMAIN_SELECT_ALL } WDRV_PIC32MZW_REGDOMAIN_SELECT; ",
							" Summary Defines possible selections of regulatory domains ",
							" Description Specifies a grouping of regulatory domains ",
							" Remarks None ",
							" WDRV_PIC32MZW_RF_MAC_CONFIG Struct ",
							" C typedef struct _WDRV_PIC32MZW_RF_MAC_CONFIG { /* Flag indicating if Power ON calibration is valid */ bool powerOnCalIsValid; /* Flag indicating if Factory calibration is valid */ bool factoryCalIsValid; /* Flag indicating if Gain table is valid */ bool gainTableIsValid; /* Flag indicating if MAC address is valid */ bool macAddressIsValid; } WDRV_PIC32MZW_RF_MAC_CONFIG; ",
							" Summary RF and MAC configurations for the PIC32MZW ",
							" Description Structure updates the various RF and MAC configurations is valid or not ",
							" Remarks None ",
							" WDRV_PIC32MZW_RegDomainGet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_RegDomainGet ( DRV_HANDLE handle const WDRV_PIC32MZW_REGDOMAIN_SELECT selection const WDRV_PIC32MZW_REGDOMAIN_CALLBACK pfRegDomCallback ) ",
							" Summary Requests information about regulatory domains ",
							" Description Requests either the currently active regulatory domain or all possible regulatory domains ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open selection Type of regulatory domain information to retrieve pfRegDomCallback Pointer to callback function to receive the information ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected ",
							" Remarks None ",
							" WDRV_PIC32MZW_RegDomainSet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_RegDomainSet ( DRV_HANDLE handle const char *pRegDomain const WDRV_PIC32MZW_REGDOMAIN_CALLBACK pfRegDomCallback ) ",
							" Summary Attempts to set the current regulatory domain ",
							" Description Requests that the current regulatory domain is changed to the one specified ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open pRegDomain Pointer to a null-terminated string which should match the name of one of the domains defined in device flash memory The length of the string can be maximum 6 characters pfRegDomCallback Pointer to callback function to receive confirmation ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected ",
							" Remarks If the requested regulatory domain is not found in the device flash then the domain remains unchanged (even though the return value is STATUS_OK) See also WDRV_PIC32MZW_RegDomainGet ",
							" Vendor IE API Implementation ",
							" WDRV_PIC32MZW_IE_FRAME_TYPE_MASK Enum ",
							" C typedef enum { /* If set in Tx API the custom IE data provided by the application will be * added to the beacon frames while transmitting beacons If set in Rx API * the vendor specific IE data from the received beacon frames will be * passed to the application */ WDRV_PIC32MZW_VENDOR_IE_BEACON = 0x01 /* If set in Tx API the custom IE data provided by the application will be * added to the probe request frames while transmitting probe requests If * set in Rx API the vendor specific IE data from the received probe request * frames will be passed to the application */ WDRV_PIC32MZW_VENDOR_IE_PROBE_REQ = 0x02 /* If set in Tx API the custom IE data provided by the application will be * added to the probe response frames while transmitting probe responses If * set in Rx API the vendor specific IE data from the received probe * response frames will be passed to the application */ WDRV_PIC32MZW_VENDOR_IE_PROBE_RSP = 0x04 } WDRV_PIC32MZW_IE_FRAME_TYPE_MASK; ",
							" Summary Defines frame filter mask values which is used while Rx/Tx of vendor IE tags ",
							" Description Filter mask enables the application to choose the frame types on which custom IE can be added while Tx and the frame types from which vendor specific IE data can be extracted at Rx ",
							" Remarks Bit position value 1 enables and 0 disables Rx/Tx of vendor IE data ",
							" WDRV_PIC32MZW_IE_RX_CALLBACK Typedef ",
							" C typedef void (*WDRV_PIC32MZW_IE_RX_CALLBACK) ",
							" Summary Pointer to a callback function to receive vendor specific IE data and related information ",
							" Description This defines a function pointer to a vendor specific IE callback which will receive IE tag data and some relevant information like source MAC address received frame type and rssi of the received frame ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open totalLen Total length of received vendor specific IEs ieData Pointer to a byte array of received vendor specific IEs pIEInfo Pointer to WDRV_PIC32MZW_VENDORIE_INFO structure ",
							" Returns None ",
							" Remarks The callback has to be set to start receiving vendor specific IEs The IEs are received based on the vendor OUI and frame filter mask set using the API WDRV_PIC32MZW_CustIEGetRxData ",
							" WDRV_PIC32MZW_VENDORIE_INFO Struct ",
							" C typedef struct { uint8_t sa[6]; int8_t rssi; WDRV_PIC32MZW_IE_FRAME_TYPE_MASK frameType; } WDRV_PIC32MZW_VENDORIE_INFO; ",
							" Summary Defines received vendor specific IE related information ",
							" Description Provides more information on the received vendor specific IE such as MAC address of the source frame type on which the IE was received and RSSI of the received frame ",
							" Remarks RSSI is received in dBm frameType is of type WDRV_PIC32MZW_IE_FRAME_TYPE_MASK ",
							" WDRV_PIC32MZW_IECustTxDataSet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_IECustTxDataSet ( DRV_HANDLE handle WDRV_PIC32MZW_IE_FRAME_TYPE_MASK frameMask const WDRV_PIC32MZW_CUST_IE_STORE_CONTEXT *const pCustIECtx ) ",
							" Summary Configures the custom IE ",
							" Description Management frames like beacons probe request and probe response may contain an application provided custom IE This function associates a custom IE store context with the STA/AP instance ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle WDRV_PIC32MZW_CustIEStoreCtxSetStorage should have been called to create a valid IE store context ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open frameMask Frame filter mask to add custom IE store pCustIECtx Pointer to custom IE store context ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected ",
							" Remarks Before calling the API WDRV_PIC32MZW_IECustTxDataSet it is expected that IE storage is created using the API WDRV_PIC32MZW_CustIEStoreCtxSetStorage 2 IEs can be added to the storage or removed from the storage using APIs WDRV_PIC32MZW_CustIEStoreCtxAddIE and WDRV_PIC32MZW_CustIEStoreCtxRemoveIE 3 To stop transmitting custom vendor specific IEs this API can be called with frameMask = 0 ",
							" WDRV_PIC32MZW_IERxDataGet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_IERxDataGet ( DRV_HANDLE handle WDRV_PIC32MZW_IE_FRAME_TYPE_MASK frameMask const uint32_t vendorOUI const WDRV_PIC32MZW_IE_RX_CALLBACK pfVendorIERxCB ) ",
							" Summary Registers callback function for received vendor specific IE data ",
							" Description Managements frames like beacons probe request and probe response may contain vendor specific IEs This API enables application to receive vendor specific IE extracted from management frames based on the vendor OUI and frame filter mask provided by the application ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open frameMask Frame filter mask of type WDRV_PIC32MZW_IE_FRAME_TYPE_MASK vendorOUI Vendor OUI of the organization pfVendorIERxCB Pointer to callback function to receive IE data ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected ",
							" Remarks To start receiving vendor specific IE data application must provide valid frameMask and vendorOUI 2 To stop receiving IE data this API can be called with frameMask 0 3 The parameter vendorOUI is organization's OUI of which IEs are being looked for Example 1: If the organization's OUI is 24 bit like 80-1F-12 the parameter vendorOUI is expected to be 0x801F12 or decimal 8396562 Example 2: If the organization's OUI is 36 bit OUI the first three bytes (IEEE Registration Authority) of the OUI-36 should be used for the parameter vendorOUI So if the organization's 36 bit OUI is 70-B3-D5-77-F the parameter vendorOUI is expected to be 0x70B3D5 or decimal 7386069 In this case the application will receive all IEs matching to the OUI value 70-B3-D5 then it is the application's job to filter the 77-F ones ",
							" Client - Information APIs This interface provides general information about the device ",
							" WDRV_PIC32MZW_CHANNEL_ID Enum ",
							" C typedef enum _WDRV_PIC32MZW_CHANNEL_ID { /* Any valid channel */ WDRV_PIC32MZW_CID_ANY /* 2 4 GHz channel 1 - 2412 MHz */ WDRV_PIC32MZW_CID_2_4G_CH1 /* 2 4 GHz channel 2 - 2417 MHz */ WDRV_PIC32MZW_CID_2_4G_CH2 /* 2 4 GHz channel 3 - 2422 MHz */ WDRV_PIC32MZW_CID_2_4G_CH3 /* 2 4 GHz channel 4 - 2427 MHz */ WDRV_PIC32MZW_CID_2_4G_CH4 /* 2 4 GHz channel 5 - 2432 MHz */ WDRV_PIC32MZW_CID_2_4G_CH5 /* 2 4 GHz channel 6 - 2437 MHz */ WDRV_PIC32MZW_CID_2_4G_CH6 /* 2 4 GHz channel 7 - 2442 MHz */ WDRV_PIC32MZW_CID_2_4G_CH7 /* 2 4 GHz channel 8 - 2447 MHz */ WDRV_PIC32MZW_CID_2_4G_CH8 /* 2 4 GHz channel 9 - 2452 MHz */ WDRV_PIC32MZW_CID_2_4G_CH9 /* 2 4 GHz channel 10 - 2457 MHz */ WDRV_PIC32MZW_CID_2_4G_CH10 /* 2 4 GHz channel 11 - 2462 MHz */ WDRV_PIC32MZW_CID_2_4G_CH11 /* 2 4 GHz channel 12 - 2467 MHz */ WDRV_PIC32MZW_CID_2_4G_CH12 /* 2 4 GHz channel 13 - 2472 MHz */ WDRV_PIC32MZW_CID_2_4G_CH13 } WDRV_PIC32MZW_CHANNEL_ID; ",
							" Summary A list of supported WiFi channels ",
							" Description A list of supported WiFi channels ",
							" Remarks None ",
							" WDRV_PIC32MZW_CHANNEL24_MASK Enum ",
							" C typedef enum { /* 2 4GHz (2412 MHz) channel 1 */ WDRV_PIC32MZW_CM_2_4G_CH1 = 0x0001 /* 2 4GHz (2417 MHz) channel 2 */ WDRV_PIC32MZW_CM_2_4G_CH2 = 0x0002 /* 2 4GHz (2422 MHz) channel 3 */ WDRV_PIC32MZW_CM_2_4G_CH3 = 0x0004 /* 2 4GHz (2427 MHz) channel 4 */ WDRV_PIC32MZW_CM_2_4G_CH4 = 0x0008 /* 2 4GHz (2432 MHz) channel 5 */ WDRV_PIC32MZW_CM_2_4G_CH5 = 0x0010 /* 2 4GHz (2437 MHz) channel 6 */ WDRV_PIC32MZW_CM_2_4G_CH6 = 0x0020 /* 2 4GHz (2442 MHz) channel 7 */ WDRV_PIC32MZW_CM_2_4G_CH7 = 0x0040 /* 2 4GHz (2447 MHz) channel 8 */ WDRV_PIC32MZW_CM_2_4G_CH8 = 0x0080 /* 2 4GHz (2452 MHz) channel 9 */ WDRV_PIC32MZW_CM_2_4G_CH9 = 0x0100 /* 2 4GHz (2457 MHz) channel 10 */ WDRV_PIC32MZW_CM_2_4G_CH10 = 0x0200 /* 2 4GHz (2462 MHz) channel 11 */ WDRV_PIC32MZW_CM_2_4G_CH11 = 0x0400 /* 2 4GHz (2467 MHz) channel 12 */ WDRV_PIC32MZW_CM_2_4G_CH12 = 0x0800 /* 2 4GHz (2472 MHz) channel 13 */ WDRV_PIC32MZW_CM_2_4G_CH13 = 0x1000 /* 2 4GHz (2484 MHz) channel 14 */ WDRV_PIC32MZW_CM_2_4G_CH14 = 0x2000 /* 2 4GHz channels 1 through 14 */ WDRV_PIC32MZW_CM_2_4G_ALL = 0x3fff /* 2 4GHz channels 1 through 11 */ WDRV_PIC32MZW_CM_2_4G_DEFAULT = 0x07ff /* 2 4GHz channels 1 through 11 */ WDRV_PIC32MZW_CM_2_4G_NORTH_AMERICA = 0x07ff /* 2 4GHz channels 1 through 13 */ WDRV_PIC32MZW_CM_2_4G_EUROPE = 0x1fff /* 2 4GHz channels 1 through 14 */ WDRV_PIC32MZW_CM_2_4G_ASIA = 0x3fff } WDRV_PIC32MZW_CHANNEL24_MASK; ",
							" Summary List of possible channel mask elements for 2 4GHz ",
							" Description The channel mask consists of a single bit for each discrete channel Channels maybe combined to form groups of channels some of which are defined in this list ",
							" Remarks None ",
							" WDRV_PIC32MZW_CONN_STATE Enum ",
							" C typedef enum { /* Association state is disconnected */ WDRV_PIC32MZW_CONN_STATE_DISCONNECTED /* Association state is connecting */ WDRV_PIC32MZW_CONN_STATE_CONNECTING /* Association state is connected */ WDRV_PIC32MZW_CONN_STATE_CONNECTED /* Association state is connection failed */ WDRV_PIC32MZW_CONN_STATE_FAILED } WDRV_PIC32MZW_CONN_STATE; ",
							" Summary Defines possible connection states ",
							" Description A connection can currently either be connected or disconnect ",
							" Remarks None ",
							" WDRV_PIC32MZW_GetStatistics Function ",
							" C void WDRV_PIC32MZW_GetStatistics ( DRV_HANDLE handle WDRV_PIC32MZW_MAC_MEM_STATISTICS *pStats ); ",
							" Summary Retrieves the static data of the PIC32MZW ",
							" Description Retrieves the static data of the PIC32MZW ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open pStats Pointer to buffer to receive the statistic data ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The information has been returned WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_PIC32MZW_InfoDeviceMACAddressGet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_InfoDeviceMACAddressGet ( DRV_HANDLE handle uint8_t *const pMACAddress ) ",
							" Summary Retrieves the MAC address of the PIC32MZW ",
							" Description Retrieves the current working MAC address ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open pMACAddress Pointer to buffer to receive the MAC address ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The information has been returned WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_PIC32MZW_InfoEnabledChannelsGet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_InfoEnabledChannelsGet ( DRV_HANDLE handle WDRV_PIC32MZW_CHANNEL24_MASK *const pChannelMask ) ",
							" Summary Retrieves the enabled channels of the PIC32MZW ",
							" Description Retrieves the enabled channels for the set regulatory domain ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open pChannelMask Pointer to variable to receive the enabled channels ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The information has been returned WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_PIC32MZW_InfoOpChanGet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_InfoOpChanGet ( DRV_HANDLE handle uint8_t *const pMACAddress ) ",
							" Summary Retrieves the operating channel of the PIC32MZW ",
							" Description Retrieves the current operating channel ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open pOpChan Pointer to variable to receive the operating channel ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The information has been returned WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_NOT_CONNECTED - No current connection ",
							" Remarks None ",
							" WDRV_PIC32MZW_InfoRfMacConfigGet Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_InfoRfMacConfigGet ( DRV_HANDLE handle WDRV_PIC32MZW_RF_MAC_CONFIG *const pRfMacConfig ) ",
							" Summary Retrieves the RF and MAC configuration of the PIC32MZW ",
							" Description Retrieves the current RF and MAC configuration ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open pRfMacConfig Pointer to variable to receive RF and MAC config ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The information has been returned WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect ",
							" Remarks None ",
							" WDRV_PIC32MZW_PMKCacheFlush Function ",
							" C WDRV_PIC32MZW_STATUS WDRV_PIC32MZW_PMKCacheFlush ( DRV_HANDLE handle ) ",
							" Summary Flush the PMK cache ",
							" Description Removes all entries from the local PMK cache ",
							" Precondition WDRV_PIC32MZW_Initialize should have been called WDRV_PIC32MZW_Open should have been called to obtain a valid handle ",
							" Parameters Param Description handle Client handle obtained by a call to WDRV_PIC32MZW_Open ",
							" Returns WDRV_PIC32MZW_STATUS_OK - The request has been accepted WDRV_PIC32MZW_STATUS_NOT_OPEN - The driver instance is not open WDRV_PIC32MZW_STATUS_INVALID_ARG - The parameters were incorrect WDRV_PIC32MZW_STATUS_REQUEST_ERROR - The request to the PIC32MZW was rejected ",
							" Remarks Every SAE (i e WPA3) or 802 1X (Enterprise) authentication as either STA or AP results in a PMK being generated with the peer and cached locally The cache stores the most recent 4 entries for 12 hours or until flushed "];

